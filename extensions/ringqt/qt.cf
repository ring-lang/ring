<nodllstartup>

<libinitfunc> ring_qt_start

<ignorecpointertype>

<code>
/* Copyright (c) 2013-2018 Mahmoud Fayed <msfclipper@yahoo.com> */

extern "C" {
	#include "ring.h"
}

#include "gpushbutton.h"
#include "gaction.h"
#include "glineedit.h"
#include "gtextedit.h"
#include "glistwidget.h"
#include "gtreeview.h"
#include "gtreewidget.h"
#include "gcombobox.h"
#include "gtabwidget.h"
#include "gtablewidget.h"
#include "gprogressbar.h"
#include "gspinbox.h"
#include "gslider.h"
#include "gdial.h"
#include "gnetworkaccessmanager.h"
#include "gcheckbox.h"
#include "gradiobutton.h"
#include "gbuttongroup.h"
#include "gvideowidget.h"
#include "gtimer.h"
#include "gtcpserver.h"
#include "giodevice.h"
#include "gabstractsocket.h"
#include "gtcpsocket.h"
#include "gcolordialog.h"
#include "gallevents.h"
#include "gthread.h"
#include "gplaintextedit.h"
#include "gheaderview.h"
#include "gprocess.h"
#include "codeeditor.h"
#include "highlighter.h"
#include "gtoolbutton.h"
#include "gbluetoothdevicediscoveryagent.h"
#include "gbluetoothlocaldevice.h"
#include "gbluetoothserver.h"
#include "gbluetoothservicediscoveryagent.h"
#include "gbluetoothsocket.h"
#include "gbluetoothtransfermanager.h"
#include "gbluetoothtransferreply.h"
#include "gwindow.h"
#include "gguiapplication.h"
#include "gtextbrowser.h"
#include "gdockwidget.h"
#include "gstackedwidget.h"
#include "gcalendarwidget.h"
<filter> ((iswindows() or ismacosx()) and sysget("RINGQT_ANDROID") = "")
#include "openglwidget.h"
</filter>

#include <QApplication>
#include <QObject>
#include <QWidget>
#include <QLabel>
#include <QPixmap>
#include <QIcon>
#include <QSize>
#include <QPushButton>
#include <QMainWindow>
#include <QVBoxLayout>
#include <QHBoxLayout>
#include <QLineEdit>
#include <QTextEdit>
#include <QListWidget>
#include <QTreeView>
#include <QDir>
#include <QFileSystemModel>
#include <QTreeWidget>
#include <QTreeWidgetItem>
#include <QComboBox>
#include <QVariant>
#include <QMenuBar>
#include <QMenu>
#include <QToolBar>
#include <QMainWindow>
#include <QStatusBar>
#include <QDockWidget>
#include <QTabWidget>
#include <QTableWidget>
#include <QTableWidgetItem>
#include <QSizePolicy>
#include <QFrame>
#include <QAbstractScrollArea>
#include <QAbstractItemView>
#include <QProgressBar>
#include <QSpinBox>
#include <QSlider>
#include <QAbstractSlider>
#include <QDateEdit>
#include <QDateTimeEdit>
#include <QAbstractSpinBox>
#include <QDial>
#include <QUrl>
#include <QCheckBox>
#include <QRadioButton>
#include <QButtonGroup>
#include <QMediaPlayer>
#include <QMediaPlaylist>
#include <QVideoWidget>
#include <QPrinter>
#include <QAction>
#include <QEvent>
#include <QMessageBox>
#include <QTimer>
#include <QFileDialog>
#include <QPainter>
#include <QPicture>
#include <QPen>
#include <QColor>
#include <QPrinter>
#include <QFont>
#include <QBrush>
#include <QByteArray>
#include <QIODevice>
#include <QAbstractSocket>
#include <QTcpSocket>
#include <QTcpServer>
#include <QNetworkProxy>
#include <QHostAddress>
#include <QHostInfo>
#include <QList>
#include <QFileInfo>
#include <QDirModel>
#include <QModelIndex>
#include <QFontDialog>
#include <QDialog>
#include <QTextCursor>
#include <QTextBlock>
#include <QTextDocumentFragment>
#include <QColorDialog>
#include <QHeaderView>
#include <QStringList>
#include <QKeySequence>
#include <QLCDNumber>
#include <QInputDialog>
#include <QDesktopWidget>
#include <QRect>
#include <QTextDocument>
#include <QTime>
#include <QTest>
#include <QListWidgetItem>
#include <QSystemTrayIcon>
#include <QDate>
#include <QTextCodec>
#include <QtSql>
#include <QSqlDatabase>
#include <QSqlDriver>
#include <QSqlQuery>
#include <QSqlError>
#include <QSqlIndex>
#include <QSqlRecord>
#include <QSqlField>
#include <QSqlDriverCreatorBase>
#include <QNetworkRequest>
#include <QNetworkAccessManager>
#include <QNetworkReply>
#include <QPainterPath>
#include <QImage>
#include <QBitmap>
#include <QMediaContent>
#include <QTableView>
#include <QXmlStreamReader>
#include <QXmlStreamWriter>
#include <QXmlStreamNotationDeclaration>
#include <QXmlStreamNamespaceDeclaration>
#include <QXmlStreamEntityResolver>
#include <QXmlStreamEntityDeclaration>
#include <QXmlStreamAttributes>
#include <QXmlStreamAttribute>
#include <QThread>
#include <QThreadPool>
#include <QRegularExpression>
#include <QRegularExpressionMatch>
#include <QRegularExpressionMatchIterator>
#include <QJsonValue>
#include <QJsonParseError>
#include <QJsonObject>
#include <QJsonDocument>
#include <QJsonArray>
#include <iterator>
#include <QPlainTextEdit>
#include <QGridLayout>
#include <QTextCharFormat>
#include <QCameraViewfinder>
#include <QGraphicsVideoItem>
#include <QVideoWidgetControl>
#include <QCamera>
#include <QCameraImageCapture>
#include <QFontMetrics>
#include <QList>
#include <QSplashScreen>
#include <QBoxLayout>
#include <QLayout>
#include <QLinearGradient>
#include <QGradient>
#include <QPointF>
#include <QPoint>
#include <QStyleFactory>
#include <QScrollArea>
#include <QSplitter>
#include <QCompleter>
#include <QString>
#include <QProcess>
#include <QMdiArea>
#include <QMdiSubWindow>
#include <QCursor>
#include <QListView>
#include <QUuid>
#include <QDesktopServices>
#include <QToolButton>
#include <QStringRef>
#include <QMutex>
#include <QMutexLocker>
#include <QBuffer>
#include <QBluetoothAddress>
#include <QBluetoothDeviceDiscoveryAgent>
#include <QBluetoothDeviceInfo>
#include <QBluetoothUuid>
#include <QBluetoothHostInfo>
#include <QBluetoothLocalDevice>
#include <QBluetoothServer>
#include <QBluetoothServiceDiscoveryAgent>
#include <QBluetoothServiceInfo>
#include <QBluetoothSocket>
#include <QBluetoothTransferManager>
#include <QBluetoothTransferReply>
#include <QBluetoothTransferRequest>
#include <QBluetoothUuid>
#include <QDateTime>
#include <QScreen>
#include <QWindow>
#include <QGuiApplication>
#include <QTextBrowser>
#include <QRegion>
#include <QStackedWidget>
#include <QCalendarWidget>
#include <QVector2D>
#include <QVector3D>
#include <QVector4D>
#include <QQuaternion>
#include <QMatrix4x4>

#include <QTabBar>
#include "gtabbar.h"
#include <QFile>
#include <QFileDevice>
#include <QStandardPaths>

<filter> (iswindows() or ismacosx())
#include <QQuickWidget>
#include <QQmlError>
#include "gquickwidget.h"
</filter>

<filter> ((iswindows() or ismacosx()) and sysget("RINGQT_ANDROID") = "")

#include <QOpenGLFunctions>
#include <QOpenGLContext>
#include <QSurfaceFormat>
#include <QOpenGLFunctions_3_2_Core>
#include <QOpenGLVersionProfile>
#include <QOpenGLPaintDevice>
#include <QPaintDevice>
#include <QOpenGLTimerQuery>
#include <QOpenGLDebugLogger>
#include <QOpenGLFramebufferObject>
#include <QOpenGLVertexArrayObject>
#include <QOpenGLBuffer>
#include <QOpenGLShaderProgram>
#include <QOpenGLShader>
#include <QOpenGLTexture>
</filter>

<filter> (sysget("RINGQT_ANDROID") = "")

#include "gserialport.h"
#include <QSerialPort>
#include <QSerialPortInfo>

</filter>

<filter> (sysget("RINGQT_ANDROID") = "" and sysget("RINGQT_NOWEBKIT") = "")
#include "gwebview.h"
#include <QWebSettings>
#include <QWebView>
</filter>

<filter> (sysget("RINGQT_ANDROID") = "" and sysget("RINGQT_NOWEBKIT") = "1")
#include "gwebengineview.h"
#include <QWebEngineSettings>
#include <QWebEngineView>
#include <QWebEnginePage>
#include <QWebEngineHistory>
</filter>


<filter> (iswindows() and sysget("RINGQT_ANDROID") = "")

#include <QAxObject>
#include <QAxBase>

</filter>

extern "C" {

	RING_API void ring_qt_start(RingState *pRingState);

	RING_API void ringlib_init(RingState *pRingState)
	{

		new QApplication(pRingState->argc,pRingState->argv);
 	   	ring_qt_start(pRingState) ;
	}

}
</code>


<runcode>

aStringTypes + "QString"

aBeforeReturn + ["QString",".toStdString().c_str()"]

aNewMethodName + ["QWebView","load","loadpage"]
aNewMethodName + ["QMediaPlaylist","load","loadfile"]
aNewMethodName + ["QMediaPlaylist","next","movenext"]
aNewMethodName + ["QPainter","end","endpaint"]
aNewMethodName + ["QPicture","load","loadfile"]
aNewMethodName + ["QLineEdit","end","endtext"]
aNewMethodName + ["QDialog","done","donedialog"]
aNewMethodName + ["QTextDocument","end","enddoc"]
aNewMethodName + ["QTextBlock","next","nextblock"]
aNewMethodName + ["QSqlQuery","next","movenext"]
aNewMethodName + ["QImage","load","loadimage"]
aNewMethodName + ["QNetworkAccessManager","get","getvalue"]
aNewMethodName + ["QNetworkAccessManager","put","putvalue"]
aNewMethodName + ["QThread","exit","exitfromthread"]
aNewMethodName + ["QRegularExpressionMatchIterator","next","nextitem"]
aNewMethodName + ["QCamera","load","loadcamera"]
aNewMethodName + ["QPixmap","load","loadpixmap"]
aNewMethodName + ["QBluetoothTransferManager","put","putdata"]
aNewMethodName + ["QCoreApplication","exit","exitfromapplication"]
aNewMethodName + ["QOpenGLTimerQuery","end","endtimer"]

aNumberTypes + "qreal"
aNumberTypes + "qint64"

aEnumTypes + "Qt::GestureType"
aEnumTypes + "Qt::GestureFlag"
aEnumTypes + "Qt::ShortcutContext"
aEnumTypes + "Qt::InputMethodQuery"
aEnumTypes + "Qt::WindowType"
aEnumTypes + "QWidget::RenderFlag"
aEnumTypes + "Qt::WidgetAttribute"
aEnumTypes + "QPalette::ColorRole"
aEnumTypes + "Qt::ContextMenuPolicy"
aEnumTypes + "Qt::FocusReason"
aEnumTypes + "Qt::FocusPolicy"
aEnumTypes + "Qt::InputMethodHint"
aEnumTypes + "Qt::LayoutDirection"
aEnumTypes + "QSizePolicy::Policy"
aEnumTypes + "Qt::WindowType"
aEnumTypes + "Qt::WindowModality"
aEnumTypes + "Qt::WindowState"
aEnumTypes + "Qt::AlignmentFlag"
aEnumTypes + "Qt::Alignment"
aEnumTypes + "Qt::TextFormat"
aEnumTypes + "Qt::TextInteractionFlag"
aEnumTypes + "Qt::AspectRatioMode"
aEnumTypes + "Qt::TransformationMode"
aEnumTypes + "Qt::CursorMoveStyle"
aEnumTypes + "QLineEdit::EchoMode"
aEnumTypes + "QTextDocument::FindFlag"
aEnumTypes + "QTextCursor::MoveOperation"
aEnumTypes + "QTextCursor::MoveMode"
aEnumTypes + "QTextEdit::LineWrapMode"
aEnumTypes + "QTextOption::WrapMode"
aEnumTypes + "QItemSelectionModel::SelectionFlag"
aEnumTypes + "Qt::SortOrder"
aEnumTypes + "QAbstractItemView::ScrollHint"
aEnumTypes + "QDir::Filter"
aEnumTypes + "Qt::DropAction"
aEnumTypes + "Qt::Orientation"
aEnumTypes + "Qt::CheckState"
aEnumTypes + "QTreeWidgetItem::ChildIndicatorPolicy"
aEnumTypes + "Qt::ItemFlag"
aEnumTypes + "Qt::MatchFlag"
aEnumTypes + "Qt::Corner"
aEnumTypes + "Qt::ToolBarArea"
aEnumTypes + "Qt::ToolButtonStyle"
aEnumTypes + "Qt::DockWidgetArea"
aEnumTypes + "QMainWindow::DockOption"
aEnumTypes + "QTabWidget::TabPosition"
aEnumTypes + "QTabWidget::TabShape"
aEnumTypes + "QDockWidget::DockWidgetFeature"
aEnumTypes + "Qt::TextElideMode"
aEnumTypes + "Qt::DockWidgetAreas"
aEnumTypes + "QFrame::Shadow"
aEnumTypes + "QFrame::Shape"
aEnumTypes + "Qt::ScrollBarPolicy"
aEnumTypes + "QAbstractItemView::DragDropMode"
aEnumTypes + "QAbstractItemView::ScrollMode"
aEnumTypes + "QAbstractItemView::EditTrigger"
aEnumTypes + "QAbstractItemView::SelectionBehavior"
aEnumTypes + "QAbstractItemView::SelectionMode"
aEnumTypes + "QProgressBar::Direction"
aEnumTypes + "QAbstractSlider::SliderAction"
aEnumTypes + "QSlider::TickPosition"
aEnumTypes + "QDateTimeEdit::Section"
aEnumTypes + "Qt::TimeSpec"
aEnumTypes + "QAbstractSpinBox::ButtonSymbols"
aEnumTypes + "QAbstractSpinBox::CorrectionMode"
aEnumTypes + "QWebPage::FindFlag"
aEnumTypes + "QWebPage::WebAction"
aEnumTypes + "QWebEnginePage::FindFlag"
aEnumTypes + "QWebEnginePage::WebAction"
aEnumTypes + "QPainter::RenderHint"
aEnumTypes + "QUrl::ComponentFormattingOption"
aEnumTypes + "QUrl::ParsingMode"
aEnumTypes + "QMediaPlaylist::PlaybackMode"
aEnumTypes + "QAction::ActionEvent"
aEnumTypes + "QAction::MenuRole"
aEnumTypes + "QAction::Priority"
aEnumTypes + "QKeySequence::StandardKey"
aEnumTypes + "QMessageBox::ButtonRole"
aEnumTypes + "QMessageBox::StandardButton"
aEnumTypes + "QFileDialog::DialogLabel"
aEnumTypes + "QFileDialog::AcceptMode"
aEnumTypes + "QFileDialog::FileMode"
aEnumTypes + "QFileDialog::Option"
aEnumTypes + "QFileDialog::ViewMode"
aEnumTypes + "Qt::ImageConversionFlag"
aEnumTypes + "Qt::FillRule"
aEnumTypes + "Qt::SizeMode"
aEnumTypes + "Qt::BGMode"
aEnumTypes + "Qt::ClipOperation"
aEnumTypes + "QPainter::CompositionMode"
aEnumTypes + "Qt::PenCapStyle"
aEnumTypes + "Qt::PenJoinStyle"
aEnumTypes + "Qt::PenStyle"
aEnumTypes + "QColor::Spec"
aEnumTypes + "QPrinter::Unit"
aEnumTypes + "QPrinter::ColorMode"
aEnumTypes + "QPrinter::DuplexMode"
aEnumTypes + "QPrinter::OutputFormat"
aEnumTypes + "QPageLayout::Unit"
aEnumTypes + "QPrinter::PageOrder"
aEnumTypes + "QPageLayout::Orientation"
aEnumTypes + "QPrinter::PaperSource"
aEnumTypes + "QPrinter::PrintRange"
aEnumTypes + "QFont::Capitalization"
aEnumTypes + "QFont::HintingPreference"
aEnumTypes + "QFont::SpacingType"
aEnumTypes + "QFont::Style"
aEnumTypes + "QFont::StyleHint"
aEnumTypes + "QFont::StyleStrategy"
aEnumTypes + "QWebSettings::FontFamily"
aEnumTypes + "QWebSettings::FontSize"
aEnumTypes + "QWebSettings::WebAttribute"
aEnumTypes + "QWebSettings::ThirdPartyCookiePolicy"
aEnumTypes + "QWebSettings::WebGraphic"
aEnumTypes + "Qt::BrushStyle"
aEnumTypes + "QAbstractSocket::BindFlag"
aEnumTypes + "QIODevice::OpenModeFlag"
aEnumTypes + "QIODevice::OpenMode"
aEnumTypes + "QAbstractSocket::NetworkLayerProtocol"
aEnumTypes + "QAbstractSocket::PauseMode"
aEnumTypes + "QAbstractSocket::SocketState"
aEnumTypes + "QAbstractSocket::SocketOption"
aEnumTypes + "QNetworkRequest::KnownHeaders"
aEnumTypes + "QNetworkProxy::Capability"
aEnumTypes + "QNetworkProxy::ProxyType"
aEnumTypes + "QHostInfo::HostInfoError"
aEnumTypes + "QFileDevice::Permission"
aEnumTypes + "QDir::SortFlag"
aEnumTypes + "QFontDialog::FontDialogOption"
aEnumTypes + "QTextCursor::SelectionType"
aEnumTypes + "QColorDialog::ColorDialogOption"
aEnumTypes + "QLCDNumber::Mode"
aEnumTypes + "QLCDNumber::SegmentStyle"
aEnumTypes + "QInputDialog::InputMode"
aEnumTypes + "QInputDialog::InputDialogOption"
aEnumTypes + "QTextDocument::Stacks"
aEnumTypes + "QTextDocument::FindFlag"
aEnumTypes + "QTextDocument::MetaInformation"
aEnumTypes + "Qt::InputMethodHints"
aEnumTypes + "Qt::WindowFlags"
aEnumTypes + "QEvent::Type"
aEnumTypes + "QPrinter::PrinterMode"
aEnumTypes + "Qt::ItemFlags"
aEnumTypes + "QSystemTrayIcon::MessageIcon"
aEnumTypes + "Qt::DateFormat"
aEnumTypes + "MonthNameType"
aEnumTypes + "QTextCodec::ConversionFlag"
aEnumTypes + "ConverterState"
aEnumTypes + "QSql::NumericalPrecisionPolicy"
aEnumTypes + "QVariant::Type"
aEnumTypes + "DbmsType"
aEnumTypes + "QSqlQuery::BatchExecutionMode"
aEnumTypes + "RequiredStatus"
aEnumTypes + "QSql::ParamType"
aEnumTypes + "QSqlError::ErrorType"
aEnumTypes + "QSqlField::RequiredStatus"
aEnumTypes + "Qt::CaseSensitivity"
aEnumTypes + "QNetworkRequest::Attribute"
aEnumTypes + "QNetworkRequest::KnownHeaders"
aEnumTypes + "QNetworkRequest::Priority"
aEnumTypes + "QNetworkRequest::KnownHeaders" 
aEnumTypes + "QNetworkRequest::Priority"
aEnumTypes + "QNetworkAccessManager::NetworkAccessibility"
aEnumTypes + "QNetworkReply::NetworkError"
aEnumTypes + "Qt::SizeMode"
aEnumTypes + "Qt::ImageConversionFlags"
aEnumTypes + "Qt::MaskMode"
aEnumTypes + "QImage::Format"
aEnumTypes + "QImage::InvertMode"
aEnumTypes + "Error"
aEnumTypes + "ReadElementTextBehaviour"
aEnumTypes + "TokenType"
aEnumTypes + "QXmlStreamReader::ReadElementTextBehaviour"
aEnumTypes + "QThread::Priority"
aEnumTypes + "QRegularExpression::MatchOption"
aEnumTypes + "QRegularExpression::MatchType"
aEnumTypes + "QRegularExpression::PatternOption"
aEnumTypes + "QRegularExpression::MatchOptions"
aEnumTypes + "QRegularExpression::PatternOptions"
aEnumTypes + "QJsonDocument::DataValidation"
aEnumTypes + "QJsonDocument::JsonFormat"
aEnumTypes + "QPlainTextEdit::LineWrapMode"
aEnumTypes + "QTextCharFormat::FontPropertiesInheritanceBehavior"
aEnumTypes + "QTextCharFormat::UnderlineStyle"
aEnumTypes + "QTextCharFormat::VerticalAlignment"
aEnumTypes + "QCamera::FrameRateRange"
aEnumTypes + "QCamera::CaptureMode"
aEnumTypes + "QCamera::CaptureModes"
aEnumTypes + "QCamera::Error"
aEnumTypes + "QCamera::LockChangeReason"
aEnumTypes + "QCamera::LockQCamera::Status"
aEnumTypes + "QCamera::LockType"
aEnumTypes + "QCamera::LockTypes"
aEnumTypes + "QCamera::Position"
aEnumTypes + "QCamera::State"
aEnumTypes + "QCamera::Status"
aEnumTypes + "QCameraImageCapture::CaptureDestination"
aEnumTypes + "QCameraImageCapture::CaptureDestinations"
aEnumTypes + "QCameraImageCapture::DriveMode"
aEnumTypes + "QCameraImageCapture::Error"
aEnumTypes + "QHeaderView::ResizeMode"
aEnumTypes + "QLayout::SizeConstraint"
aEnumTypes + "QGradient::CoordinateMode"
aEnumTypes + "QGradient::Spread"
aEnumTypes + "QGradient::Type"
aEnumTypes + "Qt::MatchFlags"
aEnumTypes + "QCompleter::CompletionMode"
aEnumTypes + "QCompleter::ModelSorting"
aEnumTypes + "QString::SplitBehavior"
aEnumTypes + "QProcess::ExitStatus"
aEnumTypes + "QProcess::InputChannelMode"
aEnumTypes + "QProcess::ProcessChannel"
aEnumTypes + "QProcess::ProcessChannelMode"
aEnumTypes + "QProcess::ProcessError"
aEnumTypes + "QProcess::ProcessState"
aEnumTypes + "QMdiArea::ViewMode"
aEnumTypes + "QMdiArea::WindowOrder"
aEnumTypes + "QMdiArea::AreaOption"
aEnumTypes + "QMdiSubWindow::SubWindowOption"
aEnumTypes + "Qt::CursorShape"
aEnumTypes + "QListView::LayoutMode"
aEnumTypes + "QListView::Movement"
aEnumTypes + "QListView::ResizeMode"
aEnumTypes + "QListView::ViewMode"
aEnumTypes + "QListView::Flow"
aEnumTypes + "QAxBase::PropertyBag"
aEnumTypes + "QToolButton::ToolButtonPopupMode"
aEnumTypes + "QMutex::RecursionMode"
aEnumTypes + "QBluetoothDeviceDiscoveryAgent::DiscoveryMethod"
aEnumTypes + "QBluetoothDeviceDiscoveryAgent::DiscoveryMethods"
aEnumTypes + "QBluetoothDeviceDiscoveryAgent::Error"
aEnumTypes + "QBluetoothDeviceDiscoveryAgent::InquiryType"
aEnumTypes + "QBluetoothDeviceInfo::CoreConfiguration"
aEnumTypes + "QBluetoothDeviceInfo::CoreConfigurations"
aEnumTypes + "QBluetoothDeviceInfo::DataCompleteness"
aEnumTypes + "QBluetoothDeviceInfo::MajorDeviceClass"
aEnumTypes + "QBluetoothDeviceInfo::MinorAudioVideoClass"
aEnumTypes + "QBluetoothDeviceInfo::MinorComputerClass"
aEnumTypes + "QBluetoothDeviceInfo::MinorHealthClass"
aEnumTypes + "QBluetoothDeviceInfo::MinorImagingClass"
aEnumTypes + "QBluetoothDeviceInfo::MinorMiscellaneousClass"
aEnumTypes + "QBluetoothDeviceInfo::MinorNetworkClass"
aEnumTypes + "QBluetoothDeviceInfo::MinorPeripheralClass"
aEnumTypes + "QBluetoothDeviceInfo::MinorPhoneClass"
aEnumTypes + "QBluetoothDeviceInfo::MinorToyClass"
aEnumTypes + "QBluetoothDeviceInfo::MinorWearableClass"
aEnumTypes + "QBluetoothDeviceInfo::ServiceClass"
aEnumTypes + "QBluetoothDeviceInfo::ServiceClasses"
aEnumTypes + "QBluetoothLocalDevice::Error"
aEnumTypes + "QBluetoothLocalDevice::HostMode"
aEnumTypes + "QBluetoothLocalDevice::Pairing"
aEnumTypes + "QBluetoothServer::Error"
aEnumTypes + "QBluetoothServiceDiscoveryAgent::DiscoveryMode"
aEnumTypes + "QBluetoothServiceDiscoveryAgent::Error"
aEnumTypes + "QBluetoothServiceInfo::AttributeId"
aEnumTypes + "QBluetoothServiceInfo::Protocol"
aEnumTypes + "QBluetoothSocket::SocketError"
aEnumTypes + "QBluetoothSocket::SocketState"
aEnumTypes + "QBluetoothTransferReply::TransferError"
aEnumTypes + "QBluetoothTransferRequest::Attribute"
aEnumTypes + "QBluetoothUuid::CharacteristicType"
aEnumTypes + "QBluetoothUuid::DescriptorType"
aEnumTypes + "QBluetoothUuid::ProtocolUuid"
aEnumTypes + "QBluetoothUuid::ServiceClassUuid"
aEnumTypes + "QDockWidget::DockWidgetFeature"
aEnumTypes + "QDockWidget::DockWidgetFeatures"
aEnumTypes + "QRegion::RegionType"
aEnumTypes + "QEventLoop::ProcessEventsFlags"
aEnumTypes + "Qt::ApplicationAttribute"
aEnumTypes + "QCalendarWidget::HorizontalHeaderFormat"
aEnumTypes + "QCalendarWidget::VerticalHeaderFormat"
aEnumTypes + "QCalendarWidget::SelectionMode"
aEnumTypes + "QOpenGLFunctions::OpenGLFeature"
aEnumTypes + "QOpenGLFunctions::OpenGLFeatures"
aEnumTypes + "QOpenGLContext::OpenGLModuleType"
aEnumTypes + "QSurfaceFormat::ColorSpace"
aEnumTypes + "QSurfaceFormat::FormatOption"
aEnumTypes + "QSurfaceFormat::FormatOptions"
aEnumTypes + "QSurfaceFormat::OpenGLContextProfile"
aEnumTypes + "QSurfaceFormat::RenderableType"
aEnumTypes + "QSurfaceFormat::SwapBehavior"
aEnumTypes + "QOpenGLWidget::UpdateBehavior"
aEnumTypes + "QOpenGLTexture::BindingTarget"
aEnumTypes + "QOpenGLTexture::ComparisonFunction"
aEnumTypes + "QOpenGLTexture::ComparisonMode"
aEnumTypes + "QOpenGLTexture::CoordinateDirection"
aEnumTypes + "QOpenGLTexture::CubeMapFace"
aEnumTypes + "QOpenGLTexture::DepthStencilMode"
aEnumTypes + "QOpenGLTexture::Feature"
aEnumTypes + "QOpenGLTexture::Features"
aEnumTypes + "QOpenGLTexture::Filter"
aEnumTypes + "QOpenGLTexture::MipMapGeneration"
aEnumTypes + "QOpenGLTexture::PixelFormat"
aEnumTypes + "QOpenGLTexture::PixelType"
aEnumTypes + "QOpenGLTexture::SwizzleComponent"
aEnumTypes + "QOpenGLTexture::SwizzleValue"
aEnumTypes + "QOpenGLTexture::Target"
aEnumTypes + "QOpenGLTexture::TextureFormat"
aEnumTypes + "QOpenGLTexture::TextureUnitReset"
aEnumTypes + "QOpenGLTexture::WrapMode"
aEnumTypes + "QPaintDevice::PaintDeviceMetric"
aEnumTypes + "QOpenGLDebugLogger::LoggingMode"
aEnumTypes + "QOpenGLFramebufferObject::Attachment"
aEnumTypes + "QOpenGLBuffer::Access"
aEnumTypes + "QOpenGLBuffer::RangeAccessFlag"
aEnumTypes + "QOpenGLBuffer::RangeAccessFlags"
aEnumTypes + "QOpenGLBuffer::Type"
aEnumTypes + "QOpenGLBuffer::UsagePattern"
aEnumTypes + "QOpenGLShader::ShaderType"
aEnumTypes + "QOpenGLShader::ShaderTypeBit"
aEnumTypes + "QTabBar::ButtonPosition"
aEnumTypes + "QTabBar::SelectionBehavior"
aEnumTypes + "QTabBar::Shape"
aEnumTypes + "QFileDevice::FileError"
aEnumTypes + "QFileDevice::FileHandleFlag"
aEnumTypes + "QFileDevice::FileHandleFlags"
aEnumTypes + "QFileDevice::FileTime"
aEnumTypes + "QFileDevice::MemoryMapFlags"
aEnumTypes + "QFileDevice::Permission"
aEnumTypes + "QFileDevice::Permissions"
aEnumTypes + "QStandardPaths::LocateOption"
aEnumTypes + "QStandardPaths::LocateOptions"
aEnumTypes + "QStandardPaths::StandardLocation"
aEnumTypes + "QFile::FileHandleFlags"
aEnumTypes + "QFile::Permissions"
aEnumTypes + "QDir::Filter"
aEnumTypes + "QDir::Filters"
aEnumTypes + "QDir::SortFlag"
aEnumTypes + "QDir::SortFlags"
aEnumTypes + "QQuickWidget::ResizeMode"
aEnumTypes + "QQuickWidget::Status"

$aMallocClassesList + "QModelIndex"

</runcode>

<addfreefunctionsprototype>

<class>
name: QApp
parent: QGuiApplication
nonew
</class>

<register>
void exec(void)
void quit(void)
void processEvents(void)
void styleWindows(void)
void styleWindowsVista(void)
void styleFusion(void)
void styleFusionBlack(void)
void styleFusionCustom(QColor,QColor,QColor,QColor,QColor,QColor,QColor,QColor,QColor,QColor,QColor,QColor)
void closeAllWindows(void)
Qt::KeyboardModifiers keyboardModifiers(void)
</register>

<code>

RING_FUNC(ring_QApp_quit)
{
	if ( RING_API_PARACOUNT != 0 ) {
		RING_API_ERROR(RING_API_BADPARACOUNT);
		return ;
	}
	qApp->quit();
	exit(0);
}

RING_FUNC(ring_QApp_exec)
{
	if ( RING_API_PARACOUNT != 0 ) {
		RING_API_ERROR(RING_API_BADPARACOUNT);
		return ;
	}
	qApp->exec();
}

RING_FUNC(ring_QApp_styleWindows)
{
	qApp->setPalette(qApp->style()->standardPalette());
	qApp->setStyle(QStyleFactory::create("windows"));
}

RING_FUNC(ring_QApp_styleWindowsVista)
{
	qApp->setPalette(qApp->style()->standardPalette());
	qApp->setStyle(QStyleFactory::create("windowsvista"));
}

RING_FUNC(ring_QApp_styleFusion)
{
	qApp->setPalette(qApp->style()->standardPalette());
	qApp->setStyle(QStyleFactory::create("fusion"));
}

RING_FUNC(ring_QApp_styleFusionBlack)
{
	qApp->setStyle(QStyleFactory::create("fusion"));
	QPalette palette;
	palette.setColor(QPalette::Window, QColor(53,53,53));
	palette.setColor(QPalette::WindowText, Qt::white);
	palette.setColor(QPalette::Base, QColor(15,15,15));
	palette.setColor(QPalette::AlternateBase, QColor(53,53,53));
	palette.setColor(QPalette::ToolTipBase, Qt::white);
	palette.setColor(QPalette::ToolTipText, Qt::white);
	palette.setColor(QPalette::Text, Qt::white);
	palette.setColor(QPalette::Button, QColor(53,53,53));
	palette.setColor(QPalette::ButtonText, Qt::white);
	palette.setColor(QPalette::BrightText, Qt::red);

	palette.setColor(QPalette::Highlight, QColor(142,45,197).lighter());
	palette.setColor(QPalette::HighlightedText, Qt::black);

	palette.setColor(QPalette::Disabled, QPalette::Text, Qt::darkGray);
	palette.setColor(QPalette::Disabled, QPalette::ButtonText, Qt::darkGray);

	qApp->setPalette(palette);
}

RING_FUNC(ring_QApp_styleFusionCustom)
{
	RING_API_IGNORECPOINTERTYPE ;
	if ( RING_API_PARACOUNT != 12 ) {
		RING_API_ERROR(RING_API_BADPARACOUNT);
		return ;
	}
	if ( (! RING_API_ISPOINTER(1)) || (! RING_API_ISPOINTER(2)) || 
		(! RING_API_ISPOINTER(3)) || (! RING_API_ISPOINTER(4)) || 
		(! RING_API_ISPOINTER(5)) || (! RING_API_ISPOINTER(6)) ||
		(! RING_API_ISPOINTER(7)) || (! RING_API_ISPOINTER(8)) ||
		(! RING_API_ISPOINTER(9)) || (! RING_API_ISPOINTER(10)) ||
		(! RING_API_ISPOINTER(11)) || (! RING_API_ISPOINTER(12)) ) {
		RING_API_ERROR(RING_API_BADPARATYPE);
		return ;
	}
	qApp->setStyle(QStyleFactory::create("fusion"));
	QPalette palette;
	palette.setColor(QPalette::Window, 		* (QColor *) RING_API_GETCPOINTER(1,"QColor") );
	palette.setColor(QPalette::WindowText, 		* (QColor *) RING_API_GETCPOINTER(2,"QColor") );
	palette.setColor(QPalette::Base, 		* (QColor *) RING_API_GETCPOINTER(3,"QColor") );
	palette.setColor(QPalette::AlternateBase, 	* (QColor *) RING_API_GETCPOINTER(4,"QColor") );
	palette.setColor(QPalette::ToolTipBase, 	* (QColor *) RING_API_GETCPOINTER(5,"QColor") );
	palette.setColor(QPalette::ToolTipText, 	* (QColor *) RING_API_GETCPOINTER(6,"QColor") );
	palette.setColor(QPalette::Text,		* (QColor *) RING_API_GETCPOINTER(7,"QColor") );
	palette.setColor(QPalette::Button, 		* (QColor *) RING_API_GETCPOINTER(8,"QColor") );
	palette.setColor(QPalette::ButtonText, 		* (QColor *) RING_API_GETCPOINTER(9,"QColor") );
	palette.setColor(QPalette::BrightText, 		* (QColor *) RING_API_GETCPOINTER(10,"QColor") );
	palette.setColor(QPalette::Highlight, 		* (QColor *) RING_API_GETCPOINTER(11,"QColor") );
	palette.setColor(QPalette::HighlightedText, 	* (QColor *) RING_API_GETCPOINTER(12,"QColor") );
	qApp->setPalette(palette);
}


RING_FUNC(ring_QApp_processEvents)
{
	if ( RING_API_PARACOUNT != 0 ) {
		RING_API_ERROR(RING_API_BADPARACOUNT);
		return ;
	}
	qApp->processEvents();
}

RING_FUNC(ring_QApp_closeAllWindows)
{
	if ( RING_API_PARACOUNT != 0 ) {
		RING_API_ERROR(RING_API_BADPARACOUNT);
		return ;
	}
	qApp->closeAllWindows();
}

RING_FUNC(ring_QApp_keyboardModifiers)
{
	if ( RING_API_PARACOUNT != 0 ) {
		RING_API_ERROR(RING_API_BADPARACOUNT);
		return ;
	}
	RING_API_RETNUMBER( (double) qApp->keyboardModifiers() );
}

</code>

<class>
name: QDesktopServices
nonew
</class>

<register>
bool openUrl(QUrl)
void setUrlHandler(QString, QObject *receiver, const char *method)
void unsetUrlHandler(QString)
</register>

<code>
RING_FUNC(ring_QDesktopServices_openUrl)
{
	RING_API_IGNORECPOINTERTYPE ;
	if ( RING_API_PARACOUNT != 1 ) {
		RING_API_ERROR(RING_API_BADPARACOUNT);
		return ;
	}
	RING_API_RETNUMBER(QDesktopServices::openUrl(* (QUrl *) RING_API_GETCPOINTER(1,"QUrl"))) ;
}
RING_FUNC(ring_QDesktopServices_setUrlHandler)
{
	RING_API_IGNORECPOINTERTYPE ;
	if ( RING_API_PARACOUNT != 3 ) {
		RING_API_ERROR(RING_API_BADPARACOUNT);
		return ;
	}
	QDesktopServices::setUrlHandler(RING_API_GETSTRING(1),(QObject *) RING_API_GETCPOINTER(2,"QObject *"),RING_API_GETSTRING(3));
}
RING_FUNC(ring_QDesktopServices_unsetUrlHandler)
{
	if ( RING_API_PARACOUNT != 1 ) {
		RING_API_ERROR(RING_API_BADPARACOUNT);
		return ;
	}
	QDesktopServices::unsetUrlHandler(RING_API_GETSTRING(1));
}
</code>

<class>
name: QTest
nonew
</class>

<register>
void qsleep(int)
</register>

<code>
RING_FUNC(ring_QTest_qsleep)
{
	QTest::qSleep((int) RING_API_GETNUMBER(1));
}
</code>

<class>
name: QObject
para: void
</class>

bool blockSignals(bool block)
QObjectList children(void)
void dumpObjectInfo(void)
void dumpObjectTree(void)
bool inherits(const char *className)
void installEventFilter(QObject *filterObj)
bool isWidgetType(void)
void killTimer(int id)
void moveToThread(QThread *targetThread)
QString objectName(void)
QObject *parent(void)
QVariant property(const char *name)
void removeEventFilter(QObject *obj)
void setObjectName(QString)
void setParent(QObject *parent)
bool setProperty(const char *name, QVariant)
bool signalsBlocked(void)
int startTimer(int interval)
QThread *thread(void)
void deleteLater(void)

<class>
name: QWidget
para: void
parent: QObject
</class>

bool acceptDrops(void)
QString accessibleDescription(void)
QString accessibleName(void)
void activateWindow(void)
void addAction(QAction *action)
void adjustSize(void)
bool autoFillBackground(void)
int backgroundRole(void)
QSize baseSize(void)
QWidget *childAt(int x, int y)
QRect childrenRect(void)
QRegion childrenRegion(void)
void clearFocus(void)
void clearMask(void)
QMargins contentsMargins(void)
QRect contentsRect(void)
int contextMenuPolicy(void)
QCursor cursor(void)
int effectiveWinId(void)
void ensurePolished(void)
int focusPolicy(void)
QWidget *focusProxy(void)
QWidget *focusWidget(void)
QFont font(void)
QFontInfo fontInfo(void)

<comment>
QFontMetrics fontMetrics(void)
</comment>

int foregroundRole(void)
QRect frameGeometry(void)
QSize frameSize(void)
QRect geometry(void)
void getContentsMargins(int *left, int *top, int *right, int *bottom)
QPixmap grab(QRect) 
void grabGesture(Qt::GestureType gesture, Qt::GestureFlag flags)
void grabKeyboard(void)
void grabMouse(void)
int grabShortcut(QKeySequence , Qt::ShortcutContext context)
QGraphicsEffect *graphicsEffect(void)
QGraphicsProxyWidget *graphicsProxyWidget(void)
bool hasFocus(void)
bool hasMouseTracking(void)
int height(void)
int heightForWidth(int w)
int inputMethodHints(void)
QVariant inputMethodQuery(Qt::InputMethodQuery query)
void insertAction(QAction *before, QAction *action)
bool isActiveWindow(void)
bool isAncestorOf(QWidget *child)
bool isEnabled(void)
bool isEnabledTo(QWidget *ancestor)
bool isFullScreen(void)
bool isHidden(void)
bool isMaximized(void)
bool isMinimized(void)
bool isModal(void)
bool isVisible(void)
bool isVisibleTo(QWidget *ancestor)
bool isWindow(void)
bool isWindowModified(void)
QLayout *layout(void)
int layoutDirection(void)
QLocale locale(void)
QPoint mapFrom(QWidget *parent, QPoint)
QPoint mapFromGlobal(QPoint)
QPoint mapFromParent(QPoint)
QPoint mapTo(QWidget *parent, QPoint)
QPoint mapToGlobal(QPoint pos)
QPoint mapToParent(QPoint pos)
QRegion mask(void)
int maximumHeight(void)
QSize maximumSize(void)
int maximumWidth(void)
int minimumHeight(void)
QSize minimumSize(void)
int minimumWidth(void)
void move(int x, int y)
QWidget *nativeParentWidget(void)
QWidget *nextInFocusChain(void)
QRect normalGeometry(void)
void overrideWindowFlags(Qt::WindowType flags)
QPalette palette(void)
QWidget *parentWidget(void)
QPoint pos(void)
QWidget *previousInFocusChain(void)
QRect rect(void)
void releaseKeyboard(void)
void releaseMouse(void)
void releaseShortcut(int id)
void removeAction(QAction *action)
void render(QPaintDevice *target, QPoint,QRegion, QWidget::RenderFlag)
void repaint(void)
void resize(int w, int h)
bool restoreGeometry(QByteArray)
QByteArray saveGeometry(void)
void scroll(int dx, int dy)
void setAcceptDrops(bool on)
void setAccessibleDescription(QString)
void setAccessibleName(QString)
void setAttribute(Qt::WidgetAttribute attribute, bool on)
void setAutoFillBackground(bool enabled)
void setBackgroundRole(QPalette::ColorRole role)
void setBaseSize(int basew, int baseh)
void setContentsMargins(int left, int top, int right, int bottom)
void setContextMenuPolicy(Qt::ContextMenuPolicy policy)
void setCursor(QCursor)
void setFixedHeight(int h)
void setFixedSize(int w, int h)
void setFixedWidth(int w)
void setFocus(Qt::FocusReason reason)
void setFocusPolicy(Qt::FocusPolicy policy)
void setFocusProxy(QWidget *w)
void setFont(QFont)
void setForegroundRole(QPalette::ColorRole role)
void setGeometry(int x, int y, int w, int h)
void setGraphicsEffect(QGraphicsEffect *effect)
void setInputMethodHints(Qt::InputMethodHint hints)
void setLayout(QLayout *layout)
void setLayoutDirection(Qt::LayoutDirection direction)
void setLocale(QLocale)
void setMask(QBitmap)
void setMaximumHeight(int maxh)
void setMaximumSize(int maxw, int maxh)
void setMaximumWidth(int maxw)
void setMinimumHeight(int minh)
void setMinimumSize(int minw, int minh)
void setMinimumWidth(int minw)
void setMouseTracking(bool enable)
void setPalette(QPalette)
void setParent(QWidget *parent)
void setShortcutAutoRepeat(int id, bool enable)
void setShortcutEnabled(int id, bool enable)
void setSizeIncrement(int w, int h)
void setSizePolicy(QSizePolicy::Policy horizontal, QSizePolicy::Policy vertical)
void setStatusTip(QString)
void setStyle(QStyle *style)
void setToolTip(QString)
void setUpdatesEnabled(bool enable)
void setWhatsThis(QString)
void setWindowFilePath(QString)
void setWindowFlags(Qt::WindowType type)
void setWindowIcon(QIcon)
void setWindowIconText(QString)
void setWindowModality(Qt::WindowModality windowModality)
void setWindowOpacity(double level)
void setWindowRole(QString)
void setWindowState(Qt::WindowState windowState)
QSize size(void)
QSize sizeIncrement(void)
QSizePolicy sizePolicy(void)
void stackUnder(QWidget *w)
QString statusTip(void)
QStyle *style(void)
QString styleSheet(void)
bool testAttribute(Qt::WidgetAttribute attribute)
QString toolTip(void)
bool underMouse(void)
void ungrabGesture(Qt::GestureType gesture)
void unsetCursor(void)
void unsetLayoutDirection(void)
void unsetLocale(void)
void update(int x, int y, int w, int h)
void updateGeometry(void)
bool updatesEnabled(void)
QRegion visibleRegion(void)
QString whatsThis(void)
int width(void)
int winId(void)
QWidget *window(void)
QString windowFilePath(void)
int windowFlags(void)
QWindow *windowHandle(void)
QIcon windowIcon(void)
QString windowIconText(void)
int windowModality(void)
double windowOpacity(void)
QString windowRole(void)
int windowState(void)
QString windowTitle(void)
int windowType(void)
int x(void)
int y(void)
bool close(void)
void hide(void)
void lower(void)
void raise(void)
void setDisabled(bool disable)
void setEnabled(bool)
void setHidden(bool hidden)
void setStyleSheet(QString)
void setWindowModified(bool)
void setWindowTitle(QString)
void show(void)
void showFullScreen(void)
void showMaximized(void)
void showMinimized(void)
void showNormal(void)
QWidget *find(int id)
QWidget *keyboardGrabber(void)
QWidget *mouseGrabber(void)
void setTabOrder(QWidget *first, QWidget *second)

<class>
name: QLabel
para: QWidget *
parent: QWidget
</class>
int alignment(void)
QWidget *buddy(void)
bool hasScaledContents(void)
bool hasSelectedText(void)
int indent(void)
int margin(void)
QMovie *movie(void)
bool openExternalLinks(void)
QPicture *picture(void)
QPixmap *pixmap(void)
QString selectedText(void)
int selectionStart(void)
void setAlignment(Qt::AlignmentFlag)
void setBuddy(QWidget *buddy)
void setIndent(int)
void setMargin(int)
void setOpenExternalLinks(bool open)
void setScaledContents(bool)
void setSelection(int start, int length)
void setTextFormat(Qt::TextFormat)
void setTextInteractionFlags(Qt::TextInteractionFlag flags)
void setWordWrap(bool on)
QString text(void)
int textFormat(void)
int textInteractionFlags(void)
bool wordWrap(void)
void clear(void)
void setMovie(QMovie *movie)
void setNum(double num)
void setPicture(QPicture)
void setPixmap(QPixmap)
void setText(QString)

<class>
name: QPushButton
para: QWidget *
parent: QAbstractButton
codename: GPushButton
passvmpointer
</class>
void setText(const char *)
void setClickEvent(const char *)
void setIcon(QIcon)
void setIconSize(QSize)
const char *getClickEvent(void)

<class>
name: QBitmap
para: void
parent: QPixmap
</class>

void clear(void)
void swap(QBitmap)
QBitmap transformed(QTransform)
QBitmap fromData(QSize, const uchar * bits, QImage::Format monoFormat)
QBitmap fromImage(QImage, Qt::ImageConversionFlags flags)

<class>
name: QPixmap
para: const char *
</class>

QPixmap copy(int x, int y, int width, int height)
QPixmap scaled(int width, int height, Qt::AspectRatioMode aspectRatioMode, Qt::TransformationMode transformMode) 
int width(void)
int height(void)
QBitmap createMaskFromColor(QColor , Qt::MaskMode)
QBitmap mask(void)
void setMask(QBitmap)
void fill(QColor)
QPixmap fromImage(QImage,Qt::ImageConversionFlags)
bool load(QString, const char *, Qt::ImageConversionFlags )

qint64 cacheKey(void)
bool convertFromImage(QImage image, Qt::ImageConversionFlags flags)
QPixmap copy@2(QRect rectangle)
QBitmap createHeuristicMask(bool clipTight)
int depth(void)
void detach(void)
qreal devicePixelRatio(void)
bool hasAlpha(void)
bool hasAlphaChannel(void)
bool isNull(void)
bool isQBitmap(void)
bool loadFromData(uchar *data, uint len, char *format, Qt::ImageConversionFlags flags)
bool loadFromData@2(QByteArray data, char *format, Qt::ImageConversionFlags flags)
QRect rect(void)
bool save(QString fileName, char *format, int quality)
bool save@2(QIODevice *device, char *format, int quality)
QPixmap scaled@2(QSize size, Qt::AspectRatioMode aspectRatioMode, Qt::TransformationMode transformMode)
QPixmap scaledToHeight(int height, Qt::TransformationMode mode)
QPixmap scaledToWidth(int width, Qt::TransformationMode mode)
void scroll(int dx, int dy, int x, int y, int width, int height, QRegion *exposed)
void scroll@2(int dx, int dy, QRect rect, QRegion *exposed)
void setDevicePixelRatio(qreal scaleFactor)
QSize size(void)
void swap(QPixmap other)
QImage toImage(void)
QPixmap transformed(QTransform transform, Qt::TransformationMode mode)
QPixmap transformed@2(QMatrix matrix, Qt::TransformationMode mode)
int defaultDepth(void)
QPixmap fromImage@2(QImage image, Qt::ImageConversionFlags flags)
QPixmap fromImageReader(QImageReader *imageReader, Qt::ImageConversionFlags flags)
QTransform trueMatrix(QTransform matrix, int width, int height)
QMatrix trueMatrix@2(QMatrix m, int w, int h)


<class>
name: QPixmap2
para: int width, int height
parent: QPixmap
codename: QPixmap
</class>

<class>
name: QIcon
para: QPixmap
managed
</class>

<class>
name: QSize
para: int width, int height
managed
</class>

<class>
name: QLineEdit
para: QWidget *
parent: QWidget
codename: GLineEdit
passvmpointer
</class>

int alignment(void)
void backspace(void)
QCompleter *completer(void)
QMenu *createStandardContextMenu(void)
void cursorBackward(bool mark, int steps)
void cursorForward(bool mark, int steps)
int cursorMoveStyle(void)
int cursorPosition(void)
int cursorPositionAt(QPoint)
void cursorWordBackward(bool mark)
void cursorWordForward(bool mark)
void del(void)
void deselect(void)
QString displayText(void)
bool dragEnabled(void)
int echoMode(void)
void end(bool mark) # In RingQt use : void endtext(bool mark)
void getTextMargins(int *left, int *top, int *right, int *bottom)
bool hasAcceptableInput(void)
bool hasFrame(void)
bool hasSelectedText(void)
void home(bool mark)
QString inputMask(void)
void insert(QString)
bool isModified(void)
bool isReadOnly(void)
bool isRedoAvailable(void)
bool isUndoAvailable(void)
int maxLength(void)
QString placeholderText(void)
QString selectedText(void)
int selectionStart(void)
void setAlignment(Qt::AlignmentFlag flag)
void setCompleter(QCompleter *c)
void setCursorMoveStyle(Qt::CursorMoveStyle style)
void setCursorPosition(int)
void setDragEnabled(bool b)
void setEchoMode(QLineEdit::EchoMode)
void setFrame(bool)
void setInputMask(QString)
void setMaxLength(int)
void setModified(bool)
void setPlaceholderText(QString)
void setReadOnly(bool)
void setSelection(int start, int length)
void setTextMargins(int left, int top, int right, int bottom)
void setValidator(QValidator *v)
QString text(void)
QMargins textMargins(void)
QValidator *validator(void)

void clear(void)
void copy(void) 
void cut(void)
void paste(void)
void redo(void)
void selectAll(void)
void setText(QString)
void undo(void)

void setTextChangedEvent(const char *)
void setcursorPositionChangedEvent(const char *)
void seteditingFinishedEvent(const char *)
void setreturnPressedEvent(const char *)
void setselectionChangedEvent(const char *)
void settextEditedEvent(const char *)

const char *getTextChangedEvent(void)
const char *getcursorPositionChangedEvent(void)
const char *geteditingFinishedEvent(void)
const char *getreturnPressedEvent(void)
const char *getselectionChangedEvent(void)
const char *gettextEditedEvent(void)




<class>
name: QVBoxLayout
para: void
parent: QBoxLayout
</class>
void addWidget(QWidget *)
void addLayout(QLayout *)

<class>
name: QHBoxLayout
para: void
parent: QBoxLayout
</class>
void addWidget(QWidget *)
void addLayout(QLayout *)

<class>
name: QTextEdit
para: QWidget *
parent: QAbstractScrollArea
codename: GTextEdit
passvmpointer
</class>

bool acceptRichText(void)
int alignment(void)
QString anchorAt(QPoint)
bool canPaste(void)
QTextCharFormat currentCharFormat(void)
QFont currentFont(void)
QTextCursor cursorForPosition(QPoint)
QRect cursorRect(void)
int cursorWidth(void)
QTextDocument *document(void)
QString documentTitle(void)
void ensureCursorVisible(void)
bool find(QString, QTextDocument::FindFlag)
QString fontFamily(void)
bool fontItalic(void)
double fontPointSize(void)
bool fontUnderline(void)
int fontWeight(void)
bool isReadOnly(void)
bool isUndoRedoEnabled(void)
int lineWrapColumnOrWidth(void)
QVariant loadResource(int, QUrl)
void mergeCurrentCharFormat(QTextCharFormat)
void moveCursor(QTextCursor::MoveOperation operation, QTextCursor::MoveMode mode)
bool overwriteMode(void) 
void print(QPrinter * printer)  
void setAcceptRichText(bool accept)
void setCurrentCharFormat(QTextCharFormat)
void setCursorWidth(int width)
void setDocument(QTextDocument *document)
void setDocumentTitle(QString)
void setLineWrapColumnOrWidth(int w)
void setLineWrapMode(QTextEdit::LineWrapMode)
void setOverwriteMode(bool overwrite)
void setReadOnly(bool)
void setTabChangesFocus(bool)
void setTabStopWidth(int width)
void setTextCursor(QTextCursor)
void setTextInteractionFlags(Qt::TextInteractionFlag flags)
void setUndoRedoEnabled(bool enable)
void setWordWrapMode(QTextOption::WrapMode policy)
bool tabChangesFocus(void)  
int tabStopWidth(void)  
QColor textBackgroundColor(void)  
QColor textColor(void)  
QTextCursor textCursor(void)  
int textInteractionFlags(void)  
QString toHtml(void)  
QString toPlainText(void)  
int wordWrapMode(void) 

void append(QString)
void clear(void)
void copy(void)
void cut(void)
void insertHtml(QString)
void insertPlainText(QString)
void paste(void)
void redo(void)
void scrollToAnchor(QString)
void selectAll(void)
void setAlignment(Qt::AlignmentFlag a)
void setCurrentFont(QFont)
void setFontFamily(QString)
void setFontItalic(bool italic)
void setFontPointSize(double s)
void setFontUnderline(bool underline)
void setFontWeight(int weight)
void setHtml(QString)
void setPlainText(QString)
void setText(QString)
void setTextBackgroundColor(QColor)
void setTextColor(QColor)
void undo(void)
void zoomIn(int range)
void zoomOut(int range)

void setcopyAvailableEvent(const char *)
void setcurrentCharFormatChangedEvent(const char *)
void setcursorPositionChangedEvent(const char *)
void setredoAvailableEvent(const char *)
void setselectionChangedEvent(const char *)
void settextChangedEvent(const char *)
void setundoAvailableEvent(const char *)

const char *getcopyAvailableEvent(void)
const char *getcurrentCharFormatChangedEvent(void)
const char *getcursorPositionChangedEvent(void)
const char *getredoAvailableEvent(void)
const char *getselectionChangedEvent(void)
const char *gettextChangedEvent(void)
const char *getundoAvailableEvent(void)


<register>
void cyanline(void)
</register>

<code>
RING_FUNC(ring_QTextEdit_cyanline)
{
	RING_API_IGNORECPOINTERTYPE ;
	if ( RING_API_PARACOUNT != 1 ) {
		RING_API_ERROR(RING_API_MISS2PARA);
		return ;
	}
	if ( ! RING_API_ISPOINTER(1) ) {
		RING_API_ERROR(RING_API_BADPARATYPE);
		return ;
	}

	QTextEdit *editor;
	editor = (QTextEdit *) RING_API_GETCPOINTER(1,"QTextEdit *");

	QTextEdit::ExtraSelection highlight;
	highlight.cursor = editor->textCursor();
	highlight.format.setProperty(QTextFormat::FullWidthSelection, true);
	highlight.format.setBackground( Qt::cyan );

	QList<QTextEdit::ExtraSelection> extras;
	extras << highlight;
	editor->setExtraSelections( extras );
}
</code>


<register>
void setactivelinecolor(QColor)
</register>

<code>
RING_FUNC(ring_QTextEdit_setactivelinecolor)
{
	RING_API_IGNORECPOINTERTYPE ;
	if ( RING_API_PARACOUNT != 2 ) {
		RING_API_ERROR(RING_API_MISS2PARA);
		return ;
	}
	if ( ! RING_API_ISPOINTER(1) ) {
		RING_API_ERROR(RING_API_BADPARATYPE);
		return ;
	}

	QTextEdit *editor;
	editor = (QTextEdit *) RING_API_GETCPOINTER(1,"QTextEdit *");

	QTextEdit::ExtraSelection highlight;
	highlight.cursor = editor->textCursor();
	highlight.format.setProperty(QTextFormat::FullWidthSelection, true);
	highlight.format.setBackground( * (QColor *) RING_API_GETCPOINTER(2,"QColor") );

	QList<QTextEdit::ExtraSelection> extras;
	extras << highlight;
	editor->setExtraSelections( extras );
}
</code>

<class>
name: QListWidget
para: QWidget *
parent: QListView
codename: GListWidget
passvmpointer
</class>

void addItem(QString)
int count(void)
<comment>
QListWidgetItem *currentitem(void)
</comment>
int currentRow(void)
void editItem(QListWidgetItem *item)
<comment>
QList findItems(QString, int flags)
</comment>
void insertItem(int, QString)
bool isSortingEnabled(void)
QListWidgetItem *item(int row)
QListWidgetItem *itemAt(int x, int y)
QWidget *itemWidget(QListWidgetItem *item)
void openPersistentEditor(QListWidgetItem *item)
void removeItemWidget(QListWidgetItem *item)
int row(QListWidgetItem *item)
<comment>
QList selectedItems(void)
</comment>
void setCurrentItem(QListWidgetItem *item, QItemSelectionModel::SelectionFlag command)
void setCurrentRow(int row, QItemSelectionModel::SelectionFlag command)
void setItemWidget(QListWidgetItem *item, QWidget *widget)
void setSortingEnabled(bool enable)
void sortItems(Qt::SortOrder order)
QListWidgetItem *takeItem(int row)
QRect visualItemRect(QListWidgetItem *item)

void clear(void)
void scrollToItem(QListWidgetItem *item,QAbstractItemView::ScrollHint hint)

void setcurrentItemChangedEvent(const char *)
void setcurrentRowChangedEvent(const char *)
void setcurrentTextChangedEvent(const char *)
void setitemActivatedEvent(const char *)
void setitemChangedEvent(const char *)
void setitemClickedEvent(const char *)
void setitemDoubleClickedEvent(const char *)
void setitemEnteredEvent(const char *)
void setitemPressedEvent(const char *)
void setitemSelectionChangedEvent(const char *)

const char *getcurrentItemChangedEvent(void)
const char *getcurrentRowChangedEvent(void)
const char *getcurrentTextChangedEvent(void)
const char *getitemActivatedEvent(void)
const char *getitemChangedEvent(void)
const char *getitemClickedEvent(void)
const char *getitemDoubleClickedEvent(void)
const char *getitemEnteredEvent(void)
const char *getitemPressedEvent(void)
const char *getitemSelectionChangedEvent(void)

<class>
name: QTreeView
para: QWidget *
parent: QAbstractItemView
codename: GTreeView
passvmpointer
</class>

bool allColumnsShowFocus(void)
int autoExpandDelay(void) 
int columnAt(int x) 
int columnViewportPosition(int column) 
int columnWidth(int column) 
bool expandsOnDoubleClick(void) 
QHeaderView *header(void) 
int indentation(void) 
QModelIndex indexAbove(QModelIndex) 
QModelIndex indexBelow(QModelIndex)
bool isAnimated(void)
bool isColumnHidden(int column) 
bool isExpanded(QModelIndex)
bool isFirstColumnSpanned(int row, QModelIndex) 
bool isHeaderHidden(void) 
bool isRowHidden(int row,QModelIndex) 
bool isSortingEnabled(void)
bool itemsExpandable(void) 
bool rootIsDecorated(void)
void setAllColumnsShowFocus(bool enable)
void setAnimated(bool enable)
void setAutoExpandDelay(int delay)
void setColumnHidden(int column, bool hide)
void setColumnWidth(int column, int width)
void setExpanded(QModelIndex, bool expanded)
void setExpandsOnDoubleClick(bool enable)
void setFirstColumnSpanned(int row, QModelIndex, bool span)
void setHeader(QHeaderView * header)
void setHeaderHidden(bool hide)
void setIndentation(int i)
void setItemsExpandable(bool enable)
void setRootIsDecorated(bool show)
void setRowHidden(int row,QModelIndex, bool hide)
void setSortingEnabled(bool enable)
void setUniformRowHeights(bool uniform)
void setWordWrap(bool on)
void sortByColumn(int column,Qt::SortOrder order)
bool uniformRowHeights(void) 
bool wordWrap(void) 
void dataChanged(QModelIndex,QModelIndex)
QModelIndex indexAt(QPoint) 
void keyboardSearch(QString)
void reset(void)
void scrollTo(QModelIndex, QAbstractItemView::ScrollHint)
void selectAll(void)
void setModel(QAbstractItemModel *model)
void setRootIndex(QModelIndex)
void setSelectionModel(QItemSelectionModel *selectionModel)
QRect visualRect(QModelIndex)
void collapse(QModelIndex)
void collapseAll(void)
void expand(QModelIndex)
void expandAll(void)
void expandToDepth(int depth)
void hideColumn(int column)
void resizeColumnToContents(int column)
void showColumn(int column)

void setcollapsedEvent(const char *)
void setexpandedEvent(const char *)
void setactivatedEvent(const char *)
void setclickedEvent(const char *)
void setdoubleClickedEvent(const char *)
void setenteredEvent(const char *)
void setpressedEvent(const char *)
void setviewportEnteredEvent(const char *)

const char *getcollapsedEvent(void)
const char *getexpandedEvent(void)
const char *getactivatedEvent(void)
const char *getclickedEvent(void)
const char *getdoubleClickedEvent(void)
const char *getenteredEvent(void)
const char *getpressedEvent(void)
const char *getviewportEnteredEvent(void)

<class>
name: QDir
para: void
managed
</class>

QString absoluteFilePath(QString fileName)
QString absolutePath(void)
QString canonicalPath(void)
bool cd(QString dirName)
bool cdUp(void)
uint count(void)
QString dirName(void)
QFileInfoList entryInfoList(QStringList nameFilters, QDir::Filters filters, QDir::SortFlags sort)
QFileInfoList entryInfoList@2(QDir::Filters filters, QDir::SortFlags sort)
QStringList entryList(QStringList nameQDir::Filters, QDir::Filters filters, QDir::SortFlags sort)
QStringList entryList@2(QDir::Filters filters, QDir::SortFlags sort)
bool exists(QString name)
bool exists@2(void)
QString filePath(QString fileName)
QDir::Filters filter(void)
bool isAbsolute(void)
bool isReadable(void)
bool isRelative(void)
bool isRoot(void)
bool makeAbsolute(void)
bool mkdir(QString dirName)
bool mkpath(QString dirPath)
QStringList nameFilters(void)
QString path(void)
void refresh(void)
QString relativeFilePath(QString fileName)
bool remove(QString fileName)
bool removeRecursively(void)
bool rename(QString oldName, QString newName)
bool rmdir(QString dirName)
bool rmpath(QString dirPath)
void setFilter(QDir::Filters filters)
void setNameFilters(QStringList nameQDir::Filters)
void setPath(QString path)
void setSorting(QDir::SortFlags sort)
QDir::SortFlags sorting(void)
void swap(QDir other)
void addSearchPath(QString prefix, QString path)
QString cleanPath(QString path)
QDir current(void)
QString currentPath(void)
QFileInfoList drives(void)
QString fromNativeSeparators(QString pathName)
QDir home(void)
QString homePath(void)
bool isAbsolutePath(QString path)
bool isRelativePath(QString path)
bool match(QString filter, QString fileName)
bool match@2(QStringList filters, QString fileName)
QDir root(void)
QString rootPath(void)
QStringList searchPaths(QString prefix)
QChar separator(void)
bool setCurrent(QString path)
void setSearchPaths(QString prefix, QStringList searchPaths)
QDir temp(void)
QString tempPath(void)
QString toNativeSeparators(QString pathName)

<class>
name: QFileSystemModel
para: void
</class>

QIcon fileIcon(QModelIndex)
QFileInfo fileInfo(QModelIndex)
QString fileName(QModelIndex)
QString filePath(QModelIndex)
int filter(void)
QFileIconProvider *iconProvider(void)
QModelIndex index(QString, int column)
bool isDir(QModelIndex)
bool isReadOnly(void)
QDateTime lastModified(QModelIndex)
QModelIndex mkdir(QModelIndex,QString)
QVariant myComputer(int role)
bool nameFilterDisables(void)
QStringList nameFilters(void)
int permissions(QModelIndex)
bool remove(QModelIndex)
bool resolveSymlinks(void)
bool rmdir(QModelIndex)
QDir rootDirectory(void)
QString rootPath(void)
void setFilter(QDir::Filter filters)
void setIconProvider(QFileIconProvider *provider)
void setNameFilterDisables(bool enable)
void setNameFilters(QStringList)
void setReadOnly(bool enable)
void setResolveSymlinks(bool enable)
QModelIndex setRootPath(QString)
int size(QModelIndex)
QString type(QModelIndex)

bool canFetchMore(QModelIndex)
int columnCount(void)
QVariant data( QModelIndex index, int role)
bool dropMimeData( QMimeData *data, Qt::DropAction action, int row, int column, QModelIndex parent)
void fetchMore( QModelIndex parent)
int flags( QModelIndex index)
bool hasChildren( QModelIndex parent )
QVariant headerData(int section, Qt::Orientation orientation, int role )
QMimeData * mimeData( QModelIndexList indexes)
QStringList mimeTypes(void)
QModelIndex parent( QModelIndex index)
int rowCount( QModelIndex parent)
bool setData( QModelIndex idx,  QVariant value, int role)
void sort(int column, Qt::SortOrder order )
int supportedDropActions(void)


<class>
name: QTreeWidget
para: QWidget *
parent: QTreeView
codename: GTreeWidget
passvmpointer
</class>

void addTopLevelItem(QTreeWidgetItem *item)
void closePersistentEditor(QTreeWidgetItem *item, int column)
int columnCount(void)
int currentColumn(void)
QTreeWidgetItem *currentItem(void)
void editItem(QTreeWidgetItem *item, int column)
QTreeWidgetItem *headerItem(void)
int indexOfTopLevelItem(QTreeWidgetItem *item)
void insertTopLevelItem(int index, QTreeWidgetItem *item)
QTreeWidgetItem *invisibleRootItem(void)
bool isFirstItemColumnSpanned( QTreeWidgetItem *item)
QTreeWidgetItem *itemAbove(QTreeWidgetItem *item)
QTreeWidgetItem *itemAt(int x, int y)
QTreeWidgetItem *itemBelow(QTreeWidgetItem *item)
QWidget *itemWidget(QTreeWidgetItem *item, int column)
void openPersistentEditor(QTreeWidgetItem *item, int column)
void removeItemWidget(QTreeWidgetItem *item, int column)
void setColumnCount(int columns)
void setCurrentItem(QTreeWidgetItem * item, QItemSelectionModel::SelectionFlag column)
void setFirstItemColumnSpanned(QTreeWidgetItem *item, bool span)
void setHeaderItem(QTreeWidgetItem *item)
void setHeaderLabel(QString)
void setHeaderLabels(QStringList)
void setItemWidget(QTreeWidgetItem *item, int column, QWidget * widget)
int sortColumn(void) 
void sortItems(int column, Qt::SortOrder order)
QTreeWidgetItem *takeTopLevelItem(int index)
QTreeWidgetItem *topLevelItem(int index)
int topLevelItemCount(void)
QRect visualItemRect(QTreeWidgetItem *item)
void setSelectionModel(QItemSelectionModel *selectionModel)
void clear(void)
void collapseItem(QTreeWidgetItem *item)
void expandItem(QTreeWidgetItem *item)
void scrollToItem(QTreeWidgetItem *item, QAbstractItemView::ScrollHint hint)

void setcollapsedEvent(const char *)
void setexpandedEvent(const char *)
void setactivatedEvent(const char *)
void setclickedEvent(const char *)
void setdoubleClickedEvent(const char *)
void setenteredEvent(const char *)
void setpressedEvent(const char *)
void setviewportEnteredEvent(const char *)
void setcurrentItemChangedEvent(const char *)
void setitemActivatedEvent(const char *)
void setitemChangedEvent(const char *)
void setitemClickedEvent(const char *)
void setitemCollapsedEvent(const char *)
void setitemDoubleClickedEvent(const char *)
void setitemEnteredEvent(const char *)
void setitemExpandedEvent(const char *)
void setitemPressedEvent(const char *)
void setitemSelectionChangedEvent(const char *)

const char *getcollapsedEvent(void)
const char *getexpandedEvent(void)
const char *getactivatedEvent(void)
const char *getclickedEvent(void)
const char *getdoubleClickedEvent(void)
const char *getenteredEvent(void)
const char *getpressedEvent(void)
const char *getviewportEnteredEvent(void)
const char *getcurrentItemChangedEvent(void)
const char *getitemActivatedEvent(void)
const char *getitemChangedEvent(void)
const char *getitemClickedEvent(void)
const char *getitemCollapsedEvent(void)
const char *getitemDoubleClickedEvent(void)
const char *getitemEnteredEvent(void)
const char *getitemExpandedEvent(void)
const char *getitemPressedEvent(void)
const char *getitemSelectionChangedEvent(void)



<class>
name: QTreeWidgetItem
para: void
</class>

void addChild(QTreeWidgetItem *child)
QBrush background(int column)
int checkState(int column)
QTreeWidgetItem *child(int index)
int childCount(void)
int childIndicatorPolicy(void)
QTreeWidgetItem *clone(void)
int columnCount(void)
QVariant data(int column, int role)
int flags(void)
QFont font(int column)
QBrush foreground(int column)
QIcon icon(int column)
int indexOfChild(QTreeWidgetItem *child)
void insertChild(int index, QTreeWidgetItem *child)
bool isDisabled(void)
bool isExpanded(void)
bool isFirstColumnSpanned(void)
bool isHidden(void)
bool isSelected(void)
QTreeWidgetItem *parent(void)
void read(QDataStream)
void removeChild(QTreeWidgetItem *child)
void setBackground(int column,QBrush)
void setCheckState(int column, Qt::CheckState state)
void setChildIndicatorPolicy(QTreeWidgetItem::ChildIndicatorPolicy policy)
void setData(int column, int role,QVariant)
void setDisabled(bool disabled)
void setExpanded(bool expand)
void setFirstColumnSpanned(bool span)
void setFlags(Qt::ItemFlag flags)
void setFont(int column, QFont)
void setForeground(int column, QBrush)
void setHidden(bool hide)
void setIcon(int column, QIcon)
void setSelected(bool select)
void setSizeHint(int column, QSize)
void setStatusTip(int column, QString)
void setText(int column, QString)
void setTextAlignment(int column, int alignment)
void setToolTip(int column, QString)
void setWhatsThis(int column, QString)
QSize sizeHint(int column)
void sortChildren(int column, Qt::SortOrder order)
QString statusTip(int column)
QTreeWidgetItem *takeChild(int index)
QString text(int column)
int textAlignment(int column)
QString toolTip(int column)
QTreeWidget *treeWidget(void) 
int type(void)
QString whatsThis(int column)
void write(QDataStream) 

<class>
name: QComboBox
para: QWidget *
parent: QWidget
codename: GComboBox
passvmpointer
</class>
<register>
void addItem(QString,int)
</register>
<code>
RING_FUNC(ring_QComboBox_addItem)
{
	QComboBox *pObject ;
	if ( RING_API_PARACOUNT != 3 ) {
		RING_API_ERROR(RING_API_MISS3PARA);
		return ;
	}
	RING_API_IGNORECPOINTERTYPE ;
	if ( ! RING_API_ISPOINTER(1) ) {
		RING_API_ERROR(RING_API_BADPARATYPE);
		return ;
	}
	pObject = (QComboBox *) RING_API_GETCPOINTER(1,"QComboBox");
	if ( ! RING_API_ISSTRING(2) ) {
		RING_API_ERROR(RING_API_BADPARATYPE);
		return ;
	}
	pObject->addItem(RING_API_GETSTRING(2),QVariant(RING_API_GETNUMBER(3)));
}
</code>

QCompleter *completer(void)
int count(void)
int currentIndex(void)
QString currentText(void)
bool duplicatesEnabled(void)
int findData(QVariant, int role, Qt::MatchFlag flags)
int findText(QString, Qt::MatchFlag flags)
bool hasFrame(void)
void hidePopup(void)
QSize iconSize(void)
void insertItem(int index, QString, QVariant)
<comment>
InsertPolicy insertPolicy(void)
</comment>
void insertSeparator(int index)
bool isEditable(void)
QVariant itemData(int index, int role)
QAbstractItemDelegate *itemDelegate(void)
QIcon itemIcon(int index)
QString itemText(int index)
QLineEdit *lineEdit(void)
int maxCount(void)
int maxVisibleItems(void)
int minimumContentsLength(void)
QAbstractItemModel *model(void)
int modelColumn(void)
void removeItem(int index)
QModelIndex rootModelIndex(void)
void setCompleter(QCompleter *completer)
void setDuplicatesEnabled(bool enable)
void setEditable(bool editable)
void setFrame(bool)
void setIconSize(QSize)
<comment>
void setInsertPolicy(InsertPolicy policy)
</comment>
void setItemData(int index, QVariant , int role)
void setItemDelegate(QAbstractItemDelegate *delegate)
void setItemIcon(int index, QIcon)
void setItemText(int index, QString)
void setLineEdit(QLineEdit *edit)
void setMaxCount(int max)
void setMaxVisibleItems(int maxItems)
void setMinimumContentsLength(int characters)
void setModel(QAbstractItemModel *model)
void setModelColumn(int visibleColumn)
void setRootModelIndex(QModelIndex)
<comment>
void setSizeAdjustPolicy(SizeAdjustPolicy policy)
</comment>
void setValidator(QValidator *validator)
void setView(QAbstractItemView *itemView)
void showPopup(void)
<comment>
SizeAdjustPolicy sizeAdjustPolicy(void)
</comment>
QValidator *validator(void)
QAbstractItemView *view(void)

void clear(void)
void clearEditText(void)
void setCurrentIndex(int index)
void setEditText(QString)

void setactivatedEvent(const char *)
void setcurrentIndexChangedEvent(const char *)
void seteditTextChangedEvent(const char *)
void sethighlightedEvent(const char *)

const char *getactivatedEvent(void)
const char *getcurrentIndexChangedEvent(void)
const char *geteditTextChangedEvent(void)
const char *gethighlightedEvent(void)

<class>
name: QMenuBar
para: QWidget *
parent: QWidget
</class>

QAction *actionAt(QPoint)
QRect actionGeometry(QAction *act)
QAction *activeAction(void)
QAction *addAction(QString)
<comment>
void addAction(QAction *action)
QAction *addMenu(QMenu *menu)
</comment>
QMenu *addMenu(QString)
QAction *addSeparator(void)
void clear(void)
QWidget *cornerWidget(Qt::Corner)
<comment>
QAction *defaultAction(void)
</comment>
QAction *insertMenu(QAction *before, QMenu *menu)
QAction *insertSeparator(QAction *before)
bool isDefaultUp(void)
bool isNativeMenuBar(void)
void setActiveAction(QAction *act)
void setCornerWidget(QWidget *widget, Qt::Corner)
<comment>
void setDefaultAction(QAction *act)
</comment>
void setDefaultUp(bool)
void setNativeMenuBar(bool nativeMenuBar)


<class>
name: QMenu
para: QWidget *
parent: QWidget
</class>

QAction *actionAt(QPoint)
QRect actionGeometry(QAction *act)
QAction *activeAction(void)
void addAction(QAction *)
QMenu *addMenu(QString)
QAction *addSeparator(void)
void clear(void)
QAction *defaultAction(void)
QAction *exec(const QPoint &)
QAction *exec@2(void)
QAction *exec@3(const QPoint &,QAction *)
void hideTearOffMenu(void)
QIcon icon(void)
QAction *insertMenu(QAction *before, QMenu *menu)
QAction *insertSeparator(QAction *before)
bool isEmpty(void)
bool isTearOffEnabled(void)
bool isTearOffMenuVisible(void)
QAction *menuAction(void)
void popup(QPoint, QAction *atAction)
bool separatorsCollapsible(void)
void setActiveAction(QAction *act)
void setDefaultAction(QAction *act)
void setIcon(QIcon)
void setSeparatorsCollapsible(bool collapse)
void setTearOffEnabled(bool)
void setTitle(QString)
QString title(void)

<class>
name: QToolBar
para: QWidget *
parent: QWidget
</class>

QAction *actionAt(int x, int y)
QAction *addAction(QString)
QAction *addSeparator(void)
QAction *addWidget(QWidget *widget)
int allowedAreas(void)
void clear(void)
QSize iconSize(void)
QAction *insertSeparator(QAction *before)
QAction *insertWidget(QAction *before, QWidget *widget)
bool isAreaAllowed(Qt::ToolBarArea area)
bool isFloatable(void)
bool isFloating(void)
bool isMovable(void)
int orientation(void)
void setAllowedAreas(Qt::ToolBarArea areas)
void setFloatable(bool floatable)
void setMovable(bool movable)
void setOrientation(Qt::Orientation orientation)
QAction *toggleViewAction(void)
int toolButtonStyle(void)
QWidget *widgetForAction(QAction *action)
void setIconSize(QSize)
void setToolButtonStyle(Qt::ToolButtonStyle toolButtonStyle)

<class>
name: QMainWindow
para: void
parent: QWidget
</class>

void addDockWidget(Qt::DockWidgetArea area, QDockWidget *dockwidget, Qt::Orientation orientation)
QToolBar *addToolBar(QString)
void addToolBar@2(Qt::ToolBarArea area, QToolBar *toolbar)
void addToolBarBreak(Qt::ToolBarArea)
QWidget *centralWidget(void)
int corner(Qt::Corner corner)
QMenu *createPopupMenu(void)
int dockOptions(void)
int dockWidgetArea(QDockWidget *dockwidget)
bool documentMode(void)
QSize iconSize(void)
void insertToolBar(QToolBar *before, QToolBar *toolbar)
void insertToolBarBreak(QToolBar *before)
bool isAnimated(void)
bool isDockNestingEnabled(void)
QMenuBar *menuBar(void)
QWidget *menuWidget(void)
void removeDockWidget(QDockWidget *dockwidget)
void removeToolBar(QToolBar *toolbar)
void removeToolBarBreak(QToolBar *before)
bool restoreDockWidget(QDockWidget *dockwidget)
bool restoreState(QByteArray state, int version)
QByteArray saveState(int version)
void setCentralWidget(QWidget *widget)
void setCorner(Qt::Corner corner, Qt::DockWidgetArea area)
void setDockOptions(QMainWindow::DockOption options)
void setDocumentMode(bool enabled)
void setIconSize(QSize)
void setMenuBar(QMenuBar *menuBar)
void setMenuWidget(QWidget *menuBar)
void setStatusBar(QStatusBar *statusbar)
void setTabPosition(Qt::DockWidgetArea areas, QTabWidget::TabPosition tabPosition)
void setTabShape(QTabWidget::TabShape tabShape)
void setToolButtonStyle(Qt::ToolButtonStyle toolButtonStyle)
void setUnifiedTitleAndToolBarOnMac(bool set)
void splitDockWidget(QDockWidget *first, QDockWidget *second, Qt::Orientation orientation)
QStatusBar *statusBar(void)
int tabPosition(Qt::DockWidgetArea area) 
int tabShape(void)
void tabifyDockWidget(QDockWidget *first, QDockWidget *second)
int toolBarArea(QToolBar *toolbar)
bool toolBarBreak(QToolBar *toolbar)
int toolButtonStyle(void)
bool unifiedTitleAndToolBarOnMac(void)

<class>
name: QStatusBar
para: QWidget *
parent: QWidget
</class>

void addPermanentWidget(QWidget * widget, int stretch)
void addWidget(QWidget * widget, int stretch)
QString currentMessage(void) 
int insertPermanentWidget(int index, QWidget * widget, int stretch)
int insertWidget(int index, QWidget * widget, int stretch)
bool isSizeGripEnabled(void)
void removeWidget(QWidget *widget)
void setSizeGripEnabled(bool)
void clearMessage(void)
void showMessage(QString , int timeout)

<class>
name: QDockWidget
para: QWidget *parent,Qt::WindowType flag
parent: QWidget
codename: GDockWidget
passvmpointer
</class>

int allowedAreas(void)
int features(void)
bool isAreaAllowed(Qt::DockWidgetArea area)
bool isFloating(void)
void setAllowedAreas(Qt::DockWidgetArea areas)
void setFeatures(QDockWidget::DockWidgetFeature features)
void setFloating(bool floating)
void setTitleBarWidget(QWidget *widget)
void setWidget(QWidget *widget)
QWidget *titleBarWidget(void)
QAction *toggleViewAction(void)
QWidget *widget(void)
void allowedAreasChanged(Qt::DockWidgetArea allowedAreas)
void dockLocationChanged(Qt::DockWidgetArea area)
void featuresChanged(QDockWidget::DockWidgetFeature features)
void topLevelChanged(bool topLevel)
void visibilityChanged(bool visible)

void setallowedAreasChangedEvent(const char *)
void setdockLocationChangedEvent(const char *)
void setfeaturesChangedEvent(const char *)
void settopLevelChangedEvent(const char *)
void setvisibilityChangedEvent(const char *)

const char *getallowedAreasChangedEvent(void)
const char *getdockLocationChangedEvent(void)
const char *getfeaturesChangedEvent(void)
const char *gettopLevelChangedEvent(void)
const char *getvisibilityChangedEvent(void)

<class>
name: QTabWidget
para: QWidget *parent
parent: QWidget
codename: GTabWidget
passvmpointer
</class>

int addTab(QWidget *page, QString)
void clear(void)
QWidget *cornerWidget(Qt::Corner corner)
int count(void)
int currentIndex(void)
QWidget *currentWidget(void)
bool documentMode(void)
int elideMode(void)
QSize iconSize(void)
int indexOf(QWidget *w)
int insertTab(int index, QWidget *page,QString)
bool isMovable(void)
bool isTabEnabled(int index)
void removeTab(int index)
void setCornerWidget(QWidget *widget, Qt::Corner corner)
void setDocumentMode(bool set)
void setElideMode(Qt::TextElideMode)
void setIconSize(QSize)
void setMovable(bool movable)
void setTabEnabled(int index, bool enable)
void setTabIcon(int index, QIcon)
void setTabText(int index,QString)
void setTabToolTip(int index, QString)
void setTabWhatsThis(int index, QString)
void setTabsClosable(bool closeable)
void setUsesScrollButtons(bool useButtons)
QIcon tabIcon(int index)
QString tabText(int index)
QString tabToolTip(int index)
QString tabWhatsThis(int index)
bool tabsClosable(void)
bool usesScrollButtons(void)
QWidget *widget(int index)
int heightForWidth(int width)
QSize minimumSizeHint(void)
QSize sizeHint(void)
void setCurrentIndex(int index)
void setCurrentWidget(QWidget *widget)

void setcurrentChangedEvent(const char *)
void settabCloseRequestedEvent(const char *)

const char *getcurrentChangedEvent(void)
const char *gettabCloseRequestedEvent(void)

<class>
name: QTableWidgetItem
para: QString
</class>

QBrush background(void)
int checkState(void)
QTableWidgetItem *clone(void)
int column(void)
QVariant data(int role)
int flags(void)
QFont font(void)
QBrush foreground(void)
QIcon icon(void)
bool isSelected(void)
void read(QDataStream)
int row(void)
void setBackground(QBrush)
void setCheckState(Qt::CheckState state)
void setData(int role, QVariant)
void setFlags(Qt::ItemFlag flags)
void setFont(QFont)
void setForeground(QBrush)
void setIcon(QIcon)
void setSelected(bool select)
void setSizeHint(QSize)
void setStatusTip(QString)
void setText(QString)
void setTextAlignment(int alignment)
void setToolTip(QString)
void setWhatsThis(QString)
QSize sizeHint(void)
QString statusTip(void)
QTableWidget *tableWidget(void)
QString text(void)
int textAlignment(void)
QString toolTip(void)
int type(void)
QString whatsThis(void)
void write(QDataStream)

<class>
name: QFrame
para: QWidget *parent, Qt::WindowType flag
parent: QWidget
</class>
QRect frameRect(void)
int frameShadow(void)
int frameShape(void)
int frameStyle(void)
int frameWidth(void)
int lineWidth(void)
int midLineWidth(void)
void setFrameRect(QRect)
void setFrameShadow(QFrame::Shadow)
void setFrameShape(QFrame::Shape)
void setFrameStyle(int style)
void setLineWidth(int)
void setMidLineWidth(int)
QSize sizeHint(void)

<class>
name: QFrame2
para: void
parent: QFrame
codename: QFrame
</class>

<class>
name: QFrame3
para: QWidget *parent
parent: QFrame
codename: QFrame
</class>


<class>
name: QAbstractScrollArea
para: QWidget *parent
parent: QFrame
</class>
void addScrollBarWidget(QWidget *widget, Qt::AlignmentFlag alignment)
QWidget *cornerWidget(void)
QScrollBar *horizontalScrollBar(void)
int horizontalScrollBarPolicy(void)
QSize maximumViewportSize(void)
QWidgetList scrollBarWidgets(Qt::AlignmentFlag)
void setCornerWidget(QWidget *widget)
void setHorizontalScrollBar(QScrollBar *scrollBar)
void setHorizontalScrollBarPolicy(Qt::ScrollBarPolicy)
void setVerticalScrollBar(QScrollBar *scrollBar)
void setVerticalScrollBarPolicy(Qt::ScrollBarPolicy)
void setViewport(QWidget *widget)
QScrollBar *verticalScrollBar(void)
int verticalScrollBarPolicy(void)
QWidget *viewport(void)

<class>
name: QAbstractItemView
para: QWidget *parent
parent: QAbstractScrollArea
abstract
</class>

bool alternatingRowColors(void)
int autoScrollMargin(void)
void closePersistentEditor(QModelIndex)
QModelIndex currentIndex(void)
int defaultDropAction(void)
int dragDropMode(void)
bool dragDropOverwriteMode(void)
bool dragEnabled(void)
int editTriggers(void)
bool hasAutoScroll(void)
int horizontalScrollMode(void)
QSize iconSize(void)
QModelIndex indexAt(QPoint)
QWidget *indexWidget(QModelIndex)
QAbstractItemDelegate *itemDelegate(QModelIndex)
QAbstractItemDelegate *itemDelegateForColumn(int column)
QAbstractItemDelegate *itemDelegateForRow(int row)
void keyboardSearch(QString)
QAbstractItemModel *model(void)
void openPersistentEditor(QModelIndex)
QModelIndex rootIndex(void)
void scrollTo(QModelIndex,QAbstractItemView::ScrollHint)
int selectionBehavior(void)
int selectionMode(void)
QItemSelectionModel *selectionModel(void)
void setAlternatingRowColors(bool enable)
void setAutoScroll(bool enable)
void setAutoScrollMargin(int margin)
void setDefaultDropAction(Qt::DropAction dropAction)
void setDragDropMode(QAbstractItemView::DragDropMode behavior)
void setDragDropOverwriteMode(bool overwrite)
void setDragEnabled(bool enable)
void setDropIndicatorShown(bool enable)
void setEditTriggers(QAbstractItemView::EditTrigger triggers)
void setHorizontalScrollMode(QAbstractItemView::ScrollMode mode)
void setIconSize(QSize)
void setIndexWidget(QModelIndex, QWidget *widget)
void setItemDelegate(QAbstractItemDelegate *delegate)
void setItemDelegateForColumn(int column, QAbstractItemDelegate *delegate)
void setItemDelegateForRow(int row, QAbstractItemDelegate *delegate)
void setModel(QAbstractItemModel *model)
void setSelectionBehavior(QAbstractItemView::SelectionBehavior behavior)
void setSelectionMode(QAbstractItemView::SelectionMode mode)
void setSelectionModel(QItemSelectionModel *selectionModel)
void setTabKeyNavigation(bool enable)
void setTextElideMode(Qt::TextElideMode mode)
void setVerticalScrollMode(QAbstractItemView::ScrollMode mode)
bool showDropIndicator(void)
int sizeHintForColumn(int column)
QSize sizeHintForIndex(QModelIndex)
int sizeHintForRow(int row)
bool tabKeyNavigation(void)
int textElideMode(void)
int verticalScrollMode(void)
QRect visualRect(QModelIndex)

void clearSelection(void)
void edit(QModelIndex)
void scrollToBottom(void)
void scrollToTop(void)
void setCurrentIndex(QModelIndex)
void update(QModelIndex)

<class>
name: QTableView
para: QWidget *parent
parent: QAbstractItemView
</class>

void clearSpans(void)
int columnAt(int x)
int columnSpan(int row, int column)
int columnViewportPosition(int column)
int columnWidth(int column)
Qt::PenStyle gridStyle(void)
QHeaderView *horizontalHeader(void)
bool isColumnHidden(int column)
bool isCornerButtonEnabled(void)
bool isRowHidden(int row)
bool isSortingEnabled(void)
int rowAt(int y)
int rowHeight(int row)
int rowSpan(int row, int column)
int rowViewportPosition(int row)
void setColumnHidden(int column, bool hide)
void setColumnWidth(int column, int width)
void setCornerButtonEnabled(bool enable)
void setGridStyle(Qt::PenStyle style)
void setHorizontalHeader(QHeaderView *header)
void setRowHeight(int row, int height)
void setRowHidden(int row, bool hide)
void setSortingEnabled(bool enable)
void setSpan(int row, int column, int rowSpanCount, int columnSpanCount)
void setVerticalHeader(QHeaderView *header)
void setWordWrap(bool on)
bool showGrid(void)
void sortByColumn(int column, Qt::SortOrder order)
QHeaderView *verticalHeader(void)
bool wordWrap(void)
void hideColumn(int column)
void hideRow(int row)
void resizeColumnToContents(int column)
void resizeColumnsToContents(void)
void resizeRowToContents(int row)
void resizeRowsToContents(void)
void selectColumn(int column)
void selectRow(int row)
void setShowGrid(bool show)
void showColumn(int column)
void showRow(int row)

<class>
name: QTableWidget
para: QWidget *parent
parent: QTableView
codename: GTableWidget
passvmpointer
</class>

QWidget *cellWidget(int row, int column)
void closePersistentEditor(QTableWidgetItem *item)
int column(QTableWidgetItem *item)
int columnCount(void)
int currentColumn(void)
QTableWidgetItem *currentItem(void)
int currentRow(void)
void editItem(QTableWidgetItem *item)
QTableWidgetItem *horizontalHeaderItem(int column)
QTableWidgetItem *item(int row, int column)
QTableWidgetItem *itemAt(int ax, int ay)
QTableWidgetItem *itemPrototype(void)
void openPersistentEditor(QTableWidgetItem *item)
void removeCellWidget(int row, int column)
int row(const QTableWidgetItem *item)
int rowCount(void)
QList<QTableWidgetItem *> selectedItems(void)
QList<QTableWidgetSelectionRange> selectedRanges(void)
void setCellWidget(int row, int column, QWidget *widget)
void setColumnCount(int columns)
void setCurrentCell(int row, int column)
void setCurrentItem(QTableWidgetItem * item)
void setHorizontalHeaderItem(int column, QTableWidgetItem *item)
void setHorizontalHeaderLabels(QStringList)
void setItem(int row, int column, QTableWidgetItem *item)
void setItemPrototype(QTableWidgetItem *item)
void setRowCount(int rows)
void setVerticalHeaderItem(int row, QTableWidgetItem *item)
void sortItems(int column, Qt::SortOrder order)
QTableWidgetItem *takeHorizontalHeaderItem(int column)
QTableWidgetItem *takeItem(int row, int column)
QTableWidgetItem *takeVerticalHeaderItem(int row)
QTableWidgetItem *verticalHeaderItem(int row)
int visualColumn(int logicalColumn)
QRect visualItemRect(QTableWidgetItem *)
int visualRow(int logicalRow)
void clear(void)
void clearContents(void)
void insertColumn(int column)
void insertRow(int row)
void removeColumn(int column)
void removeRow(int row)
void scrollToItem(QTableWidgetItem *item, QAbstractItemView::ScrollHint hint)

void setcellActivatedEvent(const char *)
void setcellChangedEvent(const char *)
void setcellClickedEvent(const char *)
void setcellDoubleClickedEvent(const char *)
void setcellEnteredEvent(const char *)
void setcellPressedEvent(const char *)
void setcurrentCellChangedEvent(const char *)
void setcurrentItemChangedEvent(const char *)
void setitemActivatedEvent(const char *)
void setitemChangedEvent(const char *)
void setitemClickedEvent(const char *)
void setitemDoubleClickedEvent(const char *)
void setitemEnteredEvent(const char *)
void setitemPressedEvent(const char *)
void setitemSelectionChangedEvent(const char *)

const char *getcellActivatedEvent(void)
const char *getcellChangedEvent(void)
const char *getcellClickedEvent(void)
const char *getcellDoubleClickedEvent(void)
const char *getcellEnteredEvent(void)
const char *getcellPressedEvent(void)
const char *getcurrentCellChangedEvent(void)
const char *getcurrentItemChangedEvent(void)
const char *getitemActivatedEvent(void)
const char *getitemChangedEvent(void)
const char *getitemClickedEvent(void)
const char *getitemDoubleClickedEvent(void)
const char *getitemEnteredEvent(void)
const char *getitemPressedEvent(void)
const char *getitemSelectionChangedEvent(void)


<class>
name: QProgressBar
para: QWidget *parent
parent: QWidget
codename: GProgressBar
passvmpointer
</class>

int alignment(void)
QString format(void)
bool invertedAppearance(void)
bool isTextVisible(void)
int maximum(void)
int minimum(void)
int orientation(void)
void resetFormat(void)
void setAlignment(Qt::AlignmentFlag alignment)
void setFormat(QString)
void setInvertedAppearance(bool invert)
void setTextDirection(QProgressBar::Direction textDirection)
void setTextVisible(bool visible)
QString text(void)
int textDirection(void)
int value(void)
void reset(void)
void setMaximum(int maximum)
void setMinimum(int minimum)
void setOrientation(Qt::Orientation)
void setRange(int minimum, int maximum)
void setValue(int value)

void setvalueChangedEvent(const char *)

const char *getvalueChangedEvent(void)

<class>
name: QSpinBox
para: QWidget *parent
parent: QWidget
codename: GSpinBox
passvmpointer
</class>

QString cleanText(void)
int displayIntegerBase(void)
int maximum(void)
int minimum(void)
QString prefix(void)
void setDisplayIntegerBase(int base)
void setMaximum(int max)
void setMinimum(int min)
void setPrefix(QString)
void setRange(int minimum, int maximum)
void setSingleStep(int val)
void setSuffix(QString)
int singleStep(void)
QString suffix(void)
int value(void)
void setValue(int val)

void setvalueChangedEvent(const char *)

const char *getvalueChangedEvent(void)

<class>
name: QAbstractSlider
para: QWidget *parent
parent: QWidget
</class>
bool hasTracking(void)
bool invertedAppearance(void)
bool invertedControls(void)
bool isSliderDown(void)
int maximum(void)
int minimum(void)
int orientation(void)
int pageStep(void)
void setInvertedAppearance(bool)
void setInvertedControls(bool)
void setMaximum(int)
void setMinimum(int)
void setPageStep(int)
void setSingleStep(int)
void setSliderDown(bool)
void setSliderPosition(int)
void setTracking(bool enable)
int singleStep(void)
int sliderPosition(void)
void triggerAction(QAbstractSlider::SliderAction action)
int value(void)
void setOrientation(Qt::Orientation)
void setRange(int min, int max)
void setValue(int)

<class>
name: QSlider
para: QWidget *parent
parent: QAbstractSlider
codename: GSlider
passvmpointer
</class>

void setTickInterval(int ti)
void setTickPosition(QSlider::TickPosition position)
int tickInterval(void)
int tickPosition(void)
QSize minimumSizeHint(void)
QSize sizeHint(void)

void setactionTriggeredEvent(const char *)
void setrangeChangedEvent(const char *)
void setsliderMovedEvent(const char *)
void setsliderPressedEvent(const char *)
void setsliderReleasedEvent(const char *)
void setvalueChangedEvent(const char *)

const char *getactionTriggeredEvent(void)
const char *getrangeChangedEvent(void)
const char *getsliderMovedEvent(void)
const char *getsliderPressedEvent(void)
const char *getsliderReleasedEvent(void)
const char *getvalueChangedEvent(void)


<class>
name: QDateEdit
para: QWidget *parent
parent: QDateTimeEdit
</class>

<class>
name: QDateTimeEdit
para: QWidget *parent
parent:  QAbstractSpinBox
</class>

bool calendarPopup(void)
QCalendarWidget *calendarWidget(void)
void clearMaximumDate(void)
void clearMaximumDateTime(void)
void clearMaximumTime(void)
void clearMinimumDate(void)
void clearMinimumDateTime(void)
void clearMinimumTime(void)
int currentSection(void)
int currentSectionIndex(void)
QDate date(void)
QDateTime dateTime(void)
QString displayFormat(void)
int displayedSections(void)
QDate maximumDate(void)
QDateTime maximumDateTime(void)
QTime maximumTime(void)
QDate minimumDate(void)
QDateTime minimumDateTime(void)
QTime minimumTime(void)
int sectionAt(int index)
int sectionCount(void)
QString sectionText(QDateTimeEdit::Section section)
void setCalendarPopup(bool enable)
void setCalendarWidget(QCalendarWidget *calendarWidget)
void setCurrentSection(QDateTimeEdit::Section section)
void setCurrentSectionIndex(int index)
void setDateRange(QDate,QDate)
void setDateTimeRange(QDateTime,QDateTime)
void setDisplayFormat(QString)
void setMaximumDate(QDate)
void setMaximumDateTime(QDateTime)
void setMaximumTime(QTime)
void setMinimumDate(QDate)
void setMinimumDateTime(QDateTime)
void setMinimumTime(QTime)
void setSelectedSection(QDateTimeEdit::Section section)
void setTimeRange(QTime,QTime)
void setTimeSpec(Qt::TimeSpec spec)
QTime time(void)
Qt::TimeSpec timeSpec(void)
void setDate(QDate)
void setDateTime(QDateTime)
void setTime(QTime)

<class>
name: QAbstractSpinBox
para: QWidget *parent
parent: QWidget
</class>

int alignment(void)
int buttonSymbols(void)
int correctionMode(void)
bool hasAcceptableInput(void)
bool hasFrame(void)
void interpretText(void)
bool isAccelerated(void)
<comment>
bool isGroupSeparatorShown(void)
</comment>
bool isReadOnly(void)
bool keyboardTracking(void)
void setAccelerated(bool on)
void setAlignment(Qt::AlignmentFlag flag)
void setButtonSymbols(QAbstractSpinBox::ButtonSymbols bs)
void setCorrectionMode(QAbstractSpinBox::CorrectionMode cm)
void setFrame(bool)
<comment>
void setGroupSeparatorShown(bool shown)
</comment>
void setKeyboardTracking(bool kt)
void setReadOnly(bool r)
void setSpecialValueText(QString)
void setWrapping(bool w)
QString specialValueText(void)
void stepBy(int steps)
QString text(void)
bool wrapping(void)
void clear(void)
void selectAll(void)
void stepDown(void)
void stepUp(void)

<class>
name: QDial
para: QWidget *parent
parent: QAbstractSlider
codename: GDial
passvmpointer
</class>

int notchSize(void)
qreal notchTarget(void)
bool notchesVisible(void)
void setNotchTarget(double target)
bool wrapping(void)
QSize minimumSizeHint(void)
QSize sizeHint(void)
void setNotchesVisible(bool visible)
void setWrapping(bool on)

void setactionTriggeredEvent(const char *)
void setrangeChangedEvent(const char *)
void setsliderMovedEvent(const char *)
void setsliderPressedEvent(const char *)
void setsliderReleasedEvent(const char *)
void setvalueChangedEvent(const char *)

const char *getactionTriggeredEvent(void)
const char *getrangeChangedEvent(void)
const char *getsliderMovedEvent(void)
const char *getsliderPressedEvent(void)
const char *getsliderReleasedEvent(void)
const char *getvalueChangedEvent(void)


<filter> (sysget("RINGQT_ANDROID") = "" and sysget("RINGQT_NOWEBKIT") = "")
<class>
name: QWebView
para: QWidget *parent
parent: QWidget
codename: GWebView
passvmpointer
</class>

<comment>
bool findText(QString, QWebPage::FindFlag options)
</comment>
bool hasSelection(void)
QWebHistory *history(void)
<comment>
QIcon icon(void)
bool isModified(void)
</comment>
void load(QUrl) # In RingQt use : void loadpage(QUrl) 
<comment>
void load(QNetworkRequest , int operation, QByteArray))
</comment>
QWebPage *page(void)
QAction *pageAction(QWebPage::WebAction action)
<comment>
int renderHints(void)
QString selectedHtml(void)
</comment>
QString selectedText(void)
void setContent(QByteArray,QString,QUrl)
void setHtml(QString,QUrl)
void setPage(QWebPage *page)
<comment>
void setRenderHint(QPainter::RenderHint hint, bool enabled)
void setRenderHints(QPainter::RenderHint hints)
void setTextSizeMultiplier(qreal factor)
</comment>
void setUrl(QUrl)
void setZoomFactor(qreal factor)
QWebSettings *settings(void)
<comment>
qreal textSizeMultiplier(void)
</comment>
QString title(void)
void triggerPageAction(QWebPage::WebAction action, bool checked)
QUrl url(void)
qreal zoomFactor(void)
void back(void)
void forward(void)
void print(QPrinter *printer)
void reload(void)
void stop(void)

<comment>
void seticonChangedEvent(const char *)
void setlinkClickedEvent(const char *)
</comment>
void setloadFinishedEvent(const char *)
void setloadProgressEvent(const char *)
void setloadStartedEvent(const char *)
void setselectionChangedEvent(const char *)
<comment>
void setstatusBarMessageEvent(const char *)
</comment>
void settitleChangedEvent(const char *)
void seturlChangedEvent(const char *)

const char *getloadFinishedEvent(void)
const char *getloadProgressEvent(void)
const char *getloadStartedEvent(void)
const char *getselectionChangedEvent(void)
const char *gettitleChangedEvent(void)
const char *geturlChangedEvent(void)


</filter>

<class>
name: QUrl
para: QString
</class>

<comment>
QUrl adjusted(int options)
</comment>
QString authority(QUrl::ComponentFormattingOption options)
void clear(void)
QString errorString(void)
QString fileName(QUrl::ComponentFormattingOption options)
QString fragment(QUrl::ComponentFormattingOption options)
bool hasFragment(void)
bool hasQuery(void)
QString host(QUrl::ComponentFormattingOption options)
bool isEmpty(void)
bool isLocalFile(void)
bool isParentOf(QUrl)
bool isRelative(void)
bool isValid(void)
<comment>
bool matches(QUrl, int options)
</comment>
QString password(QUrl::ComponentFormattingOption options)
QString path(QUrl::ComponentFormattingOption options)
int port(int defaultPort)
QString query(QUrl::ComponentFormattingOption options)
QUrl resolved(QUrl)
QString scheme(void)
void setAuthority(QString, QUrl::ParsingMode mode)
void setFragment(QString, QUrl::ParsingMode mode)
void setHost(QString, QUrl::ParsingMode mode)
void setPassword(QString, QUrl::ParsingMode mode)
void setPath(QString, QUrl::ParsingMode mode)
void setPort(int port)
void setQuery(QString, QUrl::ParsingMode mode)
void setScheme(QString)
void setUrl(QString, QUrl::ParsingMode parsingMode)
void setUserInfo(QString, QUrl::ParsingMode mode)
void setUserName(QString, QUrl::ParsingMode mode)
void swap(QUrl)
<comment>
QString toDisplayString(int options)
QByteArray toEncoded(int options)
QString toString(int options)
QString url(int options)
</comment>
QString toLocalFile(void)
QString topLevelDomain(QUrl::ComponentFormattingOption options)
QString userInfo(QUrl::ComponentFormattingOption options)
QString userName(QUrl::ComponentFormattingOption options)
QUrl fromLocalFile(QString)

<class>
name: QCheckBox
para: QWidget *parent
parent: QAbstractButton
codename: GCheckBox
passvmpointer
</class>

int checkState(void)
bool isTristate(void)
void setCheckState(Qt::CheckState state)
void setTristate(bool y)
QSize minimumSizeHint(void)
QSize sizeHint(void)

void setstateChangedEvent(const char *)
void setclickedEvent(const char *)
void setpressedEvent(const char *)
void setreleasedEvent(const char *)
void settoggledEvent(const char *)

const char *getstateChangedEvent(void)
const char *getclickedEvent(void)
const char *getpressedEvent(void)
const char *getreleasedEvent(void)
const char *gettoggledEvent(void)


<class>
name: QAbstractButton
para: QWidget *parent
parent: QWidget
abstract
</class>

bool autoExclusive(void)
bool autoRepeat(void)
int autoRepeatDelay(void)
int autoRepeatInterval(void)
QButtonGroup *group(void)
QIcon icon(void)
QSize iconSize(void)
bool isCheckable(void)
bool isChecked(void)
bool isDown(void)
void setAutoExclusive(bool)
void setAutoRepeat(bool)
void setAutoRepeatDelay(int)
void setAutoRepeatInterval(int)
void setCheckable(bool)
void setDown(bool)
void setIcon(QIcon)
void setShortcut(QKeySequence)
void setText(QString)
QKeySequence shortcut(void)
QString text(void)
void animateClick(int msec)
void click(void)
void setChecked(bool)
void setIconSize(QSize)
void toggle(void)

<class>
name: QRadioButton
para: QWidget *parent
parent: QAbstractButton
codename: GRadioButton
passvmpointer
</class>

QSize minimumSizeHint(void)
QSize sizeHint(void)

void setclickedEvent(const char *)
void setpressedEvent(const char *)
void setreleasedEvent(const char *)
void settoggledEvent(const char *)

const char *getclickedEvent(void)
const char *getpressedEvent(void)
const char *getreleasedEvent(void)
const char *gettoggledEvent(void)


<class>
name: QButtonGroup
para: QObject *parent
codename: GButtonGroup
passvmpointer
</class>

void addButton(QAbstractButton *button, int id)
QAbstractButton *button(int id)
QAbstractButton *checkedButton(void)
int checkedId(void)
bool exclusive(void)
int id(QAbstractButton *button)
void removeButton(QAbstractButton *button)
void setExclusive(bool)
void setId(QAbstractButton *button, int id)

void setbuttonClickedEvent(const char *)
void setbuttonPressedEvent(const char *)
void setbuttonReleasedEvent(const char *)

const char *getbuttonClickedEvent(void)
const char *getbuttonPressedEvent(void)
const char *getbuttonReleasedEvent(void)


<class>
name: QMediaPlayer
para: void
</class>

int bufferStatus(void)
QMediaContent currentMedia(void)
QNetworkConfiguration currentNetworkConfiguration(void)
int duration(void)
int error(void)
QString errorString(void)
bool isAudioAvailable(void)
bool isMuted(void)
bool isSeekable(void)
bool isVideoAvailable(void)
QMediaContent media(void)
int mediaStatus(void)
QIODevice *mediaStream(void)
qreal playbackRate(void)
QMediaPlaylist *playlist(void)
int position(void)
void setVideoOutput(QVideoWidget *output)
<comment>
void setVideoOutput(QGraphicsVideoItem *output)
void setVideoOutput(QAbstractVideoSurface *surface)
</comment>
int state(void)
int volume(void)
void pause(void)
void play(void)
<comment>
void setMedia(QMediaContent, QIODevice *stream)
</comment>
void setMedia(QUrl)
void setMuted(bool muted)
<comment>
void setNetworkConfigurations(const QList<QNetworkConfiguration> & configurations)
</comment>
void setPlaybackRate(qreal rate)
void setPlaylist(QMediaPlaylist *playlist)
void setPosition(int position)
void setVolume(int volume)
void stop(void)

<class>
name: QMediaPlaylist
para: void
</class>

<comment>
bool addMedia(QMediaContent)
</comment>
bool addMedia(QUrl)
<comment>
bool addMedia(const QList<QMediaContent> & items)
</comment>
bool clear(void)
int currentIndex(void)
QMediaContent currentMedia(void)
int error(void)
QString errorString(void)
bool insertMedia(int pos, QMediaContent)
<comment>
bool insertMedia(int pos, const QList<QMediaContent> & items)
</comment>
bool isEmpty(void)
bool isReadOnly(void)
<comment>
void load(QNetworkRequest, const char * format)
void load(QIODevice *device, const char *format)
</comment>
void load(QUrl, const char *format) # In RingQt use : void loadfile(QUrl, const char *format)
QMediaContent media(int index)
int mediaCount(void)
int nextIndex(int steps)
int playbackMode(void)
int previousIndex(int steps)
<comment>
bool removeMedia(int pos)
</comment>
bool removeMedia(int start, int end)
bool save(QUrl, const char * format)
<comment>
bool save(QIODevice *device, const char *format)
</comment>
void setPlaybackMode(QMediaPlaylist::PlaybackMode mode)
void next(void) # In RingQt use : void movenext(void)
void previous(void)
void setCurrentIndex(int playlistPosition)
void shuffle(void)

<class>
name: QVideoWidget
para: QWidget *parent
parent: QWidget
codename: GVideoWidget
passvmpointer
</class>

int aspectRatioMode(void)
int brightness(void)
int contrast(void)
int hue(void)
bool isFullScreen(void)
int saturation(void)
void setAspectRatioMode(Qt::AspectRatioMode mode)
void setBrightness(int brightness)
void setContrast(int contrast)
void setFullScreen(bool fullScreen)
void setHue(int hue)
void setSaturation(int saturation)

void setbrightnessChangedEvent(const char *)
void setcontrastChangedEvent(const char *)
void setfullScreenChangedEvent(const char *)
void sethueChangedEvent(const char *)
void setsaturationChangedEvent(const char *)

const char *getbrightnessChangedEvent(void)
const char *getcontrastChangedEvent(void)
const char *getfullScreenChangedEvent(void)
const char *gethueChangedEvent(void)
const char *getsaturationChangedEvent(void)

<class>
name: QAction
para: QWidget *parent
codename: GAction
passvmpointer
</class>

QActionGroup *actionGroup(void)
void activate(QAction::ActionEvent event)
bool autoRepeat(void)
QVariant data(void)
QFont font(void)
QIcon icon(void)
QString iconText(void)
bool isCheckable(void)
bool isChecked(void)
bool isEnabled(void)
bool isIconVisibleInMenu(void)
bool isSeparator(void)
bool isVisible(void)
QMenu *menu(void)
int menuRole(void)
QWidget *parentWidget(void)
int priority(void)
void setActionGroup(QActionGroup *group)
void setAutoRepeat(bool)
void setCheckable(bool)
void setData(QVariant)
void setFont(QFont)
void setIcon(QIcon)
void setIconText(QString)
void setIconVisibleInMenu(bool visible)
void setMenu(QMenu *menu)
void setMenuRole(QAction::MenuRole menuRole)
void setPriority(QAction::Priority priority)
void setSeparator(bool b)
void setShortcut(QKeySequence)
void setShortcutContext(Qt::ShortcutContext context)
void setShortcuts(QKeySequence::StandardKey key)
void setStatusTip(QString)
void setText(QString)
void setToolTip(QString)
void setWhatsThis(QString)
QKeySequence shortcut(void)
int shortcutContext(void)
bool showStatusText(QWidget *widget)
QString statusTip(void)
QString text(void)
QString toolTip(void)
QString whatsThis(void)
void hover(void)
void setChecked(bool)
void setDisabled(bool)
void setEnabled(bool)
void setVisible(bool)
void toggle(void)
void trigger(void)

void setClickEvent(const char *)

const char *getClickEvent(void)

<class>
name: QEvent
para: QEvent::Type Type
</class>

void accept(void)
void ignore(void)
bool isAccepted(void) 
void setAccepted(bool accepted)
bool spontaneous(void)
int type(void) 

<class>
name: QMessageBox
para: QWidget *parent
parent: QDialog
</class>

void addButton(QAbstractButton *button, QMessageBox::ButtonRole role)
QAbstractButton *button(QMessageBox::StandardButton which)
int buttonRole(QAbstractButton *button)
QAbstractButton *clickedButton(void)
QPushButton *defaultButton(void)
QString detailedText(void)
QAbstractButton *escapeButton(void)
QPixmap iconPixmap(void)
QString informativeText(void)
void open(QObject *receiver, const char *member)
void removeButton(QAbstractButton *button)
void setDefaultButton(QPushButton *button)
void setDetailedText(QString)
void setEscapeButton(QAbstractButton *button)
void setIconPixmap(QPixmap)
void setInformativeText(QString)
void setStandardButtons(QMessageBox::StandardButton buttons)
void setText(QString)
void setTextFormat(Qt::TextFormat format)
void setWindowModality(Qt::WindowModality windowModality)
void setWindowTitle(QString)
int standardButton(QAbstractButton *button)
int standardButtons(void)
QString text(void)
int textFormat(void)
int exec(void)

void about(QWidget *parent, QString,QString)
void aboutQt(QWidget *parent, QString)
int critical(QWidget * parent, QString , QString, int buttons, int defaultButton)
int information(QWidget * parent, QString ,QString, int buttons,int defaultButton)
int question(QWidget * parent,QString,QString, int buttons ,int  defaultButton)
int warning(QWidget *parent, QString,QString, int buttons,int defaultButton)

<class>
name: QTimer
para: QObject *parent
codename: GTimer
passvmpointer
</class>

int interval(void) 
bool isActive(void) 
bool isSingleShot(void) 
void setInterval(int msec)
void setSingleShot(bool singleShot)
int timerId(void) 
void start(void)
void stop(void)

void settimeoutEvent(const char *)

const char *gettimeoutEvent(void)

<class>
name: QFileDialog
para: QWidget *parent 
parent: QWidget
</class>

int acceptMode(void)
QString defaultSuffix(void)
QDir directory(void)
QUrl directoryUrl(void)
int fileMode(void)
int filter(void)
QStringList history(void)
QFileIconProvider *iconProvider(void)
QAbstractItemDelegate *itemDelegate(void)
QString labelText(QFileDialog::DialogLabel label)
QStringList mimeTypeFilters(void)
QStringList nameFilters(void)
void open(QObject *receiver, const char *member)
int options(void)
QAbstractProxyModel *proxyModel(void)
bool restoreState(QByteArray)
QByteArray saveState(void)
void selectFile(QString)
void selectMimeTypeFilter(QString)
void selectNameFilter(QString)
void selectUrl(QUrl)
QStringList selectedFiles(void)
QString selectedNameFilter(void)
<comment>
QList<QUrl> selectedUrls(void)
</comment>
void setAcceptMode(QFileDialog::AcceptMode mode)
void setDefaultSuffix(QString)
void setDirectory(QString)
void setDirectoryUrl(QUrl)
void setFileMode(QFileDialog::FileMode mode)
void setFilter(QDir::Filter filters)
void setHistory(QStringList)
void setIconProvider(QFileIconProvider *provider)
void setItemDelegate(QAbstractItemDelegate *delegate)
void setLabelText(QFileDialog::DialogLabel label, QString)
void setMimeTypeFilters(QStringList)
void setNameFilter(QString)
void setNameFilters(QStringList)
void setOption(QFileDialog::Option option, bool)
void setOptions(QFileDialog::Option options)
void setProxyModel(QAbstractProxyModel *proxyModel)
<comment>
void setSidebarUrls(const QList<QUrl> & urls)
</comment>
void setViewMode(QFileDialog::ViewMode mode)
<comment>
QList<QUrl> sidebarUrls(void)
</comment>
bool testOption(QFileDialog::Option option)
int viewMode(void)
QString getExistingDirectory(QWidget *,QString,QString, QFileDialog::Option)
QUrl getExistingDirectoryUrl(QWidget *,QString,QUrl, QFileDialog::Option,QStringList)
QString getOpenFileName(QWidget *,QString,QString,QString)
<comment>
QStringList getOpenFileNames(QWidget *,QString,QString,QString, QString, QString)
</comment>
QUrl getOpenFileUrl(QWidget *,QString,QUrl,QString, QString *,QFileDialog::Option options,QStringList)
<comment>
QList<QUrl> getOpenFileUrls(QWidget * parent = 0, const QString & caption = QString(void), const QUrl & dir = QUrl(void), const QString & filter = QString(void), QString * selectedFilter = 0, Options options = 0, const QStringList & supportedSchemes = QStringList(void))
</comment>
QString getSaveFileName(QWidget *,QString,QString,QString)
QUrl getSaveFileUrl(QWidget *,QString, QUrl,QString, QString *, QFileDialog::Option options,QStringList)

<class>
name: QPainter
para: void
</class>

QBrush background(void)
int backgroundMode(void)
bool begin(QPaintDevice *device)
void beginNativePainting(void)
QRect boundingRect(int x, int y, int w, int h, int flags,  QString  text)
QBrush brush(void)
QPoint brushOrigin(void)
QRectF clipBoundingRect(void)
QPainterPath clipPath(void)
QRegion clipRegion(void)
QTransform combinedTransform(void)
int compositionMode(void)
QPaintDevice *device(void)
QTransform deviceTransform(void)
void drawArc(int x, int y, int width, int height, int startAngle, int spanAngle)
void drawChord(int x, int y, int width, int height, int startAngle, int spanAngle)
void drawConvexPolygon( QPoint * points, int pointCount)
void drawEllipse(int x, int y, int width, int height)
void drawGlyphRun( QPointF  position,  QGlyphRun  glyphs)
void drawImage(int x, int y,  QImage image)
void drawLine(int x1, int y1, int x2, int y2)
void drawLines( QLine * lines, int lineCount)
void drawPath( QPainterPath  path)
void drawPicture(int x, int y,  QPicture  picture)
void drawPie(int x, int y, int width, int height, int startAngle, int spanAngle)
void drawPixmap(int x, int y,  QPixmap)
<comment>
void drawPixmapFragments( PixmapFragment *fragments, int fragmentCount,  QPixmap  pixmap, PixmapFragmentHints hints)
</comment>
void drawPoint(int x, int y)
void drawPoints( QPointF * points, int pointCount)
<comment>
void drawPolygon( QPointF * points, int pointCount, Qt::FillRule fillRule)
</comment>
void drawPolyline( QPointF * points, int pointCount)
void drawRect(int x, int y, int width, int height)
void drawRects( QRectF * rectangles, int rectCount)
void drawRoundedRect(int x, int y, int w, int h, qreal xRadius, qreal yRadius, Qt::SizeMode mode)
void drawStaticText(int left, int top,  QStaticText  staticText)
void drawText(int x, int y, QString  text)
void drawTiledPixmap(int x, int y, int width, int height,  QPixmap  pixmap, int sx, int sy)
bool end(void) # In RingQt use : bool endpaint(void)
void endNativePainting(void)
void eraseRect(int x, int y, int width, int height)
void fillPath( QPainterPath  path,  QBrush  brush)
void fillRect(int x, int y, int width, int height, QBrush)
QFont font(void)
QFontInfo fontInfo(void)

<comment>
QFontMetrics fontMetrics(void)
</comment>

bool hasClipping(void)
void initFrom( QWidget *widget)
bool isActive(void)
int layoutDirection(void)
double opacity(void)
QPaintEngine *paintEngine(void)
QPen pen(void)
int renderHints(void)
void resetTransform(void)
void restore(void)
void rotate(qreal angle)
void save(void)
void scale(double sx, double sy)
void setBackground( QBrush  brush)
void setBackgroundMode(Qt::BGMode mode)
void setBrush(QBrush brush)
void setBrushOrigin(int x, int y)
void setClipPath( QPainterPath  path, Qt::ClipOperation operation)
void setClipRect(int x, int y, int width, int height, Qt::ClipOperation operation)
void setClipRegion( QRegion  region, Qt::ClipOperation operation)
void setClipping(bool enable)
void setCompositionMode(QPainter::CompositionMode mode)
void setFont( QFont  font)
void setLayoutDirection(Qt::LayoutDirection direction)
void setOpacity(qreal opacity)
void setPen(QPen  pen)
void setRenderHint(QPainter::RenderHint hint, bool on)
void setTransform( QTransform  transform, bool combine)
void setViewTransformEnabled(bool enable)
void setViewport(int x, int y, int width, int height)
void setWindow(int x, int y, int width, int height)
void setWorldMatrixEnabled(bool enable)
void setWorldTransform( QTransform  matrix, bool combine)
void shear(double sh, double sv)
void strokePath( QPainterPath  path,  QPen  pen)
bool testRenderHint(QPainter::RenderHint hint)
QTransform  transform(void)
void translate(double dx, double dy)
bool viewTransformEnabled(void)
QRect viewport(void)
QRect window(void)
bool worldMatrixEnabled(void)
QTransform  worldTransform(void)

<register>
void drawPolygon(QPainter *pObject, Qt::FillRule fillRule )
</register>

<code>
RING_FUNC(ring_QPainter_drawPolygon)
{
	QPainter *pObject;
	List *pList,*pList2;
	int x,nSize;
	RING_API_IGNORECPOINTERTYPE ;
	if ( RING_API_PARACOUNT != 3 ) {
		RING_API_ERROR(RING_API_MISS3PARA);
		return ;
	}
	if ( ! RING_API_ISPOINTER(1) ) {
		RING_API_ERROR(RING_API_BADPARATYPE);
		return ;
	}
	if ( ! RING_API_ISPOINTER(2) ) {
		RING_API_ERROR(RING_API_BADPARATYPE);
		return ;
	}
	if ( ! RING_API_ISNUMBER(3) ) {
		RING_API_ERROR(RING_API_BADPARATYPE);
		return ;
	}
	pObject = (QPainter *) RING_API_GETCPOINTER(1,"QPainter");
	pList = (List *) RING_API_GETLIST(2);
	nSize = ring_list_getsize(pList);
	QPointF *points = new QPointF[nSize];
	for (x=0 ; x < nSize ; x++) {
		pList2 = ring_list_getlist(pList,x+1);
		points[x].setX((float) ring_list_getdouble(pList2,1));
		points[x].setY((float) ring_list_getdouble(pList2,2));
	}
	pObject->drawPolygon(points, nSize, (Qt::FillRule )  (int) RING_API_GETNUMBER(3));	
	delete [] points;
}
</code>

<class>
name: QPainter2
para: QPaintDevice *
parent: QPainter
codename: QPainter
</class>


<class>
name: QPicture
para: void
</class>

QRect boundingRect(void)
const char *data(void)
bool isNull(void)
bool load(QString, const char *format) # In RingQt use : bool loadfile(QString, const char *format)
bool play(QPainter *painter)
bool save(QString , const char *format)
void setBoundingRect(QRect)
int size(void)
void swap(QPicture)

<class>
name: QPen
para: void
</class>

QBrush brush(void)
int capStyle(void)
QColor color(void)
double dashOffset(void)
bool isCosmetic(void)
bool isSolid(void)
int joinStyle(void)
double miterLimit(void)
void setBrush(QBrush)
void setCapStyle(Qt::PenCapStyle style)
void setColor(QColor)
void setCosmetic(bool cosmetic)
void setDashOffset(double offset)
void setJoinStyle(Qt::PenJoinStyle style)
void setMiterLimit(double limit)
void setStyle(Qt::PenStyle style)
void setWidth(int width)
void setWidthF(double width)
int style(void)
void swap(QPen)
int width(void)
double widthF(void)

<class>
name: QColor
para: void
</class>

int alpha(void)
double alphaF(void)
int black(void)
double blackF(void)
int blue(void)
double blueF(void)
QColor convertTo(QColor::Spec colorSpec)
int cyan(void)
double cyanF(void)
QColor darker(int factor)
void getCmyk(int *c, int *m, int *y, int *k, int *a)
void getCmykF(qreal *c, qreal *m, qreal *y, qreal *k, qreal *a)
void getHsl(int *h, int *s, int *l, int *a)
void getHslF(qreal *h, qreal *s, qreal *l, qreal *a)
void getHsv(int *h, int *s, int *v, int *a)
void getHsvF(qreal *h, qreal *s, qreal *v, qreal *a)
void getRgb(int *r, int *g, int *b, int *a)
void getRgbF(qreal *r, qreal *g, qreal *b, qreal *a)
int green(void)
double greenF(void)
int hslHue(void)
double hslHueF(void)
int hslSaturation(void)
double hslSaturationF(void)
int hsvHue(void)
double hsvHueF(void)
int hsvSaturation(void)
double hsvSaturationF(void)
int hue(void)
double hueF(void)
bool isValid(void)
QColor lighter(int factor)
int lightness(void)
double lightnessF(void)
int magenta(void)
double magentaF(void)
QString name(void)
int red(void)
double redF(void)
QRgb rgb(void)
QRgb rgba(void)
int saturation(void)
double saturationF(void)
void setAlpha(int alpha)
void setAlphaF(double alpha)
void setBlue(int blue)
void setBlueF(double blue)
void setCmyk(int c, int m, int y, int k, int a)
void setCmykF(double c, double m, double y, double k, double a)
void setGreen(int green)
void setGreenF(double green)
void setHsl(int h, int s, int l, int a)
void setHslF(double h, double s, double l, double a)
void setHsv(int h, int s, int v, int a)
void setHsvF(double h, double s, double v, double a)
void setNamedColor(QString)
void setRed(int red)
void setRedF(double red)
void setRgb(int r, int g, int b, int a)
void setRgbF(double r, double g, double b, double a)
void setRgba(QRgb rgba)
int spec(void)
QColor toCmyk(void)
QColor toHsl(void)
QColor toHsv(void)
QColor toRgb(void)
int value(void)
double valueF(void)
int yellow(void)
double yellowF(void)
QStringList colorNames(void)
QColor fromCmyk(int c, int m, int y, int k, int a)
QColor fromCmykF(double c, double m, double y, double k, double a)
QColor fromHsl(int h, int s, int l, int a)
QColor fromHslF(double h, double s, double l, double a)
QColor fromHsv(int h, int s, int v, int a)
QColor fromHsvF(double h, double s, double v, double a)
QColor fromRgb(int r, int g, int b, int a)
QColor fromRgbF(double r, double g, double b, double a)
QColor fromRgba(QRgb rgba)
bool isValidColor(QString)

<class>
name: QPrinter
para: QPrinter::PrinterMode
</class>

bool abort(void)
bool collateCopies(void)
int colorMode(void)
int copyCount(void)
QString creator(void)
QString docName(void)
int duplex(void)
bool fontEmbeddingEnabled(void)
int fromPage(void)
bool fullPage(void)
bool isValid(void)
QString outputFileName(void)
int outputFormat(void)
<comment>
QPageLayout pageLayout(void)
</comment>
int pageOrder(void)
QRectF pageRect(QPrinter::Unit unit)
QRectF paperRect(QPrinter::Unit unit)
int paperSource(void)
QPrintEngine *printEngine(void)
QString printProgram(void)
int printRange(void)
QString printerName(void)
QString printerSelectionOption(void)
int printerState(void)
int resolution(void)
void setCollateCopies(bool collate)
void setColorMode(QPrinter::ColorMode newColorMode)
void setCopyCount(int count)
void setCreator(QString)
void setDocName(QString)
void setDuplex(QPrinter::DuplexMode duplex)
void setFontEmbeddingEnabled(bool enable)
void setFromTo(int from, int to)
void setFullPage(bool fp)
void setOutputFileName(QString)
void setOutputFormat(QPrinter::OutputFormat format)
<comment>
bool setPageLayout(QPageLayout)
bool setPageMargins(QMarginsF, QPageLayout::Unit units)
</comment>
void setPageOrder(QPrinter::PageOrder pageOrder)
<comment>
bool setPageOrientation(QPageLayout::Orientation orientation)
bool setPageSize(QPageSize)
</comment>
void setPaperSource(QPrinter::PaperSource source)
void setPrintProgram(QString)
void setPrintRange(QPrinter::PrintRange)
void setPrinterName(QString)
void setPrinterSelectionOption(QString)
void setResolution(int dpi)
bool supportsMultipleCopies(void)
int toPage(void)
bool newPage(void)
QPaintEngine *paintEngine(void)
void setPageSizeMM(QSizeF)

<class>
name: QFont
para: QString, int, int, bool
managed
</class>

bool bold(void)
int capitalization(void)
QString defaultFamily(void)
bool exactMatch(void)
QString family(void)
bool fixedPitch(void)
bool fromString(QString)
int hintingPreference(void)
bool isCopyOf(QFont)
bool italic(void)
bool kerning(void)
QString key(void)
QString lastResortFamily(void)
QString lastResortFont(void)
double letterSpacing(void)
int letterSpacingType(void)
bool overline(void)
int pixelSize(void)
int pointSize(void)
double pointSizeF(void)
bool rawMode(void)
QString rawName(void)
QFont resolve(QFont)
void setBold(bool enable)
void setCapitalization(QFont::Capitalization caps)
void setFamily(QString)
void setFixedPitch(bool enable)
void setHintingPreference(QFont::HintingPreference hintingPreference)
void setItalic(bool enable)
void setKerning(bool enable)
void setLetterSpacing(QFont::SpacingType type, double spacing)
void setOverline(bool enable)
void setPixelSize(int pixelSize)
void setPointSize(int pointSize)
void setPointSizeF(double pointSize)
void setRawMode(bool enable)
void setRawName(QString)
void setStretch(int factor)
void setStrikeOut(bool enable)
void setStyle(QFont::Style style)
void setStyleHint(QFont::StyleHint hint, QFont::StyleStrategy strategy)
void setStyleName(QString)
void setStyleStrategy(QFont::StyleStrategy s)
void setUnderline(bool enable)
void setWeight(int weight)
void setWordSpacing(double spacing)
int stretch(void)
bool strikeOut(void)
int style(void)
int styleHint(void)
QString styleName(void)
int styleStrategy(void)
QString toString(void)
bool underline(void)
int weight(void)
double wordSpacing(void)
void insertSubstitution(QString,QString)
void insertSubstitutions(QString,QStringList)
QString substitute(QString)
QStringList substitutes(QString)
QStringList substitutions(void)

<class>
name: QBrush
para: void
</class>

QColor color(void)
QGradient *gradient(void)
bool isOpaque(void)
QMatrix matrix(void)
void setColor(QColor)
void setMatrix(QMatrix)
void setStyle(Qt::BrushStyle style)
void setTexture(QPixmap)
void setTextureImage(QImage)
void setTransform(QTransform)
int style(void)
void swap(QBrush)
QPixmap texture(void)
QImage textureImage(void)
QTransform transform(void)

<class>
name: QByteArray
para: void
</class>

QByteArray append(const char *str)
char at(int i)
int capacity(void)
void chop(int n)
void clear(void)
const char *constData(void)
bool contains(const char *str)
int count(const char *str)
const char *data(void)
bool endsWith(const char *str)
QByteArray fill(char ch, int size)
int indexOf(const char *str, int from)
QByteArray insert(int i, const char *str, int len)
bool isEmpty(void)
bool isNull(void)
int lastIndexOf(const char *str, int from)
QByteArray left(int len)
QByteArray leftJustified(int width, char fill, bool truncate)
int length(void)
QByteArray mid(int pos, int len)
QByteArray prepend(const char *str, int len)
void push_back(const char *str)
void push_front(const char *str)
QByteArray remove(int pos, int len)
QByteArray repeated(int times)
QByteArray  replace(int pos, int len, const char *after, int alen)
void reserve(int size)
void resize(int size)
QByteArray right(int len)
QByteArray rightJustified(int width, char fill, bool truncate)
QByteArray setNum(int n, int base)
QByteArray setRawData(const char *data, uint size)
QByteArray simplified(void)
int size(void)
void squeeze(void)
bool startsWith(const char *str)
void swap(QByteArray other)
QByteArray toBase64(void)
double toDouble(bool * ok)
float toFloat(bool * ok)
QByteArray toHex(void)
int toInt(bool *ok, int base)
long toLong(bool *ok, int base)
qlonglong toLongLong(bool *ok, int base)
QByteArray toLower(void)
QByteArray toPercentEncoding(QByteArray,QByteArray, char percent)
short toShort(bool *ok, int base)
int toUInt(bool *ok, int base)
int toULong(bool *ok, int base)
int toULongLong(bool * ok, int base)
int toUShort(bool * ok, int base)
QByteArray toUpper(void)
QByteArray trimmed(void)
void truncate(int pos)
QByteArray fromBase64(QByteArray)
QByteArray fromHex(QByteArray)
QByteArray fromPercentEncoding(QByteArray, char percent)
QByteArray fromRawData(const char *data, int size)
QByteArray number(int n, int base)
<comment>
int qChecksum(const char *data, uint len)
QByteArray qCompress(QByteArray data, int compressionLevel)
QByteArray qUncompress(const char *data, int nbytes)
int qstrcmp(const char *str1, const char *str2)
char *qstrcpy(char *dst, const char *src)
char *qstrdup(const char *src)
int qstricmp(const char *str1, const char *str2)
uint qstrlen(const char *str)
int qstrncmp(const char *str1, const char *str2, int len)
char *qstrncpy(char *dst, const char *src, uint len)
int qstrnicmp(const char *str1, const char *str2, uint len)
uint qstrnlen(const char *str, uint maxlen)
int qvsnprintf(char *str, size_t n, const char *fmt, va_list ap)
</comment>


<class>
name: QIODevice
para: void
parent: QObject
codename: GIODevice
passvmpointer
abstract
</class>

QString errorString(void)
bool getChar(char *c)
bool isOpen(void)
bool isReadable(void)
bool isTextModeEnabled(void) 
bool isWritable(void)
int openMode(void)
int peek(char *data, int maxSize)
<comment>
QByteArray peek(int maxSize)
</comment>
bool putChar(char c)
int read(char *data, int maxSize)
<comment>
QByteArray read(int maxSize)
</comment>
QByteArray readAll(void)
int readLine(char *data, int maxSize)
<comment>
QByteArray readLine(int maxSize)
</comment>
void setTextModeEnabled(bool enabled)
void ungetChar(char c)
int write(const char *data, int maxSize)


bool atEnd(void)
bool canReadLine(void)
void close(void)
bool open(QIODevice::OpenMode flags)
qint64 pos(void)
bool seek(qint64 pos)
qint64 size(void)

void setaboutToCloseEvent(const char *)
void setbytesWrittenEvent(const char *)
void setreadChannelFinishedEvent(const char *)
void setreadyReadEvent(const char *)

const char *getaboutToCloseEvent(void)
const char *getbytesWrittenEvent(void)
const char *getreadChannelFinishedEvent(void)
const char *getreadyReadEvent(void)

<class>
name: QAbstractSocket
para: void
parent: QIODevice
abstract
codename: GAbstractSocket
passvmpointer
</class>

void abort(void)
bool bind(QHostAddress address, int port, QAbstractSocket::BindFlag mode)
void connectToHost(QString  hostName, int port, QIODevice::OpenModeFlag openMode, QAbstractSocket::NetworkLayerProtocol protocol)
void disconnectFromHost(void)
int error(void)
bool flush(void)
bool isValid(void)
QHostAddress localAddress(void)
int localPort(void)
int pauseMode(void)
QHostAddress peerAddress(void)
QString peerName(void)
int peerPort(void)
QNetworkProxy proxy(void)
int readBufferSize(void)
void resume(void)
void setPauseMode(QAbstractSocket::PauseMode pauseMode)
void setProxy(QNetworkProxy  networkProxy)
void setReadBufferSize(int size)
bool setSocketDescriptor(qintptr socketDescriptor, QAbstractSocket::SocketState socketState, QIODevice::OpenModeFlag openMode)
void setSocketOption(QAbstractSocket::SocketOption option,  QVariant  value)
int *socketDescriptor(void)
QVariant socketOption(QAbstractSocket::SocketOption option)
int socketType(void)
int state(void)
bool waitForConnected(int msecs)
bool waitForDisconnected(int msecs)
bool atEnd(void)
int bytesAvailable(void)
int bytesToWrite(void)
bool canReadLine(void)
void close(void)
bool isSequential(void)
bool waitForBytesWritten(int msecs)
bool waitForReadyRead(int msecs)
<comment>
void setLocalAddress(QHostAddress  address)
void setLocalPort(int port)
void setPeerAddress(QHostAddress  address)
void setPeerName(QString name)
void setPeerPort(int port)
void setSocketError(int socketError)
void setSocketState(int state)
int readData(char *data, int maxSize)
int readLineData(char *data, int maxlen)
int writeData(char *data, int size)
</comment>

void setconnectedEvent(const char *)
void setdisconnectedEvent(const char *)
void seterrorEvent(const char *)
void sethostFoundEvent(const char *)
void setproxyAuthenticationRequiredEvent(const char *)
void setstateChangedEvent(const char *)

const char *getconnectedEvent(void)
const char *getdisconnectedEvent(void)
const char *geterrorEvent(void)
const char *gethostFoundEvent(void)
const char *getproxyAuthenticationRequiredEvent(void)
const char *getstateChangedEvent(void)

<class>
name: QNetworkProxy
para: void
</class>

int capabilities(void)
bool hasRawHeader(QByteArray headerName)
QVariant header(QNetworkRequest::KnownHeaders header)
QString hostName(void)
bool isCachingProxy(void)
bool isTransparentProxy(void)
QString password(void)
int port(void)
QByteArray rawHeader(QByteArray headerName)
void setCapabilities(QNetworkProxy::Capability capabilities)
void setHeader(QNetworkRequest::KnownHeaders header,  QVariant value)
void setHostName(QString hostName)
void setPassword(QString password)
void setPort(int port)
void setRawHeader(QByteArray headerName, QByteArray headerValue)
void setType(QNetworkProxy::ProxyType type)
void setUser(QString user)
void swap(QNetworkProxy  other)
int type(void)
QString user(void)
QNetworkProxy applicationProxy(void)
void setApplicationProxy(QNetworkProxy  networkProxy)

<class>
name: QTcpSocket
para: QObject *
parent: QAbstractSocket
codename: GTcpSocket
passvmpointer
</class>

void setconnectedEvent(const char *)
void setdisconnectedEvent(const char *)
void seterrorEvent(const char *)
void sethostFoundEvent(const char *)
void setproxyAuthenticationRequiredEvent(const char *)
void setstateChangedEvent(const char *)
void setaboutToCloseEvent(const char *)
void setbytesWrittenEvent(const char *)
void setreadChannelFinishedEvent(const char *)
void setreadyReadEvent(const char *)

const char *getconnectedEvent(void)
const char *getdisconnectedEvent(void)
const char *geterrorEvent(void)
const char *gethostFoundEvent(void)
const char *getproxyAuthenticationRequiredEvent(void)
const char *getstateChangedEvent(void)
const char *getaboutToCloseEvent(void)
const char *getbytesWrittenEvent(void)
const char *getreadChannelFinishedEvent(void)
const char *getreadyReadEvent(void)


<class>
name: QTcpServer
para: QWidget *
codename: GTcpServer
passvmpointer
</class>

void close(void)
QString errorString(void)
bool hasPendingConnections(void)
bool isListening(void)
bool listen(QHostAddress, int port)
int maxPendingConnections(void)
QTcpSocket *nextPendingConnection(void)
void pauseAccepting(void)
QNetworkProxy proxy(void)
void resumeAccepting(void)
QHostAddress serverAddress(void)
int serverError(void)
int serverPort(void)
void setMaxPendingConnections(int numConnections)
void setProxy(QNetworkProxy)
bool setSocketDescriptor(qintptr socketDescriptor)
int *socketDescriptor(void)
bool waitForNewConnection(int msec, bool *timedOut)

void setacceptErrorEvent(const char *)
void setnewConnectionEvent(const char *)

const char *getacceptErrorEvent(void)
const char *getnewConnectionEvent(void)

<class>
name: QHostAddress
para: void
</class>

void clear(void)
bool isInSubnet(QHostAddress, int netmask)
bool isNull(void)
int protocol(void)
QString scopeId(void)
bool setAddress(QString)
int toIPv4Address(void)
Q_IPV6ADDR toIPv6Address(void) 
QString toString(void)


<class>
name: QHostInfo
para: void
</class>

int error(void)
QString errorString(void)
QString hostName(void)
int lookupId(void)
void setError(QHostInfo::HostInfoError error)
void setErrorString(QString)
void setHostName(QString)
void setLookupId(int id)
void abortHostLookup(int id)
QHostInfo fromName(QString)
QString localDomainName(void)
QString localHostName(void)
<comment>
int lookupHost(QString, QObject *receiver, const char *member)
</comment>

<class>
name: QFileInfo
para: void
</class>

QDir absoluteDir(void)
QString absoluteFilePath(void)
QString absolutePath(void)
QString baseName(void)
QString bundleName(void)
bool caching(void)
QString canonicalFilePath(void)
QString canonicalPath(void)
QString completeBaseName(void)
QString completeSuffix(void)
QDateTime created(void)
QDir dir(void)
bool exists(void)
QString fileName(void)
QString filePath(void)
QString group(void)
int groupId(void)
bool isAbsolute(void)
bool isBundle(void)
bool isDir(void)
bool isExecutable(void)
bool isFile(void)
bool isHidden(void)
bool isNativePath(void)
bool isReadable(void)
bool isRelative(void)
bool isRoot(void)
bool isSymLink(void)
bool isWritable(void)
QDateTime lastModified(void)
QDateTime lastRead(void)
bool makeAbsolute(void)
QString owner(void)
uint ownerId(void)
QString path(void)
bool permission(QFileDevice::Permission permissions)
int permissions(void)
void refresh(void)
void setCaching(bool enable)
void setFile(QString)
int size(void)
QString suffix(void)
void swap(QFileInfo)
QString symLinkTarget(void)

<class>
name: QDirModel
para: void
</class>

QIcon fileIcon(QModelIndex)
QFileInfo fileInfo(QModelIndex)
QString fileName(QModelIndex)
QString filePath(QModelIndex)
int filter(void)
QFileIconProvider *iconProvider(void)
QModelIndex index(QString path, int column)
bool isDir(QModelIndex)
bool isReadOnly(void)
bool lazyChildCount(void)
QModelIndex mkdir(QModelIndex parent, QString name)
QStringList nameFilters(void)
bool remove(QModelIndex index)
bool resolveSymlinks(void)
bool rmdir(QModelIndex index)
void setFilter(QDir::Filter filters)
void setIconProvider(QFileIconProvider *provider)
void setLazyChildCount(bool enable)
void setNameFilters(QStringList filters)
void setReadOnly(bool enable)
void setResolveSymlinks(bool enable)
void setSorting(QDir::SortFlag sort)
int sorting(void)
void refresh(QModelIndex parent)


<class>
name: QFontDialog
para: void
parent: QDialog
</class>

QFont currentFont(void)
void open(QObject *receiver, const char *member)
int options(void)
QFont selectedFont(void)
void setCurrentFont(QFont)
void setOption(QFontDialog::FontDialogOption option, bool on)
void setOptions(QFontDialog::FontDialogOption options)
bool testOption(QFontDialog::FontDialogOption option)


<register>
int getfont(void)
</register>
<code>
RING_FUNC(ring_QFontDialog_getfont)
{
	List *pList;
	pList = RING_API_NEWLIST ;
	bool lok ;
	QFont pFont ;
	QFont pValue = QFontDialog::getFont(&lok,pFont,NULL);		
	if (lok) {
		ring_list_addstring(pList,pValue.toString().toStdString().c_str());
		ring_list_adddouble(pList,pValue.pointSize());
   	}
	else {
		ring_list_addstring(pList,"");
		ring_list_adddouble(pList,10);
	}
	RING_API_RETLIST(pList);
}

</code>



<class>
name: QDialog
para: QWidget *parent 
parent: QWidget
</class>

bool isSizeGripEnabled(void)
int result(void)
void setModal(bool modal)
void setResult(int i)
void setSizeGripEnabled(bool)
void accept(void)
void done(int r) # In RingQt use : void donedialog(int r)
int exec(void)
void open(void)
void reject(void)

<class>
name: QTextCursor
para: void
</class>

int anchor(void)
bool atBlockEnd(void)
bool atBlockStart(void)
bool atEnd(void)
bool atStart(void)
void beginEditBlock(void)
QTextBlock block(void)
QTextCharFormat blockCharFormat(void)
QTextBlockFormat blockFormat(void)
int blockNumber(void)
QTextCharFormat charFormat(void)
void clearSelection(void)
int columnNumber(void)
QTextList *createList(QTextListFormat)
QTextFrame *currentFrame(void)
QTextList *currentList(void)
QTextTable *currentTable(void)
void deleteChar(void)
void deletePreviousChar(void)
QTextDocument *document(void)
void endEditBlock(void)
bool hasComplexSelection(void)
bool hasSelection(void)
void insertBlock(void)
void insertFragment(QTextDocumentFragment)
QTextFrame *insertFrame(QTextFrameFormat)
void insertHtml(QString)
void insertImage(QTextImageFormat)
QTextList *insertList(QTextListFormat)
QTextTable * insertTable(int rows, int columns, QTextTableFormat)
void insertText(QString)
void insertText@2(QString,QTextCharFormat)
bool isCopyOf(QTextCursor)
bool isNull(void)
void joinPreviousEditBlock(void)
bool keepPositionOnInsert(void)
void mergeBlockCharFormat(QTextCharFormat)
void mergeBlockFormat(QTextBlockFormat)
void mergeCharFormat(QTextCharFormat)
bool movePosition(QTextCursor::MoveOperation operation, QTextCursor::MoveMode mode, int n)
int position(void)
int positionInBlock(void)
void removeSelectedText(void)
void select(QTextCursor::SelectionType selection)
void selectedTableCells(int *firstRow, int *numRows, int *firstColumn, int *numColumns)
QString selectedText(void)
QTextDocumentFragment selection(void)
int selectionEnd(void)
int selectionStart(void)
void setBlockCharFormat(QTextCharFormat)
void setBlockFormat(QTextBlockFormat)
void setCharFormat(QTextCharFormat)
void setKeepPositionOnInsert(bool b)
void setPosition(int pos, QTextCursor::MoveMode m)
void setVerticalMovementX(int x)
void setVisualNavigation(bool b)
int verticalMovementX(void)
bool visualNavigation(void)

<class>
name: QColorDialog
para: void
parent: QDialog
</class>

QColor currentColor(void)
void open(void)
int options(void)
QColor selectedColor(void)
void setCurrentColor(QColor)
void setOption(QColorDialog::ColorDialogOption option, bool on )
void setOptions(QColorDialog::ColorDialogOption options)
bool testOption(QColorDialog::ColorDialogOption option)
QColor customColor(int index)
int customCount(void)
void setCustomColor(int index, int color)
void setStandardColor(int index, int color)

<comment>
void setcolorSelectedEvent(const char *)
void setcurrentColorChangedEvent(const char *)
</comment>

<register>
int getcolor(void)
</register>
<code>
RING_FUNC(ring_QColorDialog_getcolor)
{
	List *pList;
	pList = RING_API_NEWLIST ;
	QColor pValue = QColorDialog::getColor();		
	ring_list_adddouble(pList,pValue.red());
	ring_list_adddouble(pList,pValue.green());
	ring_list_adddouble(pList,pValue.blue());
	RING_API_RETLIST(pList);
}
</code>


<class>
name: QStringList
para: void
managed
</class>

QString join(QString)
void sort(void)
int removeDuplicates(void)
QStringList filter(QString, Qt::CaseSensitivity)
QStringList replaceInStrings(QString,QString, Qt::CaseSensitivity)

<comment>
Methods from QList<T>
</comment>

void append(QString)
QString at(int)
QString back(void)
void clear(void)
bool contains(QString)
int count(void)
bool empty(void)
bool endsWith(QString)
QString first(void)
QString front(void)
int indexOf(QString, int)
void insert(int, QString)
bool isEmpty(void)
QString last(void)
int lastIndexOf(QString,int)
int length(void)
void move(int,int)
void pop_back(void)
void pop_front(void)
void prepend(QString)
void push_back(QString)
void push_front(QString)
int removeAll(QString)
void removeAt(int)
void removeFirst(void)
void removeLast(void)
bool removeOne(QString)
void replace(int,QString)
void reserve(int)
int size(void)
bool startsWith(QString)
void swap(int,int)
QString takeAt(int)
QString takeFirst(void)
QString takeLast(void)
QString value(int)



<class>
name: QKeySequence
para: QString 
managed
</class>

<class>
name: QLCDNumber
para: QWidget *
parent: QFrame
</class>

bool checkOverflow(double num)
int digitCount(void)
int intValue(void)
int mode(void)
int segmentStyle(void)
void setDigitCount(int numDigits)
void setMode(QLCDNumber::Mode)
void setSegmentStyle(QLCDNumber::SegmentStyle)
bool smallDecimalPoint(void)
double value(void)
void display(double)
void setBinMode(void)
void setDecMode(void)
void setHexMode(void)
void setOctMode(void)
void setSmallDecimalPoint(bool)

<class>
name: QInputDialog
para: QWidget *
parent: QDialog
</class>

QString cancelButtonText(void)
QStringList comboBoxItems(void)
int doubleDecimals(void)
double doubleMaximum(void)
double doubleMinimum(void)
double doubleValue(void)
int inputMode(void)
int intMaximum(void)
int intMinimum(void)
int intStep(void)
int intValue(void)
bool isComboBoxEditable(void)
QString labelText(void)
QString okButtonText(void)
void open(QObject *receiver, const char *member)
int options(void)
void setCancelButtonText(QString)
void setComboBoxEditable(bool editable)
void setComboBoxItems(QStringList)
void setDoubleDecimals(int decimals)
void setDoubleMaximum(double max)
void setDoubleMinimum(double min)
void setDoubleRange(double min, double max)
void setDoubleValue(double value)
void setInputMode(QInputDialog::InputMode mode)
void setIntMaximum(int max)
void setIntMinimum(int min)
void setIntRange(int min, int max)
void setIntStep(int step)
void setIntValue(int value)
void setLabelText(QString)
void setOkButtonText(QString)
void setOption(QInputDialog::InputDialogOption option, bool on)
void setOptions(QInputDialog::InputDialogOption options)
void setTextEchoMode(QLineEdit::EchoMode mode)
void setTextValue(QString)
bool testOption(QInputDialog::InputDialogOption option)
int textEchoMode(void)
QString textValue(void)

double getDouble(QWidget *parent,QString,QString, double value, double min, double max , int decimals, bool *ok, Qt::WindowType flags)
int getInt(QWidget *parent,QString,QString, int value, int min, int max, int step, bool *ok, Qt::WindowType flags)
<comment>
QString getItem(QWidget *parent,QString,QString,QStringList, int current, bool editable, bool *ok, Qt::WindowFlags, Qt::WindowType flags)
QString getText(QWidget *parent,QString,QString,int mode,QString, int *ok, int flags, Qt::WindowType)
</comment>

<class>
name: QAllEvents
para: QWidget *
parent: QWidget
codename: GAllEvents
passvmpointer
</class>

void accept(void)
void ignore(void)

int getKeyCode(void)
QString getKeyText(void)
int getModifiers(void)
int getx(void)
int gety(void)
int getglobalx(void)
int getglobaly(void)
int getbutton(void)
int getbuttons(void)

void setKeyPressEvent(const char *cStr)
void setMouseButtonPressEvent(const char *cStr)
void setMouseButtonReleaseEvent(const char *cStr)
void setMouseButtonDblClickEvent(const char *cStr)
void setMouseMoveEvent(const char *cStr)
void setCloseEvent(const char *cStr)
void setContextMenuEvent(const char *cStr)
void setDragEnterEvent(const char *cStr)
void setDragLeaveEvent(const char *cStr)
void setDragMoveEvent(const char *cStr)
void setDropEvent(const char *cStr)
void setEnterEvent(const char *cStr)
void setFocusInEvent(const char *cStr)
void setFocusOutEvent(const char *cStr)
void setKeyReleaseEvent(const char *cStr)
void setLeaveEvent(const char *cStr)
void setNonClientAreaMouseButtonDblClickEvent(const char *cStr)
void setNonClientAreaMouseButtonPressEvent(const char *cStr)
void setNonClientAreaMouseButtonReleaseEvent(const char *cStr)
void setNonClientAreaMouseMoveEvent(const char *cStr)
void setMoveEvent(const char *cStr)
void setResizeEvent(const char *cStr)
void setWindowActivateEvent(const char *cStr)
void setWindowBlockedEvent(const char *cStr)
void setWindowDeactivateEvent(const char *cStr)
void setWindowStateChangeEvent(const char *cStr)
void setWindowUnblockedEvent(const char *cStr)
void setPaintEvent(const char *cStr)

const char *getKeyPressEvent(void)
const char *getMouseButtonPressEvent(void)
const char *getMouseButtonReleaseEvent(void)
const char *getMouseButtonDblClickEvent(void)
const char *getMouseMoveEvent(void)
const char *getCloseEvent(void)
const char *getContextMenuEvent(void)
const char *getDragEnterEvent(void)
const char *getDragLeaveEvent(void)
const char *getDragMoveEvent(void)
const char *getDropEvent(void)
const char *getEnterEvent(void)
const char *getFocusInEvent(void)
const char *getFocusOutEvent(void)
const char *getKeyReleaseEvent(void)
const char *getLeaveEvent(void)
const char *getNonClientAreaMouseButtonDblClickEvent(void)
const char *getNonClientAreaMouseButtonPressEvent(void)
const char *getNonClientAreaMouseButtonReleaseEvent(void)
const char *getNonClientAreaMouseMoveEvent(void)
const char *getMoveEvent(void)
const char *getResizeEvent(void)
const char *getWindowActivateEvent(void)
const char *getWindowBlockedEvent(void)
const char *getWindowDeactivateEvent(void)
const char *getWindowStateChangeEvent(void)
const char *getWindowUnblockedEvent(void)
const char *getPaintEvent(void)

void setEventOutput(bool x)
QObject *getParentObject(void)
QWidget *getParentWidget(void)

void setKeyPressFunc(const char *cStr)
void setMouseButtonPressFunc(const char *cStr)
void setMouseButtonReleaseFunc(const char *cStr)
void setMouseButtonDblClickFunc(const char *cStr)
void setMouseMoveFunc(const char *cStr)
void setCloseFunc(const char *cStr)
void setContextMenuFunc(const char *cStr)
void setDragEnterFunc(const char *cStr)
void setDragLeaveFunc(const char *cStr)
void setDragMoveFunc(const char *cStr)
void setDropFunc(const char *cStr)
void setEnterFunc(const char *cStr)
void setFocusInFunc(const char *cStr)
void setFocusOutFunc(const char *cStr)
void setKeyReleaseFunc(const char *cStr)
void setLeaveFunc(const char *cStr)
void setNonClientAreaMouseButtonDblClickFunc(const char *cStr)
void setNonClientAreaMouseButtonPressFunc(const char *cStr)
void setNonClientAreaMouseButtonReleaseFunc(const char *cStr)
void setNonClientAreaMouseMoveFunc(const char *cStr)
void setMoveFunc(const char *cStr)
void setResizeFunc(const char *cStr)
void setWindowActivateFunc(const char *cStr)
void setWindowBlockedFunc(const char *cStr)
void setWindowDeactivateFunc(const char *cStr)
void setWindowStateChangeFunc(const char *cStr)
void setWindowUnblockedFunc(const char *cStr)
void setPaintFunc(const char *cStr)

const char *getKeyPressFunc(void)
const char *getMouseButtonPressFunc(void)
const char *getMouseButtonReleaseFunc(void)
const char *getMouseButtonDblClickFunc(void)
const char *getMouseMoveFunc(void)
const char *getCloseFunc(void)
const char *getContextMenuFunc(void)
const char *getDragEnterFunc(void)
const char *getDragLeaveFunc(void)
const char *getDragMoveFunc(void)
const char *getDropFunc(void)
const char *getEnterFunc(void)
const char *getFocusInFunc(void)
const char *getFocusOutFunc(void)
const char *getKeyReleaseFunc(void)
const char *getLeaveFunc(void)
const char *getNonClientAreaMouseButtonDblClickFunc(void)
const char *getNonClientAreaMouseButtonPressFunc(void)
const char *getNonClientAreaMouseButtonReleaseFunc(void)
const char *getNonClientAreaMouseMoveFunc(void)
const char *getMoveFunc(void)
const char *getResizeFunc(void)
const char *getWindowActivateFunc(void)
const char *getWindowBlockedFunc(void)
const char *getWindowDeactivateFunc(void)
const char *getWindowStateChangeFunc(void)
const char *getWindowUnblockedFunc(void)
const char *getPaintFunc(void)


<class>
name: QDesktopWidget
para: void
parent: QWidget
</class>

QRect availableGeometry(int screen)
bool isVirtualDesktop(void)
int primaryScreen(void)
QWidget *screen(int screen)
int screenCount(void)
QRect screenGeometry(int screen)
int screenNumber(QWidget *widget)

<class>
name: QRect
para: void
</class>

void adjust(int dx1, int dy1, int dx2, int dy2)
QRect adjusted(int dx1, int dy1, int dx2, int dy2)
int bottom(void)
QPoint bottomLeft(void)
QPoint bottomRight(void)
QPoint center(void)
bool contains(int x, int y, bool proper)
void getCoords(int *x1, int *y1, int *x2, int *y2)
void getRect(int *x, int *y, int *width, int *height)
int  height(void)
QRect intersected(QRect)
bool intersects(QRect)
bool isEmpty(void)
bool isNull(void)
bool isValid(void)
int left(void)
void moveBottom(int y)
void moveBottomLeft(QPoint)
void moveBottomRight(QPoint)
void moveCenter(QPoint)
void moveLeft(int x)
void moveRight(int x)
void moveTo(int x, int y)
void moveTop(int y)
void moveTopLeft(QPoint)
void moveTopRight(QPoint)
QRect normalized(void)
int right(void)
void setBottom(int y)
void setBottomLeft(QPoint)
void setBottomRight(QPoint)
void setCoords(int x1, int y1, int x2, int y2)
void setHeight(int height)
void setLeft(int x)
void setRect(int x, int y, int width, int height)
void setRight(int x)
void setSize(QSize)
void setTop(int y)
void setTopLeft(QPoint)
void setTopRight(QPoint)
void setWidth(int width)
void setX(int x)
void setY(int y)
QSize size(void)
int top(void)
QPoint topLeft(void)
QPoint topRight(void)
void translate(int dx, int dy)
QRect translated(int dx, int dy)
QRect united(QRect)
int width(void)
int x(void)
int y(void)



<class>
name: QTextDocument
para: void
parent: QObject
</class>

void addResource(int type,QUrl name, QVariant resource)
void adjustSize(void)
QVector<QTextFormat> allFormats(void)
int availableRedoSteps(void)
int availableUndoSteps(void)
QTextBlock begin(void)
int blockCount(void)
QChar characterAt(int pos)
int characterCount(void)
void clearUndoRedoStacks(QTextDocument::Stacks stacksToClear )
QTextDocument *clone(QObject *parent )
int defaultCursorMoveStyle(void)
QFont defaultFont(void)
QString defaultStyleSheet(void)
QTextOption defaultTextOption(void)
QAbstractTextDocumentLayout *documentLayout(void)
double documentMargin(void)
void drawContents(QPainter *p, QRectF rect)
QTextBlock end(void) # In RingQt use : QTextBlock enddoc(void)
QTextCursor find(QString subString, QTextCursor cursor, QTextDocument::FindFlag options )
QTextBlock findBlock(int pos)
QTextBlock findBlockByLineNumber(int lineNumber)
QTextBlock findBlockByNumber(int blockNumber)
QTextBlock firstBlock(void)
double idealWidth(void)
double indentWidth(void)
bool isEmpty(void)
bool isModified(void)
bool isRedoAvailable(void)
bool isUndoAvailable(void)
bool isUndoRedoEnabled(void)
QTextBlock lastBlock(void)
int lineCount(void)
void markContentsDirty(int position, int length)
int maximumBlockCount(void)
QString metaInformation(QTextDocument::MetaInformation info)
QTextObject *object(int objectIndex)
QTextObject *objectForFormat(QTextFormat f)
int pageCount(void)
QSizeF pageSize(void)
void print(QPrinter *printer)
void redo(QTextCursor *cursor)
QVariant resource(int type, QUrl name)
int revision(void)
QTextFrame *rootFrame(void)
void setDefaultCursorMoveStyle(Qt::CursorMoveStyle style)
void setDefaultFont(QFont font)
void setDefaultStyleSheet(QString sheet)
void setDefaultTextOption(QTextOption option)
void setDocumentLayout(QAbstractTextDocumentLayout * layout)
void setDocumentMargin(double margin)
void setHtml(QString html)
void setIndentWidth(double width)
void setMaximumBlockCount(int maximum)
void setMetaInformation(QTextDocument::MetaInformation info, QString string)
void setPageSize(QSizeF size)
void setPlainText(QString text)
void setTextWidth(double width)
void setUndoRedoEnabled(bool enable)
void setUseDesignMetrics(bool b)
QSizeF size(void)
qreal textWidth(void)
QString toHtml(QByteArray encoding)
QString toPlainText(void)
void undo(QTextCursor *cursor)
bool useDesignMetrics(void)
void setModified(bool m)

<class>
name: QTextBlock
para: void
</class>

<comment>
iterator begin(void)
</comment>
QTextBlockFormat blockFormat(void)
int blockFormatIndex(void)
int blockNumber(void)
QTextCharFormat charFormat(void)
int charFormatIndex(void)
void clearLayout(void)
bool contains(int position)
QTextDocument *document(void)
<comment>
iterator end(void)
</comment>
int firstLineNumber(void)
bool isValid(void)
bool isVisible(void)
QTextLayout * layout(void)
int length(void)
int lineCount(void)
QTextBlock next(void) # In RingQt use :  QTextBlock nextblock(void)
int position(void)
QTextBlock previous(void)
int revision(void)
void setLineCount(int count)
void setRevision(int rev)
void setUserData(QTextBlockUserData * data)
void setUserState(int state)
void setVisible(bool visible)
QString text(void)
int textDirection(void)
QTextList * textList(void)
QTextBlockUserData * userData(void)
int userState(void)


<class>
name: QTime
para: void
</class>

QTime addMSecs(int ms)
QTime addSecs(int s)
int elapsed(void)
int hour(void)
bool isNull(void)
bool isValid(void)
int minute(void)
int msec(void)
int msecsSinceStartOfDay(void)
int msecsTo(QTime)
int restart(void)
int second(void)
int secsTo(QTime)
bool setHMS(int h, int m, int s, int ms)
void start(void)
QString toString(QString)
QTime currentTime(void)
QTime fromMSecsSinceStartOfDay(int msecs)
QTime fromString(QString,QString)


<class>
name: QListWidgetItem
para: void
</class>

QBrush background(void)
Qt::CheckState checkState(void)
Qt::ItemFlags flags(void)
QFont font(void)
QBrush foreground(void)
QIcon icon(void)
bool isHidden(void)
bool isSelected(void)
QListWidget *listWidget(void)
void setBackground(QBrush brush)
void setCheckState(Qt::CheckState state)
void setFlags(Qt::ItemFlags flags)
void setFont(QFont font)
void setForeground(QBrush brush)
void setHidden(bool hide)
void setIcon(QIcon icon)
void setSelected(bool select)
void setSizeHint(QSize size)
void setStatusTip(QString statusTip)
void setText(QString text)
void setTextAlignment(int alignment)
void setToolTip(QString toolTip)
void setWhatsThis(QString whatsThis)
QSize sizeHint(void)
QString statusTip(void)
QString text(void)
int textAlignment(void)
QString toolTip(void)
int type(void)
QString whatsThis(void)

<class>
name: QSystemTrayIcon
para: void
</class>

QMenu *contextMenu(void)
QRect geometry(void)
QIcon icon(void)
bool isVisible(void)
void setContextMenu(QMenu *menu)
void setIcon(QIcon)
void setToolTip(QString)
QString toolTip(void)
void hide(void)
void setVisible(bool visible)
void show(void)
void showMessage(QString, QString, QSystemTrayIcon::MessageIcon, int millisecondsTimeoutHint)
bool isSystemTrayAvailable(void)
bool supportsMessages(void)

<class>
name: QDate
para: void
</class>

QDate addDays(int ndays)
QDate addMonths(int nmonths)
QDate addYears(int nyears)
int day(void)
int dayOfWeek(void)
int dayOfYear(void)
int daysInMonth(void)
int daysInYear(void)
int daysTo(QDate)
void getDate(int * year, int * month, int * day)
bool isNull(void)
bool isValid(void)
int month(void)
bool setDate(int year, int month, int day)
int toJulianDay(void)
QString toString(QString)
int weekNumber(int * yearNumber)
int year(void)
QDate currentDate(void)
QDate fromJulianDay(int jd)
QDate fromString(QString, QString)
bool isLeapYear(int year)
QString longDayName(int weekday)
QString longMonthName(int month)
QString shortDayName(int weekday)
QString shortMonthName(int month)

<class>
name: QTextCodec
nonew
</class>

<register>
QTextCodec *codecForName(const char *name)
void setCodecForLocale(QTextCodec *c)
</register>

<code>

RING_FUNC(ring_QTextCodec_codecForName)
{
	RING_API_RETCPOINTER( QTextCodec::codecForName(RING_API_GETSTRING(1)) , "QTextCodec");
}

RING_FUNC(ring_QTextCodec_setCodecForLocale)
{
	 QTextCodec::setCodecForLocale( (QTextCodec *) RING_API_GETCPOINTER(1,"QTextCodec"));
}

</code>


<class>
name: QSqlDatabase
para: void
</class>

void close(void)
bool commit(void)
QString connectOptions(void)
QString connectionName(void)
QString databaseName(void)
QSqlDriver *driver(void)
QString driverName(void)
QSqlQuery exec(QString)
QString hostName(void)
bool isOpen(void)
bool isOpenError(void)
bool isValid(void)
QSqlError lastError(void)
QSql::NumericalPrecisionPolicy numericalPrecisionPolicy(void)
bool open(void)
QString password(void)
int port(void)
QSqlIndex primaryIndex(QString)
QSqlRecord record(QString)
bool rollback(void)
void setConnectOptions(QString)
void setDatabaseName(QString)
void setHostName(QString)
void setNumericalPrecisionPolicy(QSql::NumericalPrecisionPolicy precisionPolicy)
void setPassword(QString)
void setPort(int port)
void setUserName(QString)
QStringList tables(QSql::TableType type)
bool transaction(void)
QString userName(void)
QSqlDatabase addDatabase(QString)
QSqlDatabase cloneDatabase(QSqlDatabase, QString)
QStringList connectionNames(void)
bool contains(QString)
QSqlDatabase database(QString , bool)
QStringList drivers(void)
bool isDriverAvailable(QString)
void registerSqlDriver(QString, QSqlDriverCreatorBase *)
void removeDatabase(QString)

<class>
name: QSqlDriver
para: void
abstract
</class>

<comment>
DbmsType dbmsType(void)
</comment>
bool isOpenError(void)
QSqlError lastError(void)
QSql::NumericalPrecisionPolicy numericalPrecisionPolicy(void)
void setNumericalPrecisionPolicy(QSql::NumericalPrecisionPolicy)

<class>
name: QSqlQuery
para: void
</class>

void addBindValue(QVariant, QSql::ParamType paramType)
int at(void)
void bindValue(QString, QVariant, QSql::ParamType paramType)
QVariant boundValue(QString)
void clear(void)
QSqlDriver * driver(void)
bool exec(QString)
bool exec@2(void)
bool execBatch(QSqlQuery::BatchExecutionMode mode)
QString executedQuery(void)
void finish(void)
bool first(void)
bool isActive(void)
bool isForwardOnly(void)
bool isNull(int field)
bool isSelect(void)
bool isValid(void)
bool last(void)
QSqlError lastError(void)
QVariant lastInsertId(void)
QString lastQuery(void)
bool next(void) # In RingQt use : bool movenext(void)
bool nextResult(void)
int numRowsAffected(void)
QSql::NumericalPrecisionPolicy numericalPrecisionPolicy(void)
bool prepare(QString)
bool previous(void)
QSqlRecord record(void)
QSqlResult *result(void)
bool seek(int index, bool relative)
void setForwardOnly(bool forward)
void setNumericalPrecisionPolicy(QSql::NumericalPrecisionPolicy precisionPolicy)
int size(void)
QVariant value(int index)

<class>
name: QSqlError
para: QString, QString, QSqlError::ErrorType
</class>

QString databaseText(void)
QString driverText(void)
bool isValid(void)
int number(void)
void setDatabaseText(QString)
void setDriverText(QString)
void setNumber(int number)
void setType(QSqlError::ErrorType type)
QString text(void)
QSqlError::ErrorType type(void)

<class>
name: QSqlIndex
para: QString, QString 
parent: QSqlRecord
</class>

void append(QSqlField, bool)
QString cursorName(void)
bool isDescending(int i)
QString name(void)
void setCursorName(QString)
void setDescending(int i, bool desc)
void setName(QString)

<class>
name: QSqlRecord
para: void
</class>

void append(QSqlField)
void clear(void)
void clearValues(void)
bool contains(QString)
int count(void)
QSqlField field(int index)
QString fieldName(int index)
int indexOf(QString)
void insert(int pos, QSqlField)
bool isEmpty(void)
bool isGenerated(QString)
bool isNull(QString)
void remove(int pos)
void replace(int pos, QSqlField)
void setGenerated(QString, bool generated)
void setNull(int index)
void setValue(int index, QVariant)
QVariant value(int index)

<class>
name: QSqlField
para:  QString,QVariant::Type
</class>

void clear(void)
QVariant defaultValue(void)
bool isAutoValue(void)
bool isGenerated(void)
bool isNull(void)
bool isReadOnly(void)
bool isValid(void)
int length(void)
QString name(void)
int precision(void)
RequiredStatus requiredStatus(void)
void setAutoValue(bool autoVal)
void setDefaultValue(QVariant)
void setGenerated(bool gen)
void setLength(int fieldLength)
void setName(QString)
void setPrecision(int precision)
void setReadOnly(bool readOnly)
void setRequired(bool required)
void setRequiredStatus(QSqlField::RequiredStatus required)
void setType(QVariant::Type type)
void setValue(QVariant)
QVariant::Type type(void)
QVariant value(void)

<class>
name: QSqlDriverCreatorBase
para: void
nonew
</class>

<class>
name: QVariant
para: void
</class>

bool canConvert(int targetTypeId)
void clear(void)
bool convert(int targetTypeId)
bool isNull(void)
bool isValid(void)
void swap(QVariant)
QBitArray toBitArray(void)
bool toBool(void)
QByteArray toByteArray(void)
QChar toChar(void)
QDate toDate(void)
QDateTime toDateTime(void)
double toDouble(bool *ok)
QEasingCurve toEasingCurve(void)
float toFloat(bool *ok)
int toInt(bool *ok)
QJsonArray toJsonArray(void)
QJsonDocument toJsonDocument(void)
QJsonObject toJsonObject(void)
QJsonValue toJsonValue(void)
QLine toLine(void)
QLineF toLineF(void)
QLocale toLocale(void)
qlonglong toLongLong(bool *ok)
QModelIndex toModelIndex(void)
<comment>
QPersistentModelIndex toPersistentModelIndex(void)
</comment>
QPoint toPoint(void)
QPointF toPointF(void)
qreal toReal(bool *ok)
QRect toRect(void)
QRectF toRectF(void)
QRegExp toRegExp(void)
QRegularExpression toRegularExpression(void)
QSize toSize(void)
QSizeF toSizeF(void)
QStringList toStringList(void)
QTime toTime(void)
uint toUInt(bool *ok)
qulonglong toULongLong(bool *ok)
QUrl toUrl(void)
QUuid toUuid(void)
QVariant::Type type(void)
const char *typeName(void)
int userType(void)
QString toString(void)

<class>
name: QNetworkRequest
para: QUrl
</class>

QVariant attribute(QNetworkRequest::Attribute, QVariant)
bool hasRawHeader(QByteArray)
QVariant header(QNetworkRequest::KnownHeaders)
QObject *originatingObject(void)
QNetworkRequest::Priority priority(void)
QByteArray rawHeader(QByteArray)
void setAttribute(QNetworkRequest::Attribute, QVariant)
void setHeader(QNetworkRequest::KnownHeaders, QVariant)
void setOriginatingObject(QObject *object)
void setPriority(QNetworkRequest::Priority priority)
void setRawHeader(QByteArray, QByteArray)
<comment>
void setSslConfiguration(QSslConfiguration)
QSslConfiguration sslConfiguration(void)
</comment>
void setUrl(QUrl)

void swap(QNetworkRequest)
QUrl url(void)

<class>
name: QNetworkAccessManager
para: QObject *
parent: QObject
codename: GNetworkAccessManager
passvmpointer
</class>

void setfinishedEvent(const char *)

const char *getfinishedEvent(void)

QNetworkConfiguration activeConfiguration(void)
QAbstractNetworkCache *cache(void)
void clearAccessCache(void)
QNetworkConfiguration configuration(void)
void connectToHost(QString, quint16)
<comment>
void connectToHostEncrypted(QString, quint16, QSslConfiguration)
</comment>
QNetworkCookieJar *cookieJar(void)
QNetworkReply *deleteResource(QNetworkRequest)
QNetworkReply *get(QNetworkRequest) # In RingQt use : QNetworkReply *getvalue(QNetworkRequest)
QNetworkReply *head(QNetworkRequest)
QNetworkAccessManager::NetworkAccessibility networkAccessible(void)
QNetworkReply *post(QNetworkRequest, QByteArray)
QNetworkProxy proxy(void)
QNetworkProxyFactory *proxyFactory(void)
QNetworkReply *put(QNetworkRequest, QByteArray) # In RingQt use : QNetworkReply *putvalue(QNetworkRequest, QByteArray)
QNetworkReply *sendCustomRequest(QNetworkRequest, QByteArray, QIODevice *)
void setCache(QAbstractNetworkCache *cache)
void setConfiguration(QNetworkConfiguration)
void setCookieJar(QNetworkCookieJar *cookieJar)
void setNetworkAccessible(QNetworkAccessManager::NetworkAccessibility accessible)
void setProxy(QNetworkProxy)
void setProxyFactory(QNetworkProxyFactory *factory)
QStringList supportedSchemes(void)

void geteventparameters(void)

<class>
name: QNetworkReply
para: void
parent: QIODevice
abstract
</class>

QVariant attribute(QNetworkRequest::Attribute code)
QNetworkReply::NetworkError error(void)
bool hasRawHeader(QByteArray)
QVariant header(QNetworkRequest::KnownHeaders header)
bool isFinished(void)
bool isRunning(void)
QNetworkAccessManager *manager(void)
QNetworkAccessManager::Operation operation(void)
QByteArray rawHeader(QByteArray)
qint64 readBufferSize(void)
QNetworkRequest request(void)
<comment>
void setSslConfiguration(QSslConfiguration)
QSslConfiguration sslConfiguration(void)
</comment>
QUrl url(void)

<class>
name: QPainterPath
para: void
</class>

void addEllipse(qreal x, qreal y, qreal width, qreal height)
void addPath(QPainterPath)
void addPolygon(QPolygonF)
void addRect(qreal x, qreal y, qreal width, qreal height)
void addRegion(QRegion)
void addRoundedRect(qreal x, qreal y, qreal w, qreal h, qreal xRadius, qreal yRadius, Qt::SizeMode mode)
void addText(qreal x, qreal y, QFont, QString)
qreal angleAtPercent(qreal t)
void arcMoveTo(qreal x, qreal y, qreal width, qreal height, qreal angle)
void arcTo(qreal x, qreal y, qreal width, qreal height, qreal startAngle, qreal sweepLength)
QRectF boundingRect(void)
void closeSubpath(void)
void connectPath(QPainterPath)
bool contains(QPointF)
QRectF controlPointRect(void)
void cubicTo(qreal c1X, qreal c1Y, qreal c2X, qreal c2Y, qreal endPointX, qreal endPointY)
QPointF currentPosition(void)
QPainterPath::Element elementAt(int index)
int elementCount(void)
Qt::FillRule fillRule(void)
QPainterPath intersected(QPainterPath)
bool intersects(QRectF)
bool isEmpty(void)
qreal length(void)
void lineTo(qreal x, qreal y)
void moveTo(qreal x, qreal y)
qreal percentAtLength(qreal len)
QPointF pointAtPercent(qreal t)
void quadTo(qreal cx, qreal cy, qreal endPointX, qreal endPointY)
void setElementPositionAt(int index, qreal x, qreal y)
void setFillRule(Qt::FillRule fillRule)
QPainterPath simplified(void)
qreal slopeAtPercent(qreal t)
QPainterPath subtracted(QPainterPath)
void swap(QPainterPath)
QPolygonF toFillPolygon(QTransform)
QPainterPath toReversed(void)
void translate(qreal dx, qreal dy)
QPainterPath translated(qreal dx, qreal dy)
QPainterPath united(QPainterPath)

<class>
name: QImage
para: void
</class>

bool allGray(void)
int bitPlaneCount(void)
uchar *bits(void)
int byteCount(void)
int bytesPerLine(void)
qint64 cacheKey(void)
QRgb color(int i)
int colorCount(void)
const uchar *constBits(void)
const uchar *constScanLine(int i)
QImage convertToFormat(QImage::Format format, Qt::ImageConversionFlags flags)
QImage copy(int x, int y, int width, int height)
QImage createAlphaMask(Qt::ImageConversionFlags flags)
QImage createHeuristicMask(bool clipTight)
QImage createMaskFromColor(QRgb color, Qt::MaskMode mode)
int depth(void)
int dotsPerMeterX(void)
int dotsPerMeterY(void)
void fill(QColor)
QImage::Format format(void)
bool hasAlphaChannel(void)
int height(void)
void invertPixels(QImage::InvertMode mode)
bool isGrayscale(void)
bool isNull(void)
bool load(QString, const char *format) # In RingQt use : bool loadimage(QString, const char *format)
bool loadFromData(QByteArray, const char * format)
QImage mirrored(bool horizontal, bool vertical)
QPoint offset(void)
QRgb pixel(int x, int y)
int pixelIndex(int x, int y)
QRect rect(void)
QImage rgbSwapped(void)
bool save(QString, const char * format, int quality)
QImage scaled(int width, int height, Qt::AspectRatioMode aspectRatioMode, Qt::TransformationMode transformMode)
QImage scaledToHeight(int height, Qt::TransformationMode mode )
QImage scaledToWidth(int width, Qt::TransformationMode mode)
uchar *scanLine(int i)
void setColor(int index, QRgb colorValue)
void setColorCount(int colorCount)
void setDotsPerMeterX(int x)
void setDotsPerMeterY(int y)
void setOffset(QPoint)
void setPixel(int x, int y, uint index_or_rgb)
void setText(QString,QString)
QSize size(void)
void swap(QImage)
QString text(QString)
QStringList textKeys(void)
QImage transformed(QMatrix, Qt::TransformationMode mode)
bool valid(int x, int y)
int width(void)

<class>
name: RingCodeHighlighter
para: QTextDocument *parent
codename: Highlighter
</class>

void setColors(QColor c1,QColor c2,QColor c3,QColor c4,QColor c5)
void setKeywordsBold(int nStatus)

<class>
name: QXmlStreamReader
para: void
</class>

void addData(QByteArray)
void addData@2(QString)
void addData@3(const char * data)
void addExtraNamespaceDeclaration(QXmlStreamNamespaceDeclaration)
void addExtraNamespaceDeclarations(QXmlStreamNamespaceDeclarations)
bool atEnd(void)
QXmlStreamAttributes attributes(void)
qint64 characterOffset(void)
void clear(void)
qint64 columnNumber(void)
QIODevice *device(void) 
QStringRef documentEncoding(void)
QStringRef documentVersion(void)
QStringRef dtdName(void)
QStringRef dtdPublicId(void)
QStringRef dtdSystemId(void)
QXmlStreamEntityDeclarations entityDeclarations(void)
QXmlStreamEntityResolver *entityResolver(void)
Error error(void)
QString errorString(void)
bool hasError(void)
bool isCDATA(void)
bool isCharacters(void)
bool isComment(void)
bool isDTD(void)
bool isEndDocument(void)
bool isEndElement(void)
bool isEntityReference(void)
bool isProcessingInstruction(void)
bool isStandaloneDocument(void)
bool isStartDocument(void)
bool isStartElement(void)
bool isWhitespace(void)
qint64 lineNumber(void)
QStringRef name(void)
QXmlStreamNamespaceDeclarations namespaceDeclarations(void)
bool namespaceProcessing(void)
QStringRef namespaceUri(void)
QXmlStreamNotationDeclarations notationDeclarations(void)
QStringRef prefix(void)
QStringRef processingInstructionData(void)
QStringRef processingInstructionTarget(void)
QStringRef qualifiedName(void)
void raiseError(QString)
QString readElementText(QXmlStreamReader::ReadElementTextBehaviour)
TokenType readNext(void)
bool readNextStartElement(void)
void setDevice(QIODevice *device)
void setEntityResolver(QXmlStreamEntityResolver *resolver)
void setNamespaceProcessing(bool)
void skipCurrentElement(void)
QStringRef text(void)
QString tokenString(void)
TokenType tokenType(void)


<class>
name: QXmlStreamWriter
para: void
</class>

bool autoFormatting(void)
int autoFormattingIndent(void)
QTextCodec *codec(void)
QIODevice *device(void)
bool hasError(void)
void setAutoFormatting(bool enable)
void setAutoFormattingIndent(int spacesOrTabs)
void setCodec(QTextCodec *codec)
void setCodec@2(const char *codecName)
void setDevice(QIODevice *device)
void writeAttribute(QString, QString,QString)
void writeAttribute@2(QString, QString)
void writeAttribute@3(QXmlStreamAttribute)
void writeAttributes(QXmlStreamAttributes)
void writeCDATA(QString text)
void writeCharacters(QString text)
void writeComment(QString text)
void writeCurrentToken(QXmlStreamReader reader)
void writeDTD(QString dtd)
void writeDefaultNamespace(QString namespaceUri)
void writeEmptyElement(QString namespaceUri, QString name)
void writeEmptyElement@2(QString qualifiedName)
void writeEndDocument(void)
void writeEndElement(void)
void writeEntityReference(QString name)
void writeNamespace(QString namespaceUri, QString prefix)
void writeProcessingInstruction(QString target, QString data)
void writeStartDocument(QString version)
void writeStartDocument@2(QString version, bool standalone)
void writeStartDocument@3(void)
void writeStartElement(QString namespaceUri, QString name)
void writeStartElement@2(QString qualifiedName)
void writeTextElement(QString namespaceUri, QString name, QString text)
void writeTextElement@2(QString qualifiedName, QString text)

<class>
name: QXmlStreamNotationDeclaration
para: void
</class>

QStringRef name(void)
QStringRef publicId(void)
QStringRef systemId(void)

<class>
name: QXmlStreamNamespaceDeclaration
para: void
</class>

QStringRef namespaceUri(void)
QStringRef prefix(void)

<class>
name: QXmlStreamEntityResolver
para: void
</class>

<class>
name: QXmlStreamEntityDeclaration
para: void
</class>

QStringRef name(void)
QStringRef notationName(void)
QStringRef publicId(void)
QStringRef systemId(void)
QStringRef value(void)

<class>
name: QXmlStreamAttributes
para: void
</class>

void append(QString  namespaceUri, QString  name, QString  value)
void append@2(QString  qualifiedName, QString  value)
bool hasAttribute(QString  qualifiedName)
bool hasAttribute@2(QLatin1String qualifiedName)
bool hasAttribute@3(QString  namespaceUri, QString  name)
QStringRef value(QString  namespaceUri, QString  name)
QStringRef value@2(QString  namespaceUri, QLatin1String name)
QStringRef value@3(QLatin1String namespaceUri, QLatin1String name)
QStringRef value@4(QString  qualifiedName)
QStringRef value@5(QLatin1String qualifiedName)


<class>
name: QXmlStreamAttribute
para: void
</class>

bool isDefault(void)
QStringRef name(void)
QStringRef namespaceUri(void)
QStringRef prefix(void)
QStringRef qualifiedName(void)
QStringRef value(void)

<class>
name: QThread
para: QObject *
parent: QObject
codename: GThread
passvmpointer
</class>

QAbstractEventDispatcher *eventDispatcher(void)
void exit(int returnCode) # In RingQt use : void exitfromthread(int returnCode)
bool isFinished(void)
bool isInterruptionRequested(void)
bool isRunning(void)

<comment>
int loopLevel(void)
</comment>

QThread::Priority priority(void)
void requestInterruption(void)
void setEventDispatcher(QAbstractEventDispatcher *eventDispatcher)
void setPriority(QThread::Priority priority)
void setStackSize(uint stackSize)
uint stackSize(void)
bool wait(unsigned long time)
void quit(void)
void start(QThread::Priority priority)
void terminate(void)
QThread *currentThread(void)
Qt::HANDLE currentThreadId(void)
int idealThreadCount(void)
void msleep(unsigned long msecs)
void sleep(unsigned long secs)
void usleep(unsigned long usecs)
void yieldCurrentThread(void)

void setStartedEvent(const char *)
void setFinishedEvent(const char *)

const char *getStartedEvent(void)
const char *getFinishedEvent(void)

<class>
name: QThreadPool
para: void
parent: QObject
</class>

int activeThreadCount(void)

<comment>
void cancel(QRunnable * runnable)
</comment>

void clear(void)
int expiryTimeout(void)
int maxThreadCount(void)
void releaseThread(void)
void reserveThread(void)
void setExpiryTimeout(int expiryTimeout)
void setMaxThreadCount(int maxThreadCount)
void start(QRunnable * runnable, int priority)
bool tryStart(QRunnable * runnable)
bool waitForDone(int msecs)
QThreadPool *globalInstance(void)


<class>
name: QRegularExpression
para: void
</class>

int captureCount(void)
QString errorString(void)
QRegularExpressionMatchIterator globalMatch(QString  subject, int offset, QRegularExpression::MatchType matchType, QRegularExpression::MatchOptions matchOptions)

<comment>
QRegularExpressionMatchIterator globalMatch@2(QStringRef  subjectRef, int offset, QRegularExpression::MatchType matchType, QRegularExpression::MatchOptions matchOptions)
</comment>

bool isValid(void)
QRegularExpressionMatch match(QString  subject, int offset, QRegularExpression::MatchType matchType, QRegularExpression::MatchOptions matchOptions)

<comment>
QRegularExpressionMatch match@2(QStringRef  subjectRef, int offset, QRegularExpression::MatchType matchType, QRegularExpression::MatchOptions matchOptions)
</comment>

QStringList namedCaptureGroups(void)

<comment>
void optimize(void)
</comment>

QString pattern(void)
int patternErrorOffset(void)
QRegularExpression::PatternOptions patternOptions(void)
void setPattern(QString  pattern)
void setPatternOptions(QRegularExpression::PatternOptions options)
void swap(QRegularExpression  other)

<class>
name: QRegularExpressionMatch
para: void
</class>

QString captured(int nth)
QString captured@2(const QString  name)
int capturedEnd(int nth)
int capturedEnd@2(const QString  name)
int capturedLength(int nth)
int capturedLength@2(const QString  name)
QStringRef capturedRef(int nth)
QStringRef capturedRef@2(const QString  name)
int capturedStart(int nth)
int capturedStart@2(const QString  name)
QStringList capturedTexts(void)
bool hasMatch(void)
bool hasPartialMatch(void)
bool isValid(void)
int lastCapturedIndex(void)
QRegularExpression::MatchOptions matchOptions(void)
QRegularExpression::MatchType matchType(void)
QRegularExpression regularExpression(void)
void swap(QRegularExpressionMatch  other)

<class>
name: QRegularExpressionMatchIterator
para: void
</class>

bool hasNext(void)
bool isValid(void)
QRegularExpression::MatchOptions matchOptions(void)
QRegularExpression::MatchType matchType(void)
QRegularExpressionMatch next(void) # In RingQt use : QRegularExpressionMatch nextitem(void)
QRegularExpressionMatch peekNext(void)
QRegularExpression regularExpression(void)
void swap(QRegularExpressionMatchIterator other)

<class>
name: QJsonArray 
para: void
</class>

void append(QJsonValue  value)
QJsonValue at(int i)

<comment>
iterator begin(void)
const_iterator begin(void)
const_iterator constBegin(void)
const_iterator constEnd(void)
</comment>

bool contains(QJsonValue  value)
int count(void)
bool empty(void)

<comment>
iterator end(void)
const_iterator end@2(void)
iterator erase(iterator it)
</comment>

QJsonValue first(void)
void insert(int i, QJsonValue  value)

<comment>
iterator insert@2(iterator before, QJsonValue  value)
</comment>

bool isEmpty(void)
QJsonValue last(void)
void pop_back(void)
void pop_front(void)
void prepend(QJsonValue  value)
void push_back(QJsonValue  value)
void push_front(QJsonValue  value)
void removeAt(int i)
void removeFirst(void)
void removeLast(void)
void replace(int i, QJsonValue  value)
int size(void)
QJsonValue takeAt(int i)
QVariantList toVariantList(void)
QJsonArray fromStringList(QStringList  list)
QJsonArray fromVariantList(QVariantList  list)


<class>
name: QJsonDocument
para: void
</class>

QJsonArray array(void)
bool isArray(void)
bool isEmpty(void)
bool isNull(void)
bool isObject(void)
QJsonObject object(void)
const char * rawData(int * size)
void setArray(QJsonArray  array)
void setObject(QJsonObject  object)
QByteArray toBinaryData(void)
QByteArray toJson(QJsonDocument::JsonFormat format)
QVariant toVariant(void)

QJsonDocument fromBinaryData( QByteArray  data, QJsonDocument::DataValidation validation)
QJsonDocument fromJson( QByteArray  json, QJsonParseError * error)
QJsonDocument fromRawData( char * data, int size, QJsonDocument::DataValidation validation)
QJsonDocument fromVariant( QVariant  variant)


<class>
name: QJsonObject
para: void
</class>


<comment>
iterator begin(void)
const_iterator begin@2(void)
const_iterator constBegin(void)
const_iterator constEnd(void)
const_iterator constFind(QString  key)
</comment>

bool contains(QString  key)
int count(void)
bool empty(void)

<comment>
iterator end(void)
const_iterator end(void)
iterator erase(iterator it)
iterator find(QString  key)
const_iterator find(QString  key)
iterator insert(QString  key, QJsonValue  value)
</comment>

bool isEmpty(void)
QStringList keys(void)
int length(void)
void remove(QString  key)
int size(void)
QJsonValue take(QString  key)

<comment>
QVariantHash toVariantHash(void)
QJsonObject fromVariantHash(QVariantHash  hash)
</comment>

QVariantMap toVariantMap(void)
QJsonValue value(QString  key)

QJsonObject fromVariantMap(QVariantMap  map)


<class>
name: QJsonParseError
para: void
</class>

QString errorString(void)

<class>
name: QJsonValue
para: void
</class>

bool isArray(void)
bool isBool(void)
bool isDouble(void)
bool isNull(void)
bool isObject(void)
bool isString(void)
bool isUndefined(void)
QJsonArray toArray(QJsonArray  defaultValue)
QJsonArray toArray@2(void)
bool toBool(bool defaultValue  )
double toDouble(double defaultValue )
int toInt(int defaultValue )
QJsonObject toObject(QJsonObject  defaultValue)
QJsonObject toObject@2(void)
QString toString(QString  defaultValue  )
QVariant toVariant(void)
QJsonValue::Type type(void)
QJsonValue fromVariant(QVariant  variant)


<class>
name: QPlainTextEdit
para: QWidget *
parent: QAbstractScrollArea
codename: GPlainTextEdit
passvmpointer
</class>

QString anchorAt(QPoint pos)
bool backgroundVisible(void)
int blockCount(void)
bool canPaste(void)
bool centerOnScroll(void)
QMenu * createStandardContextMenu(void)

<comment>
QMenu * createStandardContextMenu@2(QPoint position)
</comment>

QTextCharFormat currentCharFormat(void)
QTextCursor cursorForPosition(QPoint pos)
QRect cursorRect(QTextCursor cursor)
QRect cursorRect@2(void)
int cursorWidth(void)
QTextDocument * document(void)
QString documentTitle(void)
void ensureCursorVisible(void)
QList<QTextEdit::ExtraSelection> extraSelections(void)
bool find(QString exp, QTextDocument::FindFlags options)

<comment>
bool find@2(QRegExp exp, QTextDocument::FindFlags options)
</comment>

bool isReadOnly(void)
bool isUndoRedoEnabled(void)
QPlainTextEdit::LineWrapMode lineWrapMode(void)

<comment>
virtual QVariant loadResource(int type, QUrl name)
</comment>

int maximumBlockCount(void)
void mergeCurrentCharFormat(QTextCharFormat modifier)
void moveCursor(QTextCursor::MoveOperation operation, QTextCursor::MoveMode mode)
bool overwriteMode(void)

<comment>
QString placeholderText(void)
</comment>

void print(QPagedPaintDevice *printer)
void setBackgroundVisible(bool visible)
void setCenterOnScroll(bool enabled)
void setCurrentCharFormat(QTextCharFormat format)
void setCursorWidth(int width)
void setDocument(QTextDocument *document)
void setDocumentTitle(QString title)
void setExtraSelections(QList<QTextEdit::ExtraSelection> selections)
void setLineWrapMode(QPlainTextEdit::LineWrapMode mode)
void setMaximumBlockCount(int maximum)
void setOverwriteMode(bool overwrite)

<comment>
void setPlaceholderText(QString placeholderText)
</comment>

void setReadOnly(bool ro)
void setTabChangesFocus(bool b)
void setTabStopWidth(int width)
void setTextCursor(QTextCursor cursor)
void setTextInteractionFlags(Qt::TextInteractionFlags flags)
void setUndoRedoEnabled(bool enable)
void setWordWrapMode(QTextOption::WrapMode policy)
bool tabChangesFocus(void)
int tabStopWidth(void)
QTextCursor textCursor(void)
Qt::TextInteractionFlags textInteractionFlags(void)
QString toPlainText(void)
QTextOption::WrapMode wordWrapMode(void)

void appendHtml(QString html)
void appendPlainText(QString text)
void centerCursor(void)
void clear(void)
void copy(void)
void cut(void)
void insertPlainText(QString text)
void paste(void)
void redo(void)
void selectAll(void)
void setPlainText(QString text)
void undo(void)
void zoomIn(int range)
void zoomOut(int range)

void setblockCountChangedEvent(const char *cStr)
void setcopyAvailableEvent(const char *cStr)
void setcursorPositionChangedEvent(const char *cStr)
void setmodificationChangedEvent(const char *cStr)
void setredoAvailableEvent(const char *cStr)
void setselectionChangedEvent(const char *cStr)
void settextChangedEvent(const char *cStr)
void setundoAvailableEvent(const char *cStr)
void setupdateRequestEvent(const char *cStr)

const char *getblockCountChangedEvent(void)
const char *getcopyAvailableEvent(void)
const char *getcursorPositionChangedEvent(void)
const char *getmodificationChangedEvent(void)
const char *getredoAvailableEvent(void)
const char *getselectionChangedEvent(void)
const char *gettextChangedEvent(void)
const char *getundoAvailableEvent(void)
const char *getupdateRequestEvent(void)

<register>
void cyanline(void)
</register>

<code>
RING_FUNC(ring_QPlainTextEdit_cyanline)
{
	RING_API_IGNORECPOINTERTYPE ;
	if ( ! RING_API_ISPOINTER(1) ) {
		RING_API_ERROR(RING_API_BADPARATYPE);
		return ;
	}

	QPlainTextEdit *editor;
	editor = (QPlainTextEdit *) RING_API_GETCPOINTER(1,"QTextEdit *");

	QTextEdit::ExtraSelection highlight;
	highlight.cursor = editor->textCursor();
	highlight.format.setProperty(QTextFormat::FullWidthSelection, true);
	highlight.format.setBackground( Qt::cyan );

	QList<QTextEdit::ExtraSelection> extras;
	extras << highlight;
	editor->setExtraSelections( extras );
}
</code>

<register>
void setactivelinecolor(QColor)
</register>

<code>
RING_FUNC(ring_QPlainTextEdit_setactivelinecolor)
{
	RING_API_IGNORECPOINTERTYPE ;
	if ( RING_API_PARACOUNT != 2 ) {
		RING_API_ERROR(RING_API_MISS2PARA);
		return ;
	}
	if ( ! RING_API_ISPOINTER(1) ) {
		RING_API_ERROR(RING_API_BADPARATYPE);
		return ;
	}

	QPlainTextEdit *editor;
	editor = (QPlainTextEdit *) RING_API_GETCPOINTER(1,"QTextEdit *");

	QTextEdit::ExtraSelection highlight;
	highlight.cursor = editor->textCursor();
	highlight.format.setProperty(QTextFormat::FullWidthSelection, true);
	highlight.format.setBackground( * (QColor *) RING_API_GETCPOINTER(2,"QColor") );

	QList<QTextEdit::ExtraSelection> extras;
	extras << highlight;
	editor->setExtraSelections( extras );
}
</code>

<class>
name: CodeEditor
para: QWidget *
parent: QPlainTextEdit
passvmpointer
</class>

void setCompleter(QCompleter *c)
QCompleter *completer(void)
void setLineNumbersAreaColor(QColor oColor)
void setLineNumbersAreaBackColor(QColor oColor)


<class>
name: QGridLayout
para: void
</class>


void addItem(QLayoutItem * item, int row, int column, int rowSpan , int columnSpan , Qt::Alignment alignment )
void addLayout(QLayout * layout, int row, int column, Qt::Alignment alignment )
void addLayout@2(QLayout * layout, int row, int column, int rowSpan, int columnSpan, Qt::Alignment alignment )
void addWidget(QWidget * widget, int row, int column, Qt::Alignment alignment )
void addWidget@2(QWidget * widget, int fromRow, int fromColumn, int rowSpan, int columnSpan, Qt::Alignment alignment )
QRect cellRect(int row, int column)
int columnCount(void)
int columnMinimumWidth(int column)
int columnStretch(int column)
void getItemPosition(int index, int * row, int * column, int * rowSpan, int * columnSpan)
int horizontalSpacing(void)
QLayoutItem * itemAtPosition(int row, int column)
Qt::Corner originCorner(void)
int rowCount(void)
int rowMinimumHeight(int row)
int rowStretch(int row)
void setColumnMinimumWidth(int column, int minSize)
void setColumnStretch(int column, int stretch)
void setHorizontalSpacing(int spacing)
void setOriginCorner(Qt::Corner corner)
void setRowMinimumHeight(int row, int minSize)
void setRowStretch(int row, int stretch)
void setSpacing(int spacing)
void setVerticalSpacing(int spacing)
int spacing(void)
int verticalSpacing(void)

<class>
name: QTextCharFormat 
para: void
</class>

QString anchorHref(void)
QStringList anchorNames(void)
QFont font(void)
QFont::Capitalization fontCapitalization(void)
QString fontFamily(void)
bool fontFixedPitch(void)
QFont::HintingPreference fontHintingPreference(void)
bool fontItalic(void)
bool fontKerning(void)
qreal fontLetterSpacing(void)
QFont::SpacingType fontLetterSpacingType(void)
bool fontOverline(void)
qreal fontPointSize(void)
int fontStretch(void)
bool fontStrikeOut(void)
QFont::StyleHint fontStyleHint(void)
QFont::StyleStrategy fontStyleStrategy(void)
bool fontUnderline(void)
int fontWeight(void)
qreal fontWordSpacing(void)
bool isAnchor(void)
bool isValid(void)
void setAnchor(bool anchor)
void setAnchorHref( QString   value)
void setAnchorNames( QStringList   names)
<comment>
void setFont( QFont   font, QTextCharFormat::FontPropertiesInheritanceBehavior behavior)
</comment>
void setFont@2( QFont   font)
void setFontCapitalization(QFont::Capitalization capitalization)
void setFontFamily( QString   family)
void setFontFixedPitch(bool fixedPitch)
void setFontHintingPreference(QFont::HintingPreference hintingPreference)
void setFontItalic(bool italic)
void setFontKerning(bool enable)
void setFontLetterSpacing(qreal spacing)
void setFontLetterSpacingType(QFont::SpacingType letterSpacingType)
void setFontOverline(bool overline)
void setFontPointSize(qreal size)
void setFontStretch(int factor)
void setFontStrikeOut(bool strikeOut)
void setFontStyleHint(QFont::StyleHint hint, QFont::StyleStrategy strategy )
void setFontStyleStrategy(QFont::StyleStrategy strategy)
void setFontUnderline(bool underline)
void setFontWeight(int weight)
void setFontWordSpacing(qreal spacing)
void setTextOutline( QPen   pen)
void setToolTip( QString   text)
void setUnderlineColor( QColor   color)
void setUnderlineStyle(QTextCharFormat::UnderlineStyle style)
void setVerticalAlignment(QTextCharFormat::VerticalAlignment alignment)
QPen textOutline(void)
QString toolTip(void)
QColor underlineColor(void)
QTextCharFormat::UnderlineStyle underlineStyle(void)
QTextCharFormat::VerticalAlignment verticalAlignment(void)


<class>
name: QCameraViewfinder
para: QWidget *
parent: QVideoWidget
</class>


<class>
name: QGraphicsVideoItem
para: void
</class>

Qt::AspectRatioMode aspectRatioMode(void)
QSizeF nativeSize(void)
QPointF offset(void)
void setAspectRatioMode(Qt::AspectRatioMode mode)
void setOffset(QPointF offset)
void setSize(QSizeF size)
QSizeF size(void)

<class>
name: QVideoWidgetControl
parent: QMediaControl
abstract
</class>

<class>
name: QCamera
para: void
parent: QMediaObject
</class>

QCamera::CaptureModes captureMode(void)
QCamera::Error error(void)
QString errorString(void)
QCameraExposure * exposure(void)
QCameraFocus * focus(void)
QCameraImageProcessing * imageProcessing(void)
bool isCaptureModeSupported(QCamera::CaptureModes mode)
QCamera::LockStatus lockStatus(void)
QCamera::LockStatus lockStatus@2(QCamera::LockType lockType)
QCamera::LockTypes requestedLocks(void)
void setViewfinder(QVideoWidget * viewfinder)
void setViewfinder@2(QGraphicsVideoItem * viewfinder)
void setViewfinder@3(QAbstractVideoSurface * surface)

<comment>
void setViewfinderSettings( QCameraViewfinderSettings   settings)
</comment>

QCamera::State state(void)
QCamera::Status status(void)
QCamera::LockTypes supportedLocks(void)

<comment>
QList<QCamera::FrameRateRange> supportedViewfinderFrameRateRanges( QCameraViewfinderSettings   settings )
QList<QVideoFrame::PixelFormat> supportedViewfinderPixelFormats( QCameraViewfinderSettings   settings )
QList<QSize> supportedViewfinderResolutions( QCameraViewfinderSettings   settings )
QList<QCameraViewfinderSettings> supportedViewfinderSettings( QCameraViewfinderSettings   settings )
QCameraViewfinderSettings viewfinderSettings(void)
</comment>

void load(void)
void searchAndLock(void)
void searchAndLock@2(QCamera::LockTypes locks)
void setCaptureMode(QCamera::CaptureModes mode)
void start(void)
void stop(void)
void unload(void)
void unlock(void)
void unlock@2(QCamera::LockTypes locks)


<class>
name: QCameraImageCapture
para: QMediaObject * mediaObject
</class>

QMultimedia::AvailabilityStatus availability(void)
QVideoFrame::PixelFormat bufferFormat(void)
QCameraImageCapture::CaptureDestinations captureDestination(void)
QImageEncoderSettings encodingSettings(void)
QCameraImageCapture::Error error(void)
QString errorString(void)
QString imageCodecDescription( QString   codec)
bool isAvailable(void)
bool isCaptureDestinationSupported(QCameraImageCapture::CaptureDestinations destination)
bool isReadyForCapture(void)
void setBufferFormat( QVideoFrame::PixelFormat format)
void setCaptureDestination(QCameraImageCapture::CaptureDestinations destination)
void setEncodingSettings( QImageEncoderSettings   settings)
QList<QVideoFrame::PixelFormat> supportedBufferFormats(void)
QStringList supportedImageCodecs(void)
QList<QSize> supportedResolutions( QImageEncoderSettings   settings , bool * continuous )
void cancelCapture(void)
int capture( QString   file )


<class>
name: QMediaObject
para: void
parent: QWidget
abstract
</class>

QStringList availableMetaData(void)
bool isMetaDataAvailable(void)
QVariant metaData( QString   key)
int notifyInterval(void)
void setNotifyInterval(int milliSeconds)


<class>
name: QHeaderView
para: Qt::Orientation, QWidget *
parent: QAbstractItemView
codename: GHeaderView
passvmpointer
</class>

bool cascadingSectionResizes(void)
int count(void)
Qt::Alignment defaultAlignment(void)
int defaultSectionSize(void)
int hiddenSectionCount(void)
void hideSection(int logicalIndex)
bool highlightSections(void)
bool isSectionHidden(int logicalIndex)
bool isSortIndicatorShown(void)
int length(void)
int logicalIndex(int visualIndex)
int logicalIndexAt(int position)
int logicalIndexAt@2(int x, int y)
int logicalIndexAt@3( QPoint   pos)
int maximumSectionSize(void)
int minimumSectionSize@2(void)
void moveSection(int from, int to)
int offset(void)
Qt::Orientation orientation(void)

<comment>
void resetDefaultSectionSize(void)
</comment>

int resizeContentsPrecision(void)
void resizeSection(int logicalIndex, int size)
void resizeSections(QHeaderView::ResizeMode mode)
bool restoreState( QByteArray   state)
QByteArray saveState(void)
int sectionPosition(int logicalIndex)
QHeaderView::ResizeMode sectionResizeMode(int logicalIndex)
int sectionSize(int logicalIndex)
int sectionSizeHint(int logicalIndex)
int sectionViewportPosition(int logicalIndex)
bool sectionsClickable(void)
bool sectionsHidden(void)
bool sectionsMovable(void)
bool sectionsMoved(void)
void setCascadingSectionResizes(bool enable)
void setDefaultAlignment(Qt::Alignment alignment)
void setDefaultSectionSize(int size)
void setHighlightSections(bool highlight)
void setMaximumSectionSize(int size)
void setMinimumSectionSize(int size)
void setResizeContentsPrecision(int precision)
void setSectionHidden(int logicalIndex, bool hide)
void setSectionResizeMode(QHeaderView::ResizeMode mode)
void setSectionResizeMode@2(int logicalIndex, QHeaderView::ResizeMode mode)
void setSectionsClickable(bool clickable)
void setSectionsMovable(bool movable)
void setSortIndicator(int logicalIndex, Qt::SortOrder order)
void setSortIndicatorShown(bool show)
void setStretchLastSection(bool stretch)
void showSection(int logicalIndex)
Qt::SortOrder sortIndicatorOrder(void)
int sortIndicatorSection(void)
bool stretchLastSection(void)
int stretchSectionCount(void)
void swapSections(int first, int second)
int visualIndex(int logicalIndex)
int visualIndexAt(int position)

void headerDataChanged(Qt::Orientation orientation, int logicalFirst, int logicalLast)
void setOffset(int offset)
void setOffsetToLastSection(void)
void setOffsetToSectionPosition(int visualSectionNumber)

void setgeometriesChangedEvent(const char *)
void setsectionClickedEvent(const char *)
void setsectionCountChangedEvent(const char *)
void setsectionDoubleClickedEvent(const char *)
void setsectionEnteredEvent(const char *)
void setsectionHandleDoubleClickedEvent(const char *)
void setsectionMovedEvent(const char *)
void setsectionPressedEvent(const char *)
void setsectionResizedEvent(const char *)
void setsortIndicatorChangedEvent(const char *)

const char *getgeometriesChangedEvent(void)
const char *getsectionClickedEvent(void)
const char *getsectionCountChangedEvent(void)
const char *getsectionDoubleClickedEvent(void)
const char *getsectionEnteredEvent(void)
const char *getsectionHandleDoubleClickedEvent(void)
const char *getsectionMovedEvent(void)
const char *getsectionPressedEvent(void)
const char *getsectionResizedEvent(void)
const char *getsortIndicatorChangedEvent(void)

void geteventparameters(void)

<class>
name: QFontMetrics
para: QFont
</class>

int ascent(void)
int averageCharWidth(void)
QRect boundingRect(QChar ch)
QRect boundingRect@2( QString   text)
QRect boundingRect@3(int x, int y, int width, int height, int flags,  QString   text, int tabStops , int * tabArray )
QRect boundingRect@4( QRect   rect, int flags,  QString   text, int tabStops , int * tabArray )
int descent(void)
QString elidedText( QString   text, Qt::TextElideMode mode, int width, int flags )
int height(void)
bool inFont(QChar ch)
bool inFontUcs4(uint character)
int leading(void)
int leftBearing(QChar ch)
int lineSpacing(void)
int lineWidth(void)
int maxWidth(void)
int minLeftBearing(void)
int minRightBearing(void)
int overlinePos(void)
int rightBearing(QChar ch)
QSize size(int flags,  QString   text, int tabStops , int * tabArray )
int strikeOutPos(void)
QRect tightBoundingRect( QString   text)
int underlinePos(void)
int width( QString   text, int len )
int width@2(QChar ch)
int xHeight(void)


<class>
name: QSplashScreen
para: QPixmap
parent: QWidget
</class>

void  finish(QWidget *mainWin)
QPixmap pixmap(void)
void repaint(void)
void setPixmap(QPixmap pixmap)

void clearMessage(void)
void showMessage(QString message, int alignment ,QColor color)

<class>
name: QBoxLayout
para: QBoxLayout::Direction dir, QWidget *parent
parent: QLayout
</class>

void  addLayout(QLayout * layout, int stretch )
void  addSpacerItem(QSpacerItem * spacerItem)
void  addSpacing(int size)
void  addStretch(int stretch )
void  addStrut(int size)
void  addWidget(QWidget * widget, int stretch , Qt::Alignment alignment )
QBoxLayout::Direction  direction(void)
void  insertLayout(int index, QLayout * layout, int stretch )
void  insertSpacerItem(int index, QSpacerItem * spacerItem)
void  insertSpacing(int index, int size)
void  insertStretch(int index, int stretch )
void  insertWidget(int index, QWidget * widget, int stretch , Qt::Alignment alignment )
void  setDirection(QBoxLayout::Direction direction)
void  setSpacing(int spacing)
void  setStretch(int index, int stretch)
bool  setStretchFactor(QWidget * widget, int stretch)
bool  setStretchFactor@2(QLayout * layout, int stretch)
int  spacing(void)
int  stretch(int index)


<class>
name: QLayout
para: QWidget *
parent: QObject
abstract
</class>

bool activate(void)
void addWidget(QWidget *w)
QMargins contentsMargins(void)
QRect contentsRect(void)
void getContentsMargins(int *left, int *top, int *right, int *bottom)
bool isEnabled(void)
QWidget *menuBar(void)
QWidget *parentWidget(void)
void removeItem(QLayoutItem *item)
void removeWidget(QWidget *widget)
bool setAlignment(QWidget *w, Qt::Alignment alignment)
void setAlignment@2(Qt::Alignment alignment)
bool setAlignment@3(QLayout *l, Qt::Alignment alignment)
void setContentsMargins(int left, int top, int right, int bottom)
void setContentsMargins@2(QMargins margins)
void setEnabled(bool enable)
void setMenuBar(QWidget *widget)
void setSizeConstraint(QLayout::SizeConstraint)
void setSpacing(int)
QLayout::SizeConstraint sizeConstraint(void)
int spacing(void)
void update(void)

QSize  closestAcceptableSize( QWidget * widget,  QSize   size)


<class>
name: QLinearGradient
para: void
parent: QGradient
</class>

QPointF finalStop(void)
void setFinalStop(QPointF stop)
void setFinalStop@2(qreal x,qreal y)
void setStart(QPointF start)
void setStart@2(qreal x,qreal y)
QPointF start(void)


<class>
name: QGradient
para: void
abstract
</class>


QGradient::CoordinateMode coordinateMode(void)
void setColorAt(qreal position,  QColor   color)
void setCoordinateMode(QGradient::CoordinateMode mode)
void setSpread(QGradient::Spread method)
void setStops(QGradientStops stopPoints)
QGradient::Spread spread(void)
QGradientStops stops(void)
QGradient::Type type(void)

<class>
name: QPointF
para: void
</class>

bool isNull(void)
qreal manhattanLength(void)
qreal rx(void)
qreal ry(void)
void setX(qreal x)
void setY(qreal y)
QPoint toPoint(void)
qreal x(void)
qreal y(void)

<class>
name: QPoint
para: void
</class>

bool isNull(void)
int manhattanLength(void)
int rx(void)
int ry(void)
void setX(int x)
void setY(int y)
int x(void)
int y(void)

<comment>

//<class>
name: QModelIndex
para: void
//</class>

QModelIndex child(int row, int column)
int column(void)
QVariant data(int role )
Qt::ItemFlags flags(void)
qint64 internalId(void)
void *internalPointer(void)
bool isValid(void)
QAbstractItemModel *model(void)
QModelIndex parent(void)
int row(void)
QModelIndex sibling(int row, int column)

</comment>


<class>
name:  QScrollArea 
para: QWidget *parent 
parent: QAbstractScrollArea
</class>

Qt::Alignment alignment(void)
void ensureVisible(int x, int y, int xmargin , int ymargin )
void ensureWidgetVisible(QWidget *childWidget, int xmargin , int ymargin )
void setAlignment(Qt::Alignment)
void setWidget(QWidget *widget)
void setWidgetResizable(bool resizable)
QWidget *takeWidget(void)
QWidget *widget(void)
bool widgetResizable(void)

<class>
name:  QSplitter
para: QWidget *parent 
parent: QFrame
</class>

void addWidget(QWidget *widget)
bool childrenCollapsible(void)
int count(void)
void getRange(int index, int *min, int *max)
QSplitterHandle * handle(int index)
int handleWidth(void)
int indexOf(QWidget *widget)
void insertWidget(int index, QWidget *widget)
bool isCollapsible(int index)
bool opaqueResize(void)
Qt::Orientation orientation(void)
void refresh(void)
bool restoreState( QByteArray  state)
QByteArray saveState(void)
void setChildrenCollapsible(bool)
void setCollapsible(int index, bool collapse)
void setHandleWidth(int)
void setOpaqueResize(bool opaque )
void setOrientation(Qt::Orientation)
void setSizes( QList<int>  list)
void setStretchFactor(int index, int stretch)
QList<int> sizes(void)
QWidget * widget(int index)


<class>
name: QCompleter
para: QObject *parent 
parent: QObject
</class>

Qt::CaseSensitivity caseSensitivity(void)
int completionColumn(void)
int completionCount(void)
QCompleter::CompletionMode completionMode(void)
QAbstractItemModel *completionModel(void)
QString completionPrefix(void)
int completionRole(void)
QString currentCompletion(void)
QModelIndex currentIndex(void)
int currentRow(void)
Qt::MatchFlags filterMode(void)
int maxVisibleItems(void)
QAbstractItemModel * model(void)
QCompleter::ModelSorting modelSorting(void)
QAbstractItemView * popup(void)
void setCaseSensitivity(Qt::CaseSensitivity caseSensitivity)
void setCompletionColumn(int column)
void setCompletionMode(QCompleter::CompletionMode mode)
void setCompletionRole(int role)
bool setCurrentRow(int row)
void setFilterMode(Qt::MatchFlags filterMode)
void setMaxVisibleItems(int maxItems)
void setModel(QAbstractItemModel *model)
void setModelSorting(QCompleter::ModelSorting sorting)
void setPopup(QAbstractItemView *popup)
void setWidget(QWidget *widget)
QWidget * widget(void)
bool wrapAround(void)

void complete(QRect  rect)
void setCompletionPrefix(QString prefix)
void setWrapAround(bool wrap)

<class>
name: QCompleter2
para: QAbstractItemModel *model, QObject *parent 
parent: QCompleter
codename: QCompleter
</class>

<class>
name: QCompleter3
para: QStringList list, QObject *parent
parent: QCompleter
codename: QCompleter
</class>

<class>
name: QString2
para: void
codename: QString
</class>

QString append( QString  str)
<comment>
QString append2( QChar *str, int len)
QString append3( QChar ch)
QString append( QStringRef  reference)
QString append( QLatin1String str)
QString append( char *str)
QString append( QByteArray  ba)
QString arg( QString  a, int fieldWidth , QChar fillChar ))
QString arg(qulonglong a, int fieldWidth , int base , QChar fillChar ))
QString arg(long a, int fieldWidth , int base , QChar fillChar ))
QString arg(ulong a, int fieldWidth , int base , QChar fillChar ))
QString arg(int a, int fieldWidth , int base , QChar fillChar ))
QString arg(uint a, int fieldWidth , int base , QChar fillChar ))
QString arg(short a, int fieldWidth , int base , QChar fillChar ))
QString arg(ushort a, int fieldWidth , int base , QChar fillChar ))
QString arg(double a, int fieldWidth , char format , int precision , QChar fillChar ))
QString arg(char a, int fieldWidth , QChar fillChar ))
QString arg(QChar a, int fieldWidth , QChar fillChar ))
QString arg(qlonglong a, int fieldWidth , int base , QChar fillChar ))
QString arg( QString  a1,  QString  a2)
QString arg( QString  a1,  QString  a2,  QString  a3)
QString arg( QString  a1,  QString  a2,  QString  a3,  QString  a4)
QString arg( QString  a1,  QString  a2,  QString  a3,  QString  a4,  QString  a5)
QString arg( QString  a1,  QString  a2,  QString  a3,  QString  a4,  QString  a5,  QString  a6)
QString arg( QString  a1,  QString  a2,  QString  a3,  QString  a4,  QString  a5,  QString  a6,  QString  a7)
QString arg( QString  a1,  QString  a2,  QString  a3,  QString  a4,  QString  a5,  QString  a6,  QString  a7,  QString  a8)
QString arg( QString  a1,  QString  a2,  QString  a3,  QString  a4,  QString  a5,  QString  a6,  QString  a7,  QString  a8,  QString  a9)
QChar at(int position)
iterator begin(void)
const_iterator begin(void)
int capacity(void)
const_iterator cbegin(void)
const_iterator cend(void)
void chop(int n)
void clear(void)
int compare(QLatin1String other, Qt::CaseSensitivity cs )
int compare( QString  other, Qt::CaseSensitivity cs )
int compare( QStringRef  ref, Qt::CaseSensitivity cs )
const_iterator constBegin(void)
 QChar * constData(void)
const_iterator constEnd(void)
bool contains( QString  str, Qt::CaseSensitivity cs )
bool contains(QChar ch, Qt::CaseSensitivity cs )
bool contains(QLatin1String str, Qt::CaseSensitivity cs )
bool contains( QStringRef  str, Qt::CaseSensitivity cs )
bool contains( QRegExp  rx)
bool contains(QRegExp  rx)
bool contains( QRegularExpression  re)
bool contains( QRegularExpression  re, QRegularExpressionMatch *match)
int count( QString  str, Qt::CaseSensitivity cs )
int count(QChar ch, Qt::CaseSensitivity cs )
int count(void)
int count( QStringRef  str, Qt::CaseSensitivity cs )
int count( QRegExp  rx)
int count( QRegularExpression  re)
const_reverse_iterator crbegin(void)
const_reverse_iterator crend(void)
QChar * data(void)
 QChar * data(void)
iterator end(void)
const_iterator end(void)
bool endsWith( QString  s, Qt::CaseSensitivity cs )
bool endsWith( QStringRef  s, Qt::CaseSensitivity cs )
bool endsWith(QLatin1String s, Qt::CaseSensitivity cs )
bool endsWith(QChar c, Qt::CaseSensitivity cs )
QString fill(QChar ch, int size )
int indexOf( QString  str, int from , Qt::CaseSensitivity cs )
int indexOf(QChar ch, int from , Qt::CaseSensitivity cs )
int indexOf(QLatin1String str, int from , Qt::CaseSensitivity cs )
int indexOf( QStringRef  str, int from , Qt::CaseSensitivity cs )
int indexOf( QRegExp  rx, int from )
int indexOf(QRegExp  rx, int from )
int indexOf( QRegularExpression  re, int from )
int indexOf( QRegularExpression  re, int from, QRegularExpressionMatch *rmatch)
QString insert(int position,  QString  str)
QString insert(int position,  QChar *unicode, int size)
QString insert(int position, QChar ch)
QString insert(int position,  QStringRef  str)
QString insert(int position, QLatin1String str)
QString insert(int position,  char *str)
QString insert(int position,  QByteArray  str)
bool isEmpty(void)
bool isNull(void)
bool isRightToLeft(void)
int lastIndexOf( QString  str, int from , Qt::CaseSensitivity cs )
int lastIndexOf(QChar ch, int from , Qt::CaseSensitivity cs )
int lastIndexOf(QLatin1String str, int from , Qt::CaseSensitivity cs )
int lastIndexOf( QStringRef  str, int from , Qt::CaseSensitivity cs )
int lastIndexOf( QRegExp  rx, int from )
int lastIndexOf(QRegExp  rx, int from )
int lastIndexOf( QRegularExpression  re, int from )
int lastIndexOf( QRegularExpression  re, int from, QRegularExpressionMatch *rmatch)
QString left(int n)
QString leftJustified(int width, QChar fill , bool truncate )
QStringRef leftRef(int n)
int length(void)
int localeAwareCompare( QString  other)
int localeAwareCompare( QStringRef  other)
QString mid(int position, int n )
QStringRef midRef(int position, int n )
QString normalized(NormalizationForm mode, QChar::UnicodeVersion version )
QString prepend( QString  str)
QString prepend( QChar *str, int len)
QString prepend(QChar ch)
QString prepend( QStringRef  str)
QString prepend(QLatin1String str)
QString prepend( char *str)
QString prepend( QByteArray  ba)
void push_back( QString  other)
void push_back(QChar ch)
void push_front( QString  other)
void push_front(QChar ch)
reverse_iterator rbegin(void)
const_reverse_iterator rbegin(void)
QString remove(int position, int n)
QString remove(QChar ch, Qt::CaseSensitivity cs )
QString remove( QString  str, Qt::CaseSensitivity cs )
QString remove( QRegExp  rx)
QString remove( QRegularExpression  re)
reverse_iterator rend(void)
const_reverse_iterator rend(void)
QString repeated(int times)
QString replace(int position, int n,  QString  after)
QString replace(int position, int n,  QChar *unicode, int size)
QString replace(int position, int n, QChar after)
QString replace(QChar before, QChar after, Qt::CaseSensitivity cs )
QString replace( QChar *before, int blen,  QChar *after, int alen, Qt::CaseSensitivity cs )
QString replace(QLatin1String before, QLatin1String after, Qt::CaseSensitivity cs )
QString replace(QLatin1String before,  QString  after, Qt::CaseSensitivity cs )
QString replace( QString  before, QLatin1String after, Qt::CaseSensitivity cs )
QString replace( QString  before,  QString  after, Qt::CaseSensitivity cs )
QString replace(QChar ch,  QString  after, Qt::CaseSensitivity cs )
QString replace(QChar c, QLatin1String after, Qt::CaseSensitivity cs )
QString replace( QRegExp  rx,  QString  after)
QString replace( QRegularExpression  re,  QString  after)
void reserve(int size)
void resize(int size)
void resize(int size, QChar fillChar)
QString right(int n)
QString rightJustified(int width, QChar fill , bool truncate )
QStringRef rightRef(int n)
QString section(QChar sep, int start, int end , SectionFlags flags )
QString section( QString  sep, int start, int end , SectionFlags flags )
QString section( QRegExp  reg, int start, int end , SectionFlags flags )
QString section( QRegularExpression  re, int start, int end , SectionFlags flags )
QString setNum(int n, int base )
QString setNum(ushort n, int base )
QString setNum(short n, int base )
QString setNum(uint n, int base )
QString setNum(long n, int base )
QString setNum(ulong n, int base )
QString setNum(qlonglong n, int base )
QString setNum(qulonglong n, int base )
QString setNum(float n, char format , int precision )
QString setNum(double n, char format , int precision )
QString setRawData( QChar *unicode, int size)
QString setUnicode( QChar *unicode, int size)
QString setUtf16( ushort *unicode, int size)
QString simplified(void)
int size(void)
QVector<QStringRef> splitRef( QString  sep, SplitBehavior behavior , Qt::CaseSensitivity cs )
QVector<QStringRef> splitRef(QChar sep, SplitBehavior behavior , Qt::CaseSensitivity cs )
QVector<QStringRef> splitRef( QRegExp  rx, SplitBehavior behavior )
QVector<QStringRef> splitRef( QRegularExpression  re, SplitBehavior behavior )
void squeeze(void)
bool startsWith( QString  s, Qt::CaseSensitivity cs )
bool startsWith( QStringRef  s, Qt::CaseSensitivity cs )
bool startsWith(QLatin1String s, Qt::CaseSensitivity cs )
bool startsWith(QChar c, Qt::CaseSensitivity cs )
void swap(QString  other)
CFStringRef toCFString(void)
QString toCaseFolded(void)
double toDouble(bool *ok )
float toFloat(bool *ok )
QString toHtmlEscaped(void)
int toInt(bool *ok , int base )
QByteArray toLatin1(void)
QByteArray toLocal8Bit(void)
long toLong(bool *ok , int base )
qlonglong toLongLong(bool *ok , int base )
QString toLower(void)
NSString * toNSString(void)
short toShort(bool *ok , int base )
std::string toStdString(void)
std::u16string toStdU16String(void)
std::u32string toStdU32String(void)
std::wstring toStdWString(void)
uint toUInt(bool *ok , int base )
ulong toULong(bool *ok , int base )
qulonglong toULongLong(bool *ok , int base )
ushort toUShort(bool *ok , int base )
QVector<uint> toUcs4(void)
QString toUpper(void)
QByteArray toUtf8(void)
int toWCharArray(wchar_t *array)
QString trimmed(void)
void truncate(int position)
QChar * unicode(void)
ushort * utf16(void)
</comment>

QStringList split( QString  sep, QString::SplitBehavior behavior , Qt::CaseSensitivity cs )
QStringList split@2(QChar sep, QString::SplitBehavior behavior , Qt::CaseSensitivity cs )
QStringList split@3( QRegExp  rx, QString::SplitBehavior behavior )
QStringList split@4( QRegularExpression  re, QString::SplitBehavior behavior )


<class>
name: QProcess
para: QObject *
parent: QIODevice
codename: GProcess
passvmpointer
</class>

QStringList arguments(void)
void closeReadChannel(QProcess::ProcessChannel channel)
void closeWriteChannel(void)
QProcess::ProcessError error(void)
int exitCode(void)
QProcess::ExitStatus exitStatus(void)
QProcess::InputChannelMode inputChannelMode(void)
QProcess::ProcessChannelMode processChannelMode(void)
QProcessEnvironment processEnvironment(void)
QString program(void)
QByteArray readAllStandardError(void)
QByteArray readAllStandardOutput(void)
QProcess::ProcessChannel readChannel(void)
void setArguments( QStringList  arguments)
void setInputChannelMode(QProcess::InputChannelMode mode)
void setProcessChannelMode(QProcess::ProcessChannelMode mode)
void setProcessEnvironment( QProcessEnvironment  environment)
void setProgram( QString  program)
void setReadChannel(QProcess::ProcessChannel channel)
void setStandardErrorFile( QString  fileName, QIODevice::OpenMode mode )
void setStandardInputFile( QString  fileName)
void setStandardOutputFile( QString  fileName, QIODevice::OpenMode mode )
void setStandardOutputProcess(QProcess *destination)
void setWorkingDirectory( QString  dir)
void start( QString  program,  QStringList  arguments, QIODevice::OpenMode mode )
void start@2( QString  command, QIODevice::OpenMode mode )
void start@3(QIODevice::OpenMode mode )
QProcess::ProcessState state(void)
bool waitForFinished(int msecs )
bool waitForStarted(int msecs )
QString workingDirectory(void)

void kill(void)
void terminate(void)

void setreadyReadStandardErrorEvent(const char *)
void setreadyReadStandardOutputEvent(const char *)

const char *getreadyReadStandardErrorEvent(void)
const char *getreadyReadStandardOutputEvent(void)

<class>
name: QMdiArea
para: QWidget *
parent: QAbstractScrollArea
</class>

QMdiArea::WindowOrder activationOrder(void)
QMdiSubWindow * activeSubWindow(void)
QMdiSubWindow * addSubWindow(QWidget * widget, Qt::WindowFlags windowFlags )
QBrush background(void)
QMdiSubWindow * currentSubWindow(void)
bool documentMode(void)
void removeSubWindow(QWidget * widget)
void setActivationOrder(QMdiArea::WindowOrder order)
void setBackground( QBrush   background)
void setDocumentMode(bool enabled)
void setOption(QMdiArea::AreaOption option, bool on )
void setTabPosition(QTabWidget::TabPosition position)
void setTabShape(QTabWidget::TabShape shape)
void setTabsClosable(bool closable)
void setTabsMovable(bool movable)
void setViewMode(QMdiArea::ViewMode mode)
QList<QMdiSubWindow *> subWindowList(QMdiArea::WindowOrder order )
QTabWidget::TabPosition tabPosition(void)
QTabWidget::TabShape tabShape(void)
bool tabsClosable(void)
bool tabsMovable(void)
bool testOption(QMdiArea::AreaOption option)
QMdiArea::ViewMode viewMode(void)
void activateNextSubWindow(void)
void activatePreviousSubWindow(void)
void cascadeSubWindows(void)
void closeActiveSubWindow(void)
void closeAllSubWindows(void)
void setActiveSubWindow(QMdiSubWindow * window)
void tileSubWindows(void)

<class>
name: QMdiSubWindow
para: QWidget *
parent: QWidget
</class>

bool isShaded(void)
int keyboardPageStep(void)
int keyboardSingleStep(void)
QMdiArea * mdiArea(void)
void setKeyboardPageStep(int step)
void setKeyboardSingleStep(int step)
void setOption(QMdiSubWindow::SubWindowOption option, bool on )
void setSystemMenu(QMenu * systemMenu)
void setWidget(QWidget * widget)
QMenu * systemMenu(void)
bool testOption(QMdiSubWindow::SubWindowOption option)
QWidget * widget(void)

void showShaded(void)
void showSystemMenu(void)

<class>
name: QCursor
para: void
</class>

QBitmap *bitmap(void)
QPoint hotSpot(void)
QBitmap *mask(void)
QPixmap pixmap(void)
void setShape(Qt::CursorShape shape)
Qt::CursorShape shape(void)
QPoint pos(void)
QPoint pos@2(QScreen *)
void setPos(int x, int y)
void setPos@2(QScreen *screen, int x, int y)
void setPos@3(QPoint)
void setPos@4(QScreen *screen, QPoint)


<class>
name: QListView
para: QWidget *
parent: QAbstractItemView
</class>

int  batchSize(void)
void  clearPropertyFlags(void)
QListView::Flow  flow(void)
QSize  gridSize(void)
bool  isRowHidden(int row)
bool  isSelectionRectVisible(void)
bool  isWrapping(void)
QListView::LayoutMode  layoutMode(void)
int  modelColumn(void)
QListView::Movement  movement(void)
QListView::ResizeMode  resizeMode(void)
void  setBatchSize(int batchSize)
void  setFlow(QListView::Flow flow)
void  setGridSize( QSize   size)
void  setLayoutMode(QListView::LayoutMode mode)
void  setModelColumn(int column)
void  setMovement(QListView::Movement movement)
void  setResizeMode(QListView::ResizeMode mode)
void  setRowHidden(int row, bool hide)
void  setSelectionRectVisible(bool show)
void  setSpacing(int space)
void  setUniformItemSizes(bool enable)
void  setViewMode(QListView::ViewMode mode)
void  setWordWrap(bool on)
void  setWrapping(bool enable)
int  spacing(void)
bool  uniformItemSizes(void)
QListView::ViewMode  viewMode(void)
bool  wordWrap(void)

<filter> (iswindows() and sysget("RINGQT_ANDROID") = "")

<class>
name: QAxObject
para: QString
parent: QAxBase
</class>

<class>
name: QAxBase
para: QWidget *
parent: QObject
abstract
</class>

QVariant asVariant(void)
QString control(void)
void disableClassInfo(void)
void disableEventSink(void)
void disableMetaObject(void)
QVariant dynamicCall( char *function)
QVariant dynamicCall@2( char *function,QString)
QString generateDocumentation(void)
bool isNull(void)
QAxObject * querySubObject( char *name)
bool setControl( QString  )
QStringList verbs(void)

<comment>
QAxBase::PropertyBag propertyBag(void)
void setPropertyBag(QAxBase::PropertyBag bag)
long queryInterface( QUuid  uuid, void **iface)
</comment>

</filter>

<class>
name: QUuid
para: void
</class>

QString toString(void) 


<class>
name: QToolButton
para: QWidget *
parent: QAbstractButton
codename: GToolButton
passvmpointer
</class>

Qt::ArrowType arrowType(void)
bool autoRaise(void)
QAction * defaultAction(void)
QMenu * menu(void)
QToolButton::ToolButtonPopupMode popupMode(void)
void setArrowType(Qt::ArrowType type)
void setAutoRaise(bool enable)
void setMenu(QMenu * menu)
void setPopupMode(QToolButton::ToolButtonPopupMode mode)
Qt::ToolButtonStyle toolButtonStyle(void)
void setDefaultAction(QAction * action)
void setToolButtonStyle(Qt::ToolButtonStyle style)
void showMenu(void)

void settriggeredEvent(const char *)
const char *gettriggeredEvent(void)

void setClickEvent(const char *)
const char *getClickEvent(void)

<filter> (sysget("RINGQT_ANDROID") = "")

<class>
name: QSerialPort
para: QObject *
parent: QIODevice
codename: GSerialPort
passvmpointer
</class>

<runcode>
aEnumTypes + "QSerialPort::BaudRate"
aEnumTypes + "QSerialPort::DataBits"
aEnumTypes + "QSerialPort::Direction"
aEnumTypes + "QSerialPort::Directions"
aEnumTypes + "QSerialPort::FlowControl"
aEnumTypes + "QSerialPort::Parity"
aEnumTypes + "QSerialPort::PinoutSignal"
aEnumTypes + "QSerialPort::PinoutSignals"
aEnumTypes + "QSerialPort::SerialPortError"
aEnumTypes + "QSerialPort::StopBits"
</runcode>

qint32 baudRate(QSerialPort::Directions directions)
bool clear(QSerialPort::Directions directions)
void clearError(void)
QSerialPort::DataBits dataBits(void)
QSerialPort::SerialPortError error(void)
QSerialPort::FlowControl flowControl(void)
bool flush(void)
void *handle(void)
bool isDataTerminalReady(void)
bool isRequestToSend(void)
QSerialPort::Parity parity(void)
QSerialPort::PinoutSignals pinoutSignals(void)
QString portName(void)
qint64 readBufferSize(void)
bool setBaudRate(qint32 baudRate, QSerialPort::Directions directions)
bool setBreakEnabled(bool set)
bool setDataBits(QSerialPort::DataBits dataBits)
bool setDataTerminalReady(bool set)
bool setFlowControl(QSerialPort::FlowControl flowControl)
bool setParity(QSerialPort::Parity parity)
void setPort(QSerialPortInfo serialPortInfo)
void setPortName(QString name)
void setReadBufferSize(qint64 size)
bool setRequestToSend(bool set)
bool setStopBits(QSerialPort::StopBits stopBits)
QSerialPort::StopBits stopBits(void)

void setbaudRateChangedEvent(const char *)
void setbreakEnabledChangedEvent(const char *)
void setdataBitsChangedEvent(const char *)
void setdataTerminalReadyChangedEvent(const char *)
void seterrorEvent(const char *)
void setflowControlChangedEvent(const char *)
void setparityChangedEvent(const char *)
void setrequestToSendChangedEvent(const char *)
void setstopBitsChangedEvent(const char *)

const char *getbaudRateChangedEvent(void)
const char *getbreakEnabledChangedEvent(void)
const char *getdataBitsChangedEvent(void)
const char *getdataTerminalReadyChangedEvent(void)
const char *geterrorEvent(void)
const char *getflowControlChangedEvent(void)
const char *getparityChangedEvent(void)
const char *getrequestToSendChangedEvent(void)
const char *getstopBitsChangedEvent(void)


<class>
name: QSerialPortInfo
para: void
</class>

QString description(void)
bool hasProductIdentifier(void)
bool hasVendorIdentifier(void)
bool isBusy(void)
bool isNull(void)
QString manufacturer(void)
QString portName(void)
quint16 productIdentifier(void)
void swap(QSerialPortInfo other)
QString systemLocation(void)
quint16 vendorIdentifier(void)

</filter>


<class>
name: QStringRef
para: void
</class>


QStringRef appendTo(QString * string)
QChar at(int position)
void clear(void)
<comment>
int compare(QString other, Qt::CaseSensitivity cs)
</comment>
int compare@2(QStringRef other, Qt::CaseSensitivity cs)
int compare@3(QLatin1String other, Qt::CaseSensitivity cs)
QChar * constData(void)
bool contains(QString str, Qt::CaseSensitivity cs)
bool contains@2(QChar ch, Qt::CaseSensitivity cs)
bool contains@3(QStringRef str, Qt::CaseSensitivity cs)
bool contains@4(QLatin1String str, Qt::CaseSensitivity cs)
int count(void)
int count@2(QString str, Qt::CaseSensitivity cs)
int count@3(QChar ch, Qt::CaseSensitivity cs)
int count@4(QStringRef str, Qt::CaseSensitivity cs)
QChar * data(void)
bool endsWith(QString str, Qt::CaseSensitivity cs)
bool endsWith@2(QChar ch, Qt::CaseSensitivity cs)
bool endsWith@3(QLatin1String str, Qt::CaseSensitivity cs)
bool endsWith@4(QStringRef str, Qt::CaseSensitivity cs)
int indexOf(QString str, int from, Qt::CaseSensitivity cs)
int indexOf@2(QLatin1String str, int from, Qt::CaseSensitivity cs)
int indexOf@3(QChar ch, int from, Qt::CaseSensitivity cs)
int indexOf@4(QStringRef str, int from, Qt::CaseSensitivity cs)
bool isEmpty(void)
bool isNull(void)
int lastIndexOf(QString str, int from, Qt::CaseSensitivity cs)
int lastIndexOf@2(QChar ch, int from, Qt::CaseSensitivity cs)
int lastIndexOf@3(QLatin1String str, int from, Qt::CaseSensitivity cs)
int lastIndexOf@4(QStringRef str, int from, Qt::CaseSensitivity cs)
int length(void)
int localeAwareCompare(QString other)
int localeAwareCompare@2(QStringRef other)
int position(void)
int size(void)
bool startsWith(QString str, Qt::CaseSensitivity cs)
bool startsWith@2(QLatin1String str, Qt::CaseSensitivity cs)
bool startsWith@3(QStringRef str, Qt::CaseSensitivity cs)
bool startsWith@4(QChar ch, Qt::CaseSensitivity cs)
QString * string(void)
QByteArray toLatin1(void)
QByteArray toLocal8Bit(void)
QString toString(void)
QVector<uint> toUcs4(void)
QByteArray toUtf8(void)
QChar * unicode(void)
int compare@4(QStringRef s1, QString s2, Qt::CaseSensitivity cs)
int compare@5(QStringRef s1, QStringRef s2, Qt::CaseSensitivity cs)
int compare@6(QStringRef s1, QLatin1String s2, Qt::CaseSensitivity cs)
int localeAwareCompare@3(QStringRef s1, QString s2)
int localeAwareCompare@4(QStringRef s1, QStringRef s2)

<class>
name: QMutex
para: QMutex::RecursionMode
</class>

bool isRecursive(void)
void lock(void)
void unlock(void)

<class>
name: QMutexLocker
para: QMutex *
</class>

QMutex * mutex(void)
void relock(void)
void unlock(void)

<class>
name: QBuffer
para: QObject *
parent: QIODevice
</class>

QByteArray buffer(void)
QByteArray data(void)
void setBuffer(QByteArray *byteArray)
void setData(QByteArray data)
void setData@2(char *data, int size)

<class>
name: QBluetoothAddress
para: void
</class>

void clear(void)
bool isNull(void)
QString toString(void)
quint64 toUInt64(void)

<class>
name: QBluetoothDeviceDiscoveryAgent
para: QObject *
codename: GBluetoothDeviceDiscoveryAgent
passvmpointer
</class>

QList<QBluetoothDeviceInfo> discoveredDevices(void)
QBluetoothDeviceDiscoveryAgent::Error error(void)
QString errorString(void)
QBluetoothDeviceDiscoveryAgent::InquiryType inquiryType(void)
bool isActive(void)
void setInquiryType(QBluetoothDeviceDiscoveryAgent::InquiryType type)
void start(void)
void stop(void)

void setcanceledEvent(const char *)
void setdeviceDiscoveredEvent(const char *)
void seterrorEvent(const char *)
void setfinishedEvent(const char *)

const char *getcanceledEvent(void)
const char *getdeviceDiscoveredEvent(void)
const char *geterrorEvent(void)
const char *getfinishedEvent(void)

<class>
name: QBluetoothDeviceInfo
para: void
</class>

QBluetoothAddress address(void)
<comment>
QBluetoothDeviceInfo::CoreConfigurations coreConfigurations(void)
QBluetoothUuid deviceUuid(void)
</comment>
bool isCached(void)
bool isValid(void)
QBluetoothDeviceInfo::MajorDeviceClass majorDeviceClass(void)
quint8 minorDeviceClass(void)
QString name(void)
qint16 rssi(void)
QBluetoothDeviceInfo::ServiceClasses serviceClasses(void)
QList<QBluetoothUuid> serviceUuids(QBluetoothDeviceInfo::DataCompleteness *completeness)
QBluetoothDeviceInfo::DataCompleteness serviceUuidsCompleteness(void)
void setCached(bool cached)
<comment>
void setCoreConfigurations(QBluetoothDeviceInfo::CoreConfigurations coreConfigs)
void setDeviceUuid(QBluetoothUuid uuid)
</comment>
void setRssi(qint16 signal)
void setServiceUuids(QList<QBluetoothUuid> uuids, QBluetoothDeviceInfo::DataCompleteness completeness)

<class>
name: QBluetoothHostInfo
para: void
</class>

QBluetoothAddress address(void)
QString name(void)
void setAddress(QBluetoothAddress address)
void setName(QString name)

<class>
name: QBluetoothLocalDevice
para: QObject *
codename: GBluetoothLocalDevice
passvmpointer
</class>

QBluetoothAddress address(void)
<comment>
QList<QBluetoothAddress> connectedDevices(void)
<comment>
QBluetoothLocalDevice::HostMode hostMode(void)
bool isValid(void)
QString name(void)
QBluetoothLocalDevice::Pairing pairingStatus(QBluetoothAddress address)
void powerOn(void)
void requestPairing(QBluetoothAddress address, QBluetoothLocalDevice::Pairing pairing)
void setHostMode(QBluetoothLocalDevice::HostMode mode)
void pairingConfirmation(bool accept)
QList<QBluetoothHostInfo> allDevices(void)

void setdeviceConnectedEvent(const char *)
void setdeviceDisconnectedEvent(const char *)
void seterrorEvent(const char *)
void sethostModeStateChangedEvent(const char *)
void setpairingDisplayConfirmationEvent(const char *)
void setpairingDisplayPinCodeEvent(const char *)
void setpairingFinishedEvent(const char *)

const char *getdeviceConnectedEvent(void)
const char *getdeviceDisconnectedEvent(void)
const char *geterrorEvent(void)
const char *gethostModeStateChangedEvent(void)
const char *getpairingDisplayConfirmationEvent(void)
const char *getpairingDisplayPinCodeEvent(void)
const char *getpairingFinishedEvent(void)

<class>
name: QBluetoothServer
para: QBluetoothServiceInfo::Protocol,QObject *
parent: QObject
codename: GBluetoothServer
passvmpointer
</class>


void close(void)
QBluetoothServer::Error error(void)
bool hasPendingConnections(void)
bool isListening(void)
bool listen(QBluetoothAddress address, quint16 port)
QBluetoothServiceInfo listen@2(QBluetoothUuid uuid, QString serviceName))
int maxPendingConnections(void)
QBluetoothSocket * nextPendingConnection(void)
QBluetooth::SecurityFlags securityFlags(void)
QBluetoothAddress serverAddress(void)
quint16 serverPort(void)
QBluetoothServiceInfo::Protocol serverType(void)
void setMaxPendingConnections(int numConnections)
void setSecurityFlags(QBluetooth::SecurityFlags security)

void seterrorEvent(const char *)
void setnewConnectionEvent(const char *)

const char *geterrorEvent(void)
const char *getnewConnectionEvent(void)

<class>
name: QBluetoothServiceDiscoveryAgent
para: QObject *
parent: QObject
codename: GBluetoothServiceDiscoveryAgent
passvmpointer
</class>

QList<QBluetoothServiceInfo> discoveredServices(void)
QBluetoothServiceDiscoveryAgent::Error error(void)
QString errorString(void)
bool isActive(void)
QBluetoothAddress remoteAddress(void)
bool setRemoteAddress(QBluetoothAddress address)
void setUuidFilter(QList<QBluetoothUuid> uuids)
void setUuidFilter@2(QBluetoothUuid uuid)
QList<QBluetoothUuid> uuidFilter(void)
void clear(void)
void start(QBluetoothServiceDiscoveryAgent::DiscoveryMode mode)
void stop(void)

void setcanceledEvent(const char *)
void seterrorEvent(const char *)
void setfinishedEvent(const char *)
void setserviceDiscoveredEvent(const char *)

const char *getcanceledEvent(void)
const char *geterrorEvent(void)
const char *getfinishedEvent(void)
const char *getserviceDiscoveredEvent(void)

<class>
name: QBluetoothServiceInfo
para: void
</class>



QVariant attribute(quint16 attributeId)
QList<quint16> attributes(void)
bool contains(quint16 attributeId)
QBluetoothDeviceInfo device(void)
bool isComplete(void)
bool isRegistered(void)
bool isValid(void)
QBluetoothServiceInfo::Sequence protocolDescriptor(QBluetoothUuid::ProtocolUuid protocol)
int protocolServiceMultiplexer(void)
bool registerService(QBluetoothAddress localAdapter))
void removeAttribute(quint16 attributeId)
int serverChannel(void)
quint8 serviceAvailability(void)
QList<QBluetoothUuid> serviceClassUuids(void)
QString serviceDescription(void)
QString serviceName(void)
QString serviceProvider(void)
QBluetoothUuid serviceUuid(void)
void setAttribute(quint16 attributeId, QVariant value)
void setAttribute@2(quint16 attributeId, QBluetoothUuid value)
void setAttribute@3(quint16 attributeId, QBluetoothServiceInfo::Sequence value)
void setDevice(QBluetoothDeviceInfo device)
void setServiceAvailability(quint8 availability)
void setServiceDescription(QString description)
void setServiceName(QString name)
void setServiceProvider(QString provider)
void setServiceUuid(QBluetoothUuid uuid)
bool unregisterService(void)

<class>
name: QBluetoothSocket
para: QBluetoothServiceInfo::Protocol,QObject *
parent: QIODevice
codename: GBluetoothSocket
passvmpointer
</class>

void abort(void)
void connectToService(QBluetoothServiceInfo service, QIODevice::OpenMode openMode)
void connectToService@2(QBluetoothAddress address, QBluetoothUuid uuid, QIODevice::OpenMode openMode)
void connectToService@3(QBluetoothAddress address, quint16 port, QIODevice::OpenMode openMode)
void disconnectFromService(void)
QBluetoothSocket::SocketError error(void)
QString errorString(void)
QBluetoothAddress localAddress(void)
QString localName(void)
quint16 localPort(void)
QBluetoothAddress peerAddress(void)
QString peerName(void)
quint16 peerPort(void)
bool setSocketDescriptor(int socketDescriptor, QBluetoothServiceInfo::Protocol socketType, QBluetoothSocket::SocketState socketState, QIODevice::OpenMode openMode)
int socketDescriptor(void)
QBluetoothServiceInfo::Protocol socketType(void)
QBluetoothSocket::SocketState state(void)

void setconnectedEvent(const char *)
void setdisconnectedEvent(const char *)
void seterrorEvent(const char *)
void setstateChangedEvent(const char *)

const char *getconnectedEvent(void)
const char *getdisconnectedEvent(void)
const char *geterrorEvent(void)
const char *getstateChangedEvent(void)

<class>
name: QBluetoothTransferManager
para: QObject *
parent: QObject
codename: GBluetoothTransferManager
passvmpointer
</class>


QBluetoothTransferReply * put(QBluetoothTransferRequest request, QIODevice *data)
void setfinishedEvent(const char *)
const char *getfinishedEvent(void)

<class>
name: QBluetoothTransferReply
para: QObject *
parent: QObject
codename: GBluetoothTransferReply
passvmpointer
abstract
</class>

QBluetoothTransferManager * manager(void)
QBluetoothTransferRequest request(void)
void abort(void)

void seterrorEvent(const char *)
void setfinishedEvent(const char *)
void settransferProgressEvent(const char *)

const char *geterrorEvent(void)
const char *getfinishedEvent(void)
const char *gettransferProgressEvent(void)

<class>
name: QBluetoothTransferRequest
para: QBluetoothAddress
</class>

QBluetoothAddress address(void)
QVariant attribute(QBluetoothTransferRequest::Attribute code, QVariant defaultValue))
void setAttribute(QBluetoothTransferRequest::Attribute code, QVariant value)

<class>
name: QBluetoothUuid
para: void
parent: QUuid
</class>

int minimumSize(void)
quint16 toUInt16(bool *ok)
quint32 toUInt32(bool *ok)
quint128 toUInt128(void)
<comment>
QString characteristicToString(QBluetoothUuid::CharacteristicType uuid)
QString descriptorToString(QBluetoothUuid::DescriptorType uuid)
QString protocolToString(QBluetoothUuid::ProtocolUuid uuid)
QString serviceClassToString(QBluetoothUuid::ServiceClassUuid uuid)
</comment>

<class>
name: QDateTime
para: void
</class>

QDateTime addDays(int ndays)
QDateTime addMSecs(qint64 msecs)
QDateTime addMonths(int nmonths)
QDateTime addSecs(int s)
QDateTime addYears(int nyears)
QDate date(void)
int daysTo(QDateTime other)
bool isNull(void)
bool isValid(void)
qint64 msecsTo(QDateTime other)
int secsTo(QDateTime other)
void setDate(QDate date)
void setMSecsSinceEpoch(qint64 msecs)
void setTime(QTime time)
void setTimeSpec(Qt::TimeSpec spec)
void setTime_t(uint seconds)
QTime time(void)
Qt::TimeSpec timeSpec(void)
QDateTime toLocalTime(void)
qint64 toMSecsSinceEpoch(void)
QString toString(QString format)
QString toString@2(Qt::DateFormat format)
QDateTime toTimeSpec(Qt::TimeSpec specification)
uint toTime_t(void)
QDateTime toUTC(void)
QDateTime currentDateTime(void)
QDateTime currentDateTimeUtc(void)
qint64 currentMSecsSinceEpoch(void)
QDateTime fromMSecsSinceEpoch(qint64 msecs)
QDateTime fromString(QString string, Qt::DateFormat format)
QDateTime fromString@2(QString string, QString format)
QDateTime fromTime_t(uint seconds)

<class>
name: QScreen
abstract
</class>

int angleBetween(Qt::ScreenOrientation a, Qt::ScreenOrientation b)
QRect availableGeometry(void)
QSize availableSize(void)
QRect availableVirtualGeometry(void)
QSize availableVirtualSize(void)
int depth(void)
qreal devicePixelRatio(void)
QRect geometry(void)
QPixmap grabWindow(int window, int x, int y, int width, int height)
QPixmap grabWindow@2(int window)
QPlatformScreen * handle(void)
bool isLandscape(Qt::ScreenOrientation o)
bool isPortrait(Qt::ScreenOrientation o)
qreal logicalDotsPerInch(void)
qreal logicalDotsPerInchX(void)
qreal logicalDotsPerInchY(void)
QRect mapBetween(Qt::ScreenOrientation a, Qt::ScreenOrientation b, QRect rect)
QString name(void)
Qt::ScreenOrientation nativeOrientation(void)
Qt::ScreenOrientation orientation(void)
Qt::ScreenOrientations orientationUpdateMask(void)
qreal physicalDotsPerInch(void)
qreal physicalDotsPerInchX(void)
qreal physicalDotsPerInchY(void)
QSizeF physicalSize(void)
Qt::ScreenOrientation primaryOrientation(void)
qreal refreshRate(void)
void setOrientationUpdateMask(Qt::ScreenOrientations mask)
QSize size(void)
QTransform transformBetween(Qt::ScreenOrientation a, Qt::ScreenOrientation b, QRect target)

<class>
name: QWindow
para: QScreen *
parent: QObject
codename: GWindow
passvmpointer
</class>

<runcode>
 aEnumTypes + "QWindow::AncestorMode"
 aEnumTypes + "QWindow::Visibility"
</runcode>

QSize baseSize(void)
Qt::ScreenOrientation contentOrientation(void)
void create(void)
QCursor cursor(void)
void destroy(void)
qreal devicePixelRatio(void)
QString filePath(void)
Qt::WindowFlags flags(void)
QObject * focusObject(void)
QRect frameGeometry(void)
QMargins frameMargins(void)
QPoint framePosition(void)
QRect geometry(void)
int height(void)
QIcon icon(void)
bool isActive(void)
bool isAncestorOf(QWindow *child, QWindow::AncestorMode mode)
bool isExposed(void)
bool isModal(void)
bool isTopLevel(void)
bool isVisible(void)
QPoint mapFromGlobal(QPoint pos)
QPoint mapToGlobal(QPoint pos)
QRegion mask(void)
int maximumHeight(void)
QSize maximumSize(void)
int maximumWidth(void)
int minimumHeight(void)
QSize minimumSize(void)
int minimumWidth(void)
Qt::WindowModality modality(void)
qreal opacity(void)
QPoint position(void)
void reportContentOrientationChange(Qt::ScreenOrientation orientation)
QSurfaceFormat requestedFormat(void)
void resize(QSize newSize)
void resize@2(int w, int h)
QScreen * screen(void)
void setBaseSize(QSize size)
void setCursor(QCursor cursor)
void setFilePath(QString filePath)
void setFlags(Qt::WindowFlags flags)
void setFormat(QSurfaceFormat format)
void setFramePosition(QPoint point)
void setGeometry(int posx, int posy, int w, int h)
void setGeometry@2(QRect rect)
void setIcon(QIcon icon)
bool setKeyboardGrabEnabled(bool grab)
void setMask(QRegion region)
void setMaximumSize(QSize size)
void setMinimumSize(QSize size)
void setModality(Qt::WindowModality modality)
bool setMouseGrabEnabled(bool grab)
void setOpacity(qreal level)
void setParent(QWindow *parent)
void setPosition(QPoint pt)
void setPosition@2(int posx, int posy)
void setScreen(QScreen *newScreen)
void setSizeIncrement(QSize size)
void setTransientParent(QWindow *parent)
void setVisibility(QWindow::Visibility v)
void setWindowState(Qt::WindowState state)
QSize sizeIncrement(void)
QString title(void)
QWindow * transientParent(void)
Qt::WindowType type(void)
void unsetCursor(void)
QWindow::Visibility visibility(void)
int width(void)
WId winId(void)
Qt::WindowState windowState(void)
int x(void)
int y(void)
void alert(int msec)
bool close(void)
void hide(void)
void lower(void)
void raise(void)
void requestActivate(void)
void setHeight(int arg)
void setMaximumHeight(int h)
void setMaximumWidth(int w)
void setMinimumHeight(int h)
void setMinimumWidth(int w)
void setTitle(QString )
void setVisible(bool visible)
void setWidth(int arg)
void setX(int arg)
void setY(int arg)
void show(void)
void showFullScreen(void)
void showMaximized(void)
void showMinimized(void)
void showNormal(void)
QWindow * fromWinId(WId id)

void setactiveChangedEvent(const char *)
void setcontentOrientationChangedEvent(const char *)
void setfocusObjectChangedEvent(const char *)
void setheightChangedEvent(const char *)
void setmaximumHeightChangedEvent(const char *)
void setmaximumWidthChangedEvent(const char *)
void setminimumHeightChangedEvent(const char *)
void setminimumWidthChangedEvent(const char *)
void setmodalityChangedEvent(const char *)
void setopacityChangedEvent(const char *)
void setscreenChangedEvent(const char *)
void setvisibilityChangedEvent(const char *)
void setvisibleChangedEvent(const char *)
void setwidthChangedEvent(const char *)
void setwindowStateChangedEvent(const char *)
void setwindowTitleChangedEvent(const char *)
void setxChangedEvent(const char *)
void setyChangedEvent(const char *)

const char *getactiveChangedEvent(void)
const char *getcontentOrientationChangedEvent(void)
const char *getfocusObjectChangedEvent(void)
const char *getheightChangedEvent(void)
const char *getmaximumHeightChangedEvent(void)
const char *getmaximumWidthChangedEvent(void)
const char *getminimumHeightChangedEvent(void)
const char *getminimumWidthChangedEvent(void)
const char *getmodalityChangedEvent(void)
const char *getopacityChangedEvent(void)
const char *getscreenChangedEvent(void)
const char *getvisibilityChangedEvent(void)
const char *getvisibleChangedEvent(void)
const char *getwidthChangedEvent(void)
const char *getwindowStateChangedEvent(void)
const char *getwindowTitleChangedEvent(void)
const char *getxChangedEvent(void)
const char *getyChangedEvent(void)

<class>
name: QGuiApplication
parent: QCoreApplication
para: int,char **
codename: GGuiApplication
passvmpointer
</class>


qreal devicePixelRatio(void)
bool isSavingSession(void)
bool isSessionRestored(void)
QString sessionId(void)
QString sessionKey(void)
QWindowList allWindows(void)
QString applicationDisplayName(void)
Qt::ApplicationState applicationState(void)
void changeOverrideCursor(QCursor cursor)
QClipboard * clipboard(void)
bool desktopSettingsAware(void)
int exec(void)
QObject * focusObject(void)
QWindow * focusWindow(void)
QFont font(void)
QInputMethod * inputMethod(void)
bool isLeftToRight(void)
bool isRightToLeft(void)
Qt::KeyboardModifiers keyboardModifiers(void)
Qt::LayoutDirection layoutDirection(void)
QWindow * modalWindow(void)
Qt::MouseButtons mouseButtons(void)
QCursor * overrideCursor(void)
QPalette palette(void)
QString platformName(void)
QPlatformNativeInterface * platformNativeInterface(void)
QScreen * primaryScreen(void)
Qt::KeyboardModifiers queryKeyboardModifiers(void)
bool quitOnLastWindowClosed(void)
void restoreOverrideCursor(void)
QList<QScreen *> screens(void)
void setApplicationDisplayName(QString name)
void setDesktopSettingsAware(bool on)
void setFont(QFont font)
void setLayoutDirection(Qt::LayoutDirection direction)
void setOverrideCursor(QCursor cursor)
void setPalette(QPalette pal)
void setQuitOnLastWindowClosed(bool quit)
QStyleHints * styleHints(void)
void sync(void)
QWindow * topLevelAt(QPoint pos)
QWindowList topLevelWindows(void)
void setapplicationDisplayNameChangedEvent(const char *)
void setapplicationStateChangedEvent(const char *)
void setcommitDataRequestEvent(const char *)
void setfocusObjectChangedEvent(const char *)
void setfocusWindowChangedEvent(const char *)
void setfontDatabaseChangedEvent(const char *)
void setlastWindowClosedEvent(const char *)
void setlayoutDirectionChangedEvent(const char *)
void setpaletteChangedEvent(const char *)
void setprimaryScreenChangedEvent(const char *)
void setsaveStateRequestEvent(const char *)
void setscreenAddedEvent(const char *)
void setscreenRemovedEvent(const char *)

const char *getapplicationDisplayNameChangedEvent(void)
const char *getapplicationStateChangedEvent(void)
const char *getcommitDataRequestEvent(void)
const char *getfocusObjectChangedEvent(void)
const char *getfocusWindowChangedEvent(void)
const char *getfontDatabaseChangedEvent(void)
const char *getlastWindowClosedEvent(void)
const char *getlayoutDirectionChangedEvent(void)
const char *getpaletteChangedEvent(void)
const char *getprimaryScreenChangedEvent(void)
const char *getsaveStateRequestEvent(void)
const char *getscreenAddedEvent(void)
const char *getscreenRemovedEvent(void)

<class>
name: QCoreApplication
parent: QObject
nonew
</class>

void installNativeEventFilter(QAbstractNativeEventFilter *filterObj)
void removeNativeEventFilter(QAbstractNativeEventFilter *filterObject)
void quit(void)
void addLibraryPath(QString path)
QString applicationDirPath(void)
QString applicationFilePath(void)
QString applicationName(void)
qint64 applicationPid(void)
QString applicationVersion(void)
QStringList arguments(void)
bool closingDown(void)
QAbstractEventDispatcher * eventDispatcher(void)
int exec(void)
void exit(int returnCode)
bool installTranslator(QTranslator *translationFile)
QCoreApplication * instance(void)
bool isQuitLockEnabled(void)
QStringList libraryPaths(void)
QString organizationDomain(void)
QString organizationName(void)
void postEvent(QObject *receiver, QEvent *event, int priority)
void processEvents(QEventLoop::ProcessEventsFlags flags)
void processEvents@2(QEventLoop::ProcessEventsFlags flags, int maxtime)
void removeLibraryPath(QString path)
void removePostedEvents(QObject *receiver, int eventType)
bool removeTranslator(QTranslator *translationFile)
bool sendEvent(QObject *receiver, QEvent *event)
void sendPostedEvents(QObject *receiver, int event_type)
void setApplicationName(QString application)
void setApplicationVersion(QString version)
void setAttribute(Qt::ApplicationAttribute attribute, bool on)
void setEventDispatcher(QAbstractEventDispatcher *eventDispatcher)
void setLibraryPaths(QStringList paths)
void setOrganizationDomain(QString orgDomain)
void setOrganizationName(QString orgName)
void setQuitLockEnabled(bool enabled)
bool startingUp(void)
bool testAttribute(Qt::ApplicationAttribute attribute)
QString translate(char *context, char *sourceText, char *disambiguation, int n)

<class>
name: QTextBrowser
para: QWidget *
parent: QTextEdit
codename: GTextBrowser
passvmpointer
</class>

int backwardHistoryCount(void)
void clearHistory(void)
int forwardHistoryCount(void)
QString historyTitle(int i)
QUrl historyUrl(int i)
bool isBackwardAvailable(void)
bool isForwardAvailable(void)
bool openExternalLinks(void)
bool openLinks(void)
QStringList searchPaths(void)
void setOpenExternalLinks(bool open)
void setOpenLinks(bool open)
void setSearchPaths(QStringList paths)
QUrl source(void)

void setanchorClickedEvent(const char *)
void setbackwardAvailableEvent(const char *)
void setforwardAvailableEvent(const char *)
void sethighlightedEvent(const char *)
void sethistoryChangedEvent(const char *)
void setsourceChangedEvent(const char *)

const char *getanchorClickedEvent(void)
const char *getbackwardAvailableEvent(void)
const char *getforwardAvailableEvent(void)
const char *gethighlightedEvent(void)
const char *gethistoryChangedEvent(void)
const char *getsourceChangedEvent(void)

<class>
name: QRegion
para: void
</class>

QRect boundingRect(void)
bool contains(QPoint p)
bool contains@2(QRect r)
QRegion intersected(QRegion r)
QRegion intersected@2(QRect rect)
bool intersects(QRegion region)
bool intersects@2(QRect rect)
bool isEmpty(void)
bool isNull(void)
int rectCount(void)
QVector<QRect> rects(void)
void setRects(QRect *rects, int number)
QRegion subtracted(QRegion r)
void swap(QRegion other)
void translate(int dx, int dy)
void translate@2(QPoint point)
QRegion translated(int dx, int dy)
QRegion translated@2(QPoint p)
QRegion united(QRegion r)
QRegion united@2(QRect rect)
QRegion xored(QRegion r)

<class>
name: QStackedWidget
para: QWidget *
parent: QFrame
codename: GStackedWidget
passvmpointer
</class>

int addWidget(QWidget *widget)
int count(void)
int currentIndex(void)
QWidget * currentWidget(void)
int indexOf(QWidget *widget)
int insertWidget(int index, QWidget *widget)
void removeWidget(QWidget *widget)
QWidget * widget(int index)
void setCurrentIndex(int index)
void setCurrentWidget(QWidget *widget)

void setcurrentChangedEvent(const char *)
void setwidgetRemovedEvent(const char *)

const char *getcurrentChangedEvent(void)
const char *getwidgetRemovedEvent(void)


<class>
name: QCalendarWidget
para: QWidget *
parent: QWidget
codename: GCalendarWidget
passvmpointer
</class>

int dateEditAcceptDelay(void)
QMap<QDate, QTextCharFormat> dateTextFormat(void)
QTextCharFormat dateTextFormat@2(QDate date)
Qt::DayOfWeek firstDayOfWeek(void)
QTextCharFormat headerTextFormat(void)
QCalendarWidget::HorizontalHeaderFormat horizontalHeaderFormat(void)
bool isDateEditEnabled(void)
bool isGridVisible(void)
bool isNavigationBarVisible(void)
QDate maximumDate(void)
QDate minimumDate(void)
int monthShown(void)
QDate selectedDate(void)
QCalendarWidget::SelectionMode selectionMode(void)
void setDateEditAcceptDelay(int delay)
void setDateEditEnabled(bool enable)
void setDateTextFormat(QDate date, QTextCharFormat format)
void setFirstDayOfWeek(Qt::DayOfWeek dayOfWeek)
void setHeaderTextFormat(QTextCharFormat format)
void setHorizontalHeaderFormat(QCalendarWidget::HorizontalHeaderFormat format)
void setMaximumDate(QDate date)
void setMinimumDate(QDate date)
void setSelectionMode(QCalendarWidget::SelectionMode mode)
void setVerticalHeaderFormat(QCalendarWidget::VerticalHeaderFormat format)
void setWeekdayTextFormat(Qt::DayOfWeek dayOfWeek, QTextCharFormat format)
QCalendarWidget::VerticalHeaderFormat verticalHeaderFormat(void)
QTextCharFormat weekdayTextFormat(Qt::DayOfWeek dayOfWeek)
int yearShown(void)
void setCurrentPage(int year, int month)
void setDateRange(QDate min, QDate max)
void setGridVisible(bool show)
void setNavigationBarVisible(bool visible)
void setSelectedDate(QDate date)
void showNextMonth(void)
void showNextYear(void)
void showPreviousMonth(void)
void showPreviousYear(void)
void showSelectedDate(void)
void showToday(void)

void setactivatedEvent(const char *)
void setclickedEvent(const char *)
void setcurrentPageChangedEvent(const char *)
void setselectionChangedEvent(const char *)

const char *getactivatedEvent(void)
const char *getclickedEvent(void)
const char *getcurrentPageChangedEvent(void)
const char *getselectionChangedEvent(void)

<filter> ((iswindows() or ismacosx()) and sysget("RINGQT_ANDROID") = "")

<class>
name: QOpenGLFunctions
para: void
</class>

<runcode>
aNumberTypes + "GLint"
aNumberTypes + "GLuint"
aNumberTypes + "unsigned"
aNumberTypes + "GLboolean"
aNumberTypes + "GLdouble"
aNumberTypes + "GLfloat"
aNumberTypes + "GLchar"
aNumberTypes + "GLsizeiptr"
aNumberTypes + "GLintptr"
aNumberTypes + "GLbyte"
aNumberTypes + "GLshort"
aNumberTypes + "GLubyte"
aNumberTypes + "GLushort"
aNumberTypes + "GLulong"
aNumberTypes + "GLclampd"

aEnumTypes + "GLbitfield"
aEnumTypes + "GLenum"
aEnumTypes + "GLsizei"
aEnumTypes + "GLclampf"
</runcode>

void glActiveTexture(GLenum texture)
void glAttachShader(GLuint program, GLuint shader)
void glBindAttribLocation(GLuint program, GLuint index, char *name)
void glBindBuffer(GLenum target, GLuint buffer)
void glBindFramebuffer(GLenum target, GLuint framebuffer)
void glBindRenderbuffer(GLenum target, GLuint renderbuffer)
void glBindTexture(GLenum target, GLuint texture)
void glBlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
void glBlendEquation(GLenum mode)
void glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha)
void glBlendFunc(GLenum sfactor, GLenum dfactor)
void glBlendFuncSeparate(GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
void glBufferData(GLenum target, qopengl_GLsizeiptr size, void *data, GLenum usage)
void glBufferSubData(GLenum target, qopengl_GLintptr offset, qopengl_GLsizeiptr size, void *data)
GLenum glCheckFramebufferStatus(GLenum target)
void glClear(GLbitfield mask)
void glClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
void glClearDepthf(GLclampf depth)
void glClearStencil(GLint s)
void glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
void glCompileShader(GLuint shader)
void glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, void *data)
void glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, void *data)
void glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
void glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
GLuint glCreateProgram(void)
GLuint glCreateShader(GLenum type)
void glCullFace(GLenum mode)
void glDeleteBuffers(GLsizei n, GLuint *buffers)
void glDeleteFramebuffers(GLsizei n, GLuint *framebuffers)
void glDeleteProgram(GLuint program)
void glDeleteRenderbuffers(GLsizei n, GLuint *renderbuffers)
void glDeleteShader(GLuint shader)
void glDeleteTextures(GLsizei n, GLuint *textures)
void glDepthFunc(GLenum func)
void glDepthMask(GLboolean flag)
void glDepthRangef(GLclampf zNear, GLclampf zFar)
void glDetachShader(GLuint program, GLuint shader)
void glDisable(GLenum cap)
void glDisableVertexAttribArray(GLuint index)
void glDrawArrays(GLenum mode, GLint first, GLsizei count)
void glDrawElements(GLenum mode, GLsizei count, GLenum type, GLvoid *indices)
void glEnable(GLenum cap)
void glEnableVertexAttribArray(GLuint index)
void glFinish(void)
void glFlush(void)
void glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
void glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
void glFrontFace(GLenum mode)
void glGenBuffers(GLsizei n, GLuint *buffers)
void glGenFramebuffers(GLsizei n, GLuint *framebuffers)
void glGenRenderbuffers(GLsizei n, GLuint *renderbuffers)
void glGenTextures(GLsizei n, GLuint *textures)
void glGenerateMipmap(GLenum target)
void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufsize, GLsizei *length, GLint *size, GLenum *type, char *name)
void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufsize, GLsizei *length, GLint *size, GLenum *type, char *name)
void glGetAttachedShaders(GLuint program, GLsizei maxcount, GLsizei *count, GLuint *shaders)
GLint glGetAttribLocation(GLuint program, char *name)
void glGetBooleanv(GLenum pname, GLboolean *params)
void glGetBufferParameteriv(GLenum target, GLenum pname, GLint *params)
GLenum glGetError(void)
void glGetFloatv(GLenum pname, GLfloat *params)
void glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint *params)
void glGetIntegerv(GLenum pname, GLint *params)
void glGetProgramInfoLog(GLuint program, GLsizei bufsize, GLsizei *length, char *infolog)
void glGetProgramiv(GLuint program, GLenum pname, GLint *params)
void glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint *params)
void glGetShaderInfoLog(GLuint shader, GLsizei bufsize, GLsizei *length, char *infolog)
void glGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision)
void glGetShaderSource(GLuint shader, GLsizei bufsize, GLsizei *length, char *source)
void glGetShaderiv(GLuint shader, GLenum pname, GLint *params)
GLubyte * glGetString(GLenum name)
void glGetTexParameterfv(GLenum target, GLenum pname, GLfloat *params)
void glGetTexParameteriv(GLenum target, GLenum pname, GLint *params)
GLint glGetUniformLocation(GLuint program, char *name)
void glGetUniformfv(GLuint program, GLint location, GLfloat *params)
void glGetUniformiv(GLuint program, GLint location, GLint *params)
<comment>
void glGetVertexAttribPointerv(GLuint index, GLenum pname, void **pointer)
</comment>
void glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat *params)
void glGetVertexAttribiv(GLuint index, GLenum pname, GLint *params)
void glHint(GLenum target, GLenum mode)
GLboolean glIsBuffer(GLuint buffer)
GLboolean glIsEnabled(GLenum cap)
GLboolean glIsFramebuffer(GLuint framebuffer)
GLboolean glIsProgram(GLuint program)
GLboolean glIsRenderbuffer(GLuint renderbuffer)
GLboolean glIsShader(GLuint shader)
GLboolean glIsTexture(GLuint texture)
void glLineWidth(GLfloat width)
void glLinkProgram(GLuint program)
void glPixelStorei(GLenum pname, GLint param)
void glPolygonOffset(GLfloat factor, GLfloat units)
void glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels)
void glReleaseShaderCompiler(void)
void glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
void glSampleCoverage(GLclampf value, GLboolean invert)
void glScissor(GLint x, GLint y, GLsizei width, GLsizei height)
void glShaderBinary(GLint n, GLuint *shaders, GLenum binaryformat, void *binary, GLint length)
<comment>
void glShaderSource(GLuint shader, GLsizei count, char **string, GLint *length)\
</comment>
void glStencilFunc(GLenum func, GLint ref, GLuint mask)
void glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask)
void glStencilMask(GLuint mask)
void glStencilMaskSeparate(GLenum face, GLuint mask)
void glStencilOp(GLenum fail, GLenum zfail, GLenum zpass)
void glStencilOpSeparate(GLenum face, GLenum fail, GLenum zfail, GLenum zpass)
void glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, GLvoid *pixels)
void glTexParameterf(GLenum target, GLenum pname, GLfloat param)
void glTexParameterfv(GLenum target, GLenum pname, GLfloat *params)
void glTexParameteri(GLenum target, GLenum pname, GLint param)
void glTexParameteriv(GLenum target, GLenum pname, GLint *params)
void glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels)
void glUniform1f(GLint location, GLfloat x)
void glUniform1fv(GLint location, GLsizei count, GLfloat *v)
void glUniform1i(GLint location, GLint x)
void glUniform1iv(GLint location, GLsizei count, GLint *v)
void glUniform2f(GLint location, GLfloat x, GLfloat y)
void glUniform2fv(GLint location, GLsizei count, GLfloat *v)
void glUniform2i(GLint location, GLint x, GLint y)
void glUniform2iv(GLint location, GLsizei count, GLint *v)
void glUniform3f(GLint location, GLfloat x, GLfloat y, GLfloat z)
void glUniform3fv(GLint location, GLsizei count, GLfloat *v)
void glUniform3i(GLint location, GLint x, GLint y, GLint z)
void glUniform3iv(GLint location, GLsizei count, GLint *v)
void glUniform4f(GLint location, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
void glUniform4fv(GLint location, GLsizei count, GLfloat *v)
void glUniform4i(GLint location, GLint x, GLint y, GLint z, GLint w)
void glUniform4iv(GLint location, GLsizei count, GLint *v)
void glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, GLfloat *value)
void glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, GLfloat *value)
void glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, GLfloat *value)
void glUseProgram(GLuint program)
void glValidateProgram(GLuint program)
void glVertexAttrib1f(GLuint indx, GLfloat x)
void glVertexAttrib1fv(GLuint indx, GLfloat *values)
void glVertexAttrib2f(GLuint indx, GLfloat x, GLfloat y)
void glVertexAttrib2fv(GLuint indx, GLfloat *values)
void glVertexAttrib3f(GLuint indx, GLfloat x, GLfloat y, GLfloat z)
void glVertexAttrib3fv(GLuint indx, GLfloat *values)
void glVertexAttrib4f(GLuint indx, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
void glVertexAttrib4fv(GLuint indx, GLfloat *values)
void glVertexAttribPointer(GLuint indx, GLint size, GLenum type, GLboolean normalized, GLsizei stride, void *ptr)
void glViewport(GLint x, GLint y, GLsizei width, GLsizei height)
bool hasOpenGLFeature(QOpenGLFunctions::OpenGLFeature feature)
void initializeOpenGLFunctions(void)
QOpenGLFunctions::OpenGLFeatures openGLFeatures(void)

<class>
name: QOpenGLContext
para: QObject *
parent: QObject
</class>

bool create(void)
GLuint defaultFramebufferObject(void)
void doneCurrent(void)
QSet<QByteArray> extensions(void)
<comment>
QOpenGLExtraFunctions * extraFunctions(void)
</comment>
QSurfaceFormat format(void)
QOpenGLFunctions * functions(void)
QFunctionPointer getProcAddress(QByteArray procName)
QFunctionPointer getProcAddress@2(char *procName)
bool hasExtension(QByteArray extension)
bool isOpenGLES(void)
bool isValid(void)
bool makeCurrent(QSurface *surface)
QVariant nativeHandle(void)
QScreen * screen(void)
void setFormat(QSurfaceFormat format)
void setNativeHandle(QVariant handle)
void setScreen(QScreen *screen)
void setShareContext(QOpenGLContext *shareContext)
QOpenGLContext * shareContext(void)
QOpenGLContextGroup * shareGroup(void)
QSurface * surface(void)
void swapBuffers(QSurface *surface)
QAbstractOpenGLFunctions * versionFunctions(QOpenGLVersionProfile versionProfile))
TYPE * versionFunctions@2(void)
bool areSharing(QOpenGLContext *first, QOpenGLContext *second)
QOpenGLContext * currentContext(void)
QOpenGLContext * globalShareContext(void)
void * openGLModuleHandle(void)
QOpenGLContext::OpenGLModuleType openGLModuleType(void)
bool supportsThreadedOpenGL(void)

<register>
QOpenGLFunctions_3_2_Core *opengl32(void)
<register>

<code>
RING_FUNC(ring_QOpenGLContext_opengl32)
{
	QOpenGLFunctions_3_2_Core *f = QOpenGLContext::currentContext()->versionFunctions<QOpenGLFunctions_3_2_Core>();
	RING_API_RETCPOINTER(f,"QOpenGLFunctions_3_2_Core") ;
}
</code>

<class>
name: QOpenGLFunctions_3_2_Core
para: void
</class>

void glActiveTexture(GLenum texture)
void glAttachShader(GLuint program, GLuint shader)
void glBeginConditionalRender(GLuint id, GLenum mode)
void glBeginQuery(GLenum target, GLuint id)
void glBeginTransformFeedback(GLenum primitiveMode)
void glBindAttribLocation(GLuint program, GLuint index, GLchar *name)
void glBindBuffer(GLenum target, GLuint buffer)
void glBindBufferBase(GLenum target, GLuint index, GLuint buffer)
void glBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
void glBindFragDataLocation(GLuint program, GLuint color, GLchar *name)
void glBindFramebuffer(GLenum target, GLuint framebuffer)
void glBindRenderbuffer(GLenum target, GLuint renderbuffer)
void glBindTexture(GLenum target, GLuint texture)
void glBindVertexArray(GLuint array)
void glBlendColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
void glBlendEquation(GLenum mode)
void glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha)
void glBlendFunc(GLenum sfactor, GLenum dfactor)
void glBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
void glBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
void glBufferData(GLenum target, GLsizeiptr size, GLvoid *data, GLenum usage)
void glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, GLvoid *data)
GLenum glCheckFramebufferStatus(GLenum target)
void glClampColor(GLenum target, GLenum clamp)
void glClear(GLbitfield mask)
void glClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)
void glClearBufferfv(GLenum buffer, GLint drawbuffer, GLfloat *value)
void glClearBufferiv(GLenum buffer, GLint drawbuffer, GLint *value)
void glClearBufferuiv(GLenum buffer, GLint drawbuffer, GLuint *value)
void glClearColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
void glClearDepth(GLdouble depth)
void glClearStencil(GLint s)
GLenum glClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout)
void glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
void glColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
void glCompileShader(GLuint shader)
void glCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, GLvoid *data)
void glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, GLvoid *data)
void glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, GLvoid *data)
void glCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, GLvoid *data)
void glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, GLvoid *data)
void glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, GLvoid *data)
void glCopyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
void glCopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
void glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
void glCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
void glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
void glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
GLuint glCreateProgram(void)
GLuint glCreateShader(GLenum type)
void glCullFace(GLenum mode)
void glDeleteBuffers(GLsizei n, GLuint *buffers)
void glDeleteFramebuffers(GLsizei n, GLuint *framebuffers)
void glDeleteProgram(GLuint program)
void glDeleteQueries(GLsizei n, GLuint *ids)
void glDeleteRenderbuffers(GLsizei n, GLuint *renderbuffers)
void glDeleteShader(GLuint shader)
void glDeleteSync(GLsync sync)
void glDeleteTextures(GLsizei n, GLuint *textures)
void glDeleteVertexArrays(GLsizei n, GLuint *arrays)
void glDepthFunc(GLenum func)
void glDepthMask(GLboolean flag)
void glDepthRange(GLdouble nearVal, GLdouble farVal)
void glDetachShader(GLuint program, GLuint shader)
void glDisable(GLenum cap)
void glDisableVertexAttribArray(GLuint index)
void glDisablei(GLenum target, GLuint index)
void glDrawArrays(GLenum mode, GLint first, GLsizei count)
void glDrawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei instancecount)
void glDrawBuffer(GLenum mode)
void glDrawBuffers(GLsizei n, GLenum *bufs)
void glDrawElements(GLenum mode, GLsizei count, GLenum type, GLvoid *indices)
void glDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, GLvoid *indices, GLint basevertex)
void glDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, GLvoid *indices, GLsizei instancecount)
void glDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, GLvoid *indices, GLsizei instancecount, GLint basevertex)
void glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, GLvoid *indices)
void glDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, GLvoid *indices, GLint basevertex)
void glEnable(GLenum cap)
void glEnableVertexAttribArray(GLuint index)
void glEnablei(GLenum target, GLuint index)
void glEndConditionalRender(void)
void glEndQuery(GLenum target)
void glEndTransformFeedback(void)
GLsync glFenceSync(GLenum condition, GLbitfield flags)
void glFinish(void)
void glFlush(void)
void glFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length)
void glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
void glFramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level)
void glFramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
void glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
void glFramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
void glFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
void glFrontFace(GLenum mode)
void glGenBuffers(GLsizei n, GLuint *buffers)
void glGenFramebuffers(GLsizei n, GLuint *framebuffers)
void glGenQueries(GLsizei n, GLuint *ids)
void glGenRenderbuffers(GLsizei n, GLuint *renderbuffers)
void glGenTextures(GLsizei n, GLuint *textures)
void glGenVertexArrays(GLsizei n, GLuint *arrays)
void glGenerateMipmap(GLenum target)
void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)
void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)
void glGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName)
void glGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params)
void glGetActiveUniformName(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName)
void glGetActiveUniformsiv(GLuint program, GLsizei uniformCount, GLuint *uniformIndices, GLenum pname, GLint *params)
void glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *obj)
GLint glGetAttribLocation(GLuint program, GLchar *name)
void glGetBooleani_v(GLenum target, GLuint index, GLboolean *data)
void glGetBooleanv(GLenum pname, GLboolean *params)
void glGetBufferParameteri64v(GLenum target, GLenum pname, GLint64 *params)
void glGetBufferParameteriv(GLenum target, GLenum pname, GLint *params)
<comment>
void glGetBufferPointerv(GLenum target, GLenum pname, GLvoid **params)
</comment>
void glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, GLvoid *data)
void glGetCompressedTexImage(GLenum target, GLint level, GLvoid *img)
void glGetDoublev(GLenum pname, GLdouble *params)
GLenum glGetError(void)
void glGetFloatv(GLenum pname, GLfloat *params)
GLint glGetFragDataLocation(GLuint program, GLchar *name)
void glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint *params)
void glGetInteger64i_v(GLenum target, GLuint index, GLint64 *data)
void glGetInteger64v(GLenum pname, GLint64 *params)
void glGetIntegeri_v(GLenum target, GLuint index, GLint *data)
void glGetIntegerv(GLenum pname, GLint *params)
void glGetMultisamplefv(GLenum pname, GLuint index, GLfloat *val)
<comment>
void glGetPointerv(GLenum pname, GLvoid **params)
</comment>
void glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
void glGetProgramiv(GLuint program, GLenum pname, GLint *params)
void glGetQueryObjectiv(GLuint id, GLenum pname, GLint *params)
void glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint *params)
void glGetQueryiv(GLenum target, GLenum pname, GLint *params)
void glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint *params)
void glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
void glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source)
void glGetShaderiv(GLuint shader, GLenum pname, GLint *params)
GLubyte * glGetString(GLenum name)
GLubyte * glGetStringi(GLenum name, GLuint index)
void glGetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)
void glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels)
void glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat *params)
void glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint *params)
void glGetTexParameterIiv(GLenum target, GLenum pname, GLint *params)
void glGetTexParameterIuiv(GLenum target, GLenum pname, GLuint *params)
void glGetTexParameterfv(GLenum target, GLenum pname, GLfloat *params)
void glGetTexParameteriv(GLenum target, GLenum pname, GLint *params)
void glGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)
GLuint glGetUniformBlockIndex(GLuint program, GLchar *uniformBlockName)
<comment>
void glGetUniformIndices(GLuint program, GLsizei uniformCount, GLchar * *uniformNames, GLuint *uniformIndices)
</comment>
GLint glGetUniformLocation(GLuint program, GLchar *name)
void glGetUniformfv(GLuint program, GLint location, GLfloat *params)
void glGetUniformiv(GLuint program, GLint location, GLint *params)
void glGetUniformuiv(GLuint program, GLint location, GLuint *params)
void glGetVertexAttribIiv(GLuint index, GLenum pname, GLint *params)
void glGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint *params)
<comment>
void glGetVertexAttribPointerv(GLuint index, GLenum pname, GLvoid **pointer)
</comment>
void glGetVertexAttribdv(GLuint index, GLenum pname, GLdouble *params)
void glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat *params)
void glGetVertexAttribiv(GLuint index, GLenum pname, GLint *params)
void glHint(GLenum target, GLenum mode)
void glIndexub(GLubyte c)
void glIndexubv(GLubyte *c)
GLboolean glIsBuffer(GLuint buffer)
GLboolean glIsEnabled(GLenum cap)
GLboolean glIsEnabledi(GLenum target, GLuint index)
GLboolean glIsFramebuffer(GLuint framebuffer)
GLboolean glIsProgram(GLuint program)
GLboolean glIsQuery(GLuint id)
GLboolean glIsRenderbuffer(GLuint renderbuffer)
GLboolean glIsShader(GLuint shader)
GLboolean glIsSync(GLsync sync)
GLboolean glIsTexture(GLuint texture)
GLboolean glIsVertexArray(GLuint array)
void glLineWidth(GLfloat width)
void glLinkProgram(GLuint program)
void glLogicOp(GLenum opcode)
GLvoid * glMapBuffer(GLenum target, GLenum access)
GLvoid * glMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)
void glMultiDrawArrays(GLenum mode, GLint *first, GLsizei *count, GLsizei drawcount)
<comment>
void glMultiDrawElements(GLenum mode, GLsizei *count, GLenum type, GLvoid * *indices, GLsizei drawcount)
void glMultiDrawElementsBaseVertex(GLenum mode, GLsizei *count, GLenum type, GLvoid * *indices, GLsizei drawcount, GLint *basevertex)
</comment>
void glPixelStoref(GLenum pname, GLfloat param)
void glPixelStorei(GLenum pname, GLint param)
void glPointParameterf(GLenum pname, GLfloat param)
void glPointParameterfv(GLenum pname, GLfloat *params)
void glPointParameteri(GLenum pname, GLint param)
void glPointParameteriv(GLenum pname, GLint *params)
void glPointSize(GLfloat size)
void glPolygonMode(GLenum face, GLenum mode)
void glPolygonOffset(GLfloat factor, GLfloat units)
void glPrimitiveRestartIndex(GLuint index)
void glProvokingVertex(GLenum mode)
void glReadBuffer(GLenum mode)
void glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels)
void glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
void glRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
void glSampleCoverage(GLfloat value, GLboolean invert)
void glSampleMaski(GLuint index, GLbitfield mask)
void glScissor(GLint x, GLint y, GLsizei width, GLsizei height)
<comment>
void glShaderSource(GLuint shader, GLsizei count, GLchar * *string, GLint *length)
</comment>
void glStencilFunc(GLenum func, GLint ref, GLuint mask)
void glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask)
void glStencilMask(GLuint mask)
void glStencilMaskSeparate(GLenum face, GLuint mask)
void glStencilOp(GLenum fail, GLenum zfail, GLenum zpass)
void glStencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)
void glTexBuffer(GLenum target, GLenum internalformat, GLuint buffer)
void glTexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, GLvoid *pixels)
void glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, GLvoid *pixels)
void glTexImage2DMultisample(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
void glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, GLvoid *pixels)
void glTexImage3DMultisample(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
void glTexParameterIiv(GLenum target, GLenum pname, GLint *params)
void glTexParameterIuiv(GLenum target, GLenum pname, GLuint *params)
void glTexParameterf(GLenum target, GLenum pname, GLfloat param)
void glTexParameterfv(GLenum target, GLenum pname, GLfloat *params)
void glTexParameteri(GLenum target, GLenum pname, GLint param)
void glTexParameteriv(GLenum target, GLenum pname, GLint *params)
void glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, GLvoid *pixels)
void glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels)
void glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLvoid *pixels)
<comment>
void glTransformFeedbackVaryings(GLuint program, GLsizei count, GLchar * *varyings, GLenum bufferMode)
</comment>
void glUniform1f(GLint location, GLfloat v0)
void glUniform1fv(GLint location, GLsizei count, GLfloat *value)
void glUniform1i(GLint location, GLint v0)
void glUniform1iv(GLint location, GLsizei count, GLint *value)
void glUniform1ui(GLint location, GLuint v0)
void glUniform1uiv(GLint location, GLsizei count, GLuint *value)
void glUniform2f(GLint location, GLfloat v0, GLfloat v1)
void glUniform2fv(GLint location, GLsizei count, GLfloat *value)
void glUniform2i(GLint location, GLint v0, GLint v1)
void glUniform2iv(GLint location, GLsizei count, GLint *value)
void glUniform2ui(GLint location, GLuint v0, GLuint v1)
void glUniform2uiv(GLint location, GLsizei count, GLuint *value)
void glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
void glUniform3fv(GLint location, GLsizei count, GLfloat *value)
void glUniform3i(GLint location, GLint v0, GLint v1, GLint v2)
void glUniform3iv(GLint location, GLsizei count, GLint *value)
void glUniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2)
void glUniform3uiv(GLint location, GLsizei count, GLuint *value)
void glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
void glUniform4fv(GLint location, GLsizei count, GLfloat *value)
void glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
void glUniform4iv(GLint location, GLsizei count, GLint *value)
void glUniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
void glUniform4uiv(GLint location, GLsizei count, GLuint *value)
void glUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding)
void glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, GLfloat *value)
void glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, GLfloat *value)
void glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, GLfloat *value)
void glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, GLfloat *value)
void glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, GLfloat *value)
void glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, GLfloat *value)
void glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, GLfloat *value)
void glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, GLfloat *value)
void glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, GLfloat *value)
GLboolean glUnmapBuffer(GLenum target)
void glUseProgram(GLuint program)
void glValidateProgram(GLuint program)
<comment>
void glVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, GLvoid *pointer)
</comment>
void glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLvoid *pointer)
void glViewport(GLint x, GLint y, GLsizei width, GLsizei height)
void glWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout)

<class>
name: QSurfaceFormat
para: void
</class>

int alphaBufferSize(void)
int blueBufferSize(void)
<comment>
QSurfaceFormat::ColorSpace colorSpace(void)
</comment>
int depthBufferSize(void)
int greenBufferSize(void)
bool hasAlpha(void)
int majorVersion(void)
int minorVersion(void)
QSurfaceFormat::FormatOptions options(void)
QSurfaceFormat::OpenGLContextProfile profile(void)
int redBufferSize(void)
QSurfaceFormat::RenderableType renderableType(void)
int samples(void)
void setAlphaBufferSize(int size)
void setBlueBufferSize(int size)
<comment>
void setColorSpace(QSurfaceFormat::ColorSpace colorSpace)
</comment>
void setDepthBufferSize(int size)
void setGreenBufferSize(int size)
void setMajorVersion(int major)
void setMinorVersion(int minor)
void setOption(QSurfaceFormat::FormatOption option, bool on)
void setOptions(QSurfaceFormat::FormatOptions options)
void setProfile(QSurfaceFormat::OpenGLContextProfile profile)
void setRedBufferSize(int size)
void setRenderableType(QSurfaceFormat::RenderableType type)
void setSamples(int numSamples)
void setStencilBufferSize(int size)
void setStereo(bool enable)
void setSwapBehavior(QSurfaceFormat::SwapBehavior behavior)
void setSwapInterval(int interval)
void setVersion(int major, int minor)
int stencilBufferSize(void)
bool stereo(void)
QSurfaceFormat::SwapBehavior swapBehavior(void)
int swapInterval(void)
bool testOption(QSurfaceFormat::FormatOption option)
QSurfaceFormat defaultFormat(void)
void setDefaultFormat(QSurfaceFormat format)

<class>
name: QOpenGLWidget
para: QWidget *
parent: QWidget
codename: OpenGLWidget
passvmpointer
</class>

void geteventparameters(void) 
void setInitEvent(const char *cStr)
const char *getInitEvent(void)
void setPaintEvent(const char *cStr)
const char *getPaintEvent(void)
void setResizeEvent(const char *cStr)
const char *getResizeEvent(void)

QOpenGLContext * context(void)
GLuint defaultFramebufferObject(void)
void doneCurrent(void)
QSurfaceFormat format(void)
QImage grabFramebuffer(void)
bool isValid(void)
void makeCurrent(void)
void setFormat(QSurfaceFormat format)
<comment>
void setTextureFormat(GLenum texFormat)
GLenum textureFormat(void)
</comment>
void setUpdateBehavior(QOpenGLWidget::UpdateBehavior updateBehavior)
QOpenGLWidget::UpdateBehavior updateBehavior(void)

<class>
name: QOpenGLVersionProfile
para: void
</class>

bool hasProfiles(void)
bool isLegacyVersion(void)
bool isValid(void)
QSurfaceFormat::OpenGLContextProfile profile(void)
void setProfile(QSurfaceFormat::OpenGLContextProfile profile)
void setVersion(int majorVersion, int minorVersion)
QPair<int, int> version(void)

</filter>

<class>
name: QVector2D
para: float,float
</class>

float distanceToLine(QVector2D point, QVector2D direction)
float distanceToPoint(QVector2D point)
bool isNull(void)
float length(void)
float lengthSquared(void)
void normalize(void)
QVector2D normalized(void)
void setX(float x)
void setY(float y)
QPoint toPoint(void)
QPointF toPointF(void)
QVector3D toVector3D(void)
QVector4D toVector4D(void)
float x(void)
float y(void)
float dotProduct(QVector2D v1, QVector2D v2)

<class>
name: QVector3D
para: float,float,float
</class>

float distanceToLine(QVector3D point, QVector3D direction)
float distanceToPlane(QVector3D plane, QVector3D normal)
float distanceToPlane@2(QVector3D plane1, QVector3D plane2, QVector3D plane3)
float distanceToPoint(QVector3D point)
bool isNull(void)
float length(void)
float lengthSquared(void)
void normalize(void)
QVector3D normalized(void)
<comment>
QVector3D project(QMatrix4x4 modelView, QMatrix4x4 projection, QRect viewport)
</comment>
void setX(float x)
void setY(float y)
void setZ(float z)
QPoint toPoint(void)
QPointF toPointF(void)
QVector2D toVector2D(void)
QVector4D toVector4D(void)
<comment>
QVector3D unproject(QMatrix4x4 modelView, QMatrix4x4 projection, QRect viewport)
</comment>
float x(void)
float y(void)
float z(void)
QVector3D crossProduct(QVector3D v1, QVector3D v2)
float dotProduct(QVector3D v1, QVector3D v2)
QVector3D normal(QVector3D v1, QVector3D v2)
QVector3D normal@2(QVector3D v1, QVector3D v2, QVector3D v3)

<class>
name: QVector4D
para: float,float,float,float
</class>

bool isNull(void)
float length(void)
float lengthSquared(void)
void normalize(void)
QVector4D normalized(void)
void setW(float w)
void setX(float x)
void setY(float y)
void setZ(float z)
QPoint toPoint(void)
QPointF toPointF(void)
QVector2D toVector2D(void)
QVector2D toVector2DAffine(void)
QVector3D toVector3D(void)
QVector3D toVector3DAffine(void)
float w(void)
float x(void)
float y(void)
float z(void)
float dotProduct(QVector4D v1, QVector4D v2)

<class>
name: QQuaternion
para: float,float,float,float
</class>

<comment>
QQuaternion conjugated(void)
void getAxes(QVector3D *xAxis, QVector3D *yAxis, QVector3D *zAxis)
void getAxisAndAngle(float *x, float *y, float *z, float *angle)
void getAxisAndAngle@2(QVector3D *axis, float *angle)
void getEulerAngles(float *pitch, float *yaw, float *roll)
QQuaternion inverted(void)
</comment>
bool isIdentity(void)
bool isNull(void)
float length(void)
float lengthSquared(void)
void normalize(void)
QQuaternion normalized(void)
QVector3D rotatedVector(QVector3D vector)
float scalar(void)
void setScalar(float scalar)
void setVector(QVector3D vector)
void setVector@2(float x, float y, float z)
void setX(float x)
void setY(float y)
void setZ(float z)
<comment>
QVector3D toEulerAngles(void)
QMatrix3x3 toRotationMatrix(void)
</comment>
QVector4D toVector4D(void)
QVector3D vector(void)
float x(void)
float y(void)
float z(void)
<comment>
float dotProduct(QQuaternion q1, QQuaternion q2)
QQuaternion fromAxes(QVector3D xAxis, QVector3D yAxis, QVector3D zAxis)
QQuaternion fromDirection(QVector3D direction, QVector3D up)
QQuaternion fromEulerAngles(float pitch, float yaw, float roll)
QQuaternion fromEulerAngles@2(QVector3D eulerAngles)
QQuaternion fromRotationMatrix(QMatrix3x3 rot3x3)
QQuaternion rotationTo(QVector3D from, QVector3D to)
</comment>
QQuaternion fromAxisAndAngle(QVector3D axis, float angle)
QQuaternion fromAxisAndAngle@2(float x, float y, float z, float angle)
QQuaternion nlerp(QQuaternion q1, QQuaternion q2, float t)
QQuaternion slerp(QQuaternion q1, QQuaternion q2, float t)

<class>
name: QMatrix4x4
para: qreal,qreal,qreal,qreal,qreal,qreal,qreal,qreal,qreal,qreal,qreal,qreal,qreal,qreal,qreal,qreal
</class>

QVector4D column(int index)
qreal * constData(void)
<comment>
void copyDataTo(qreal * values)
</comment>
qreal * data(void)
qreal * data@2(void)
qreal determinant(void)
void fill(qreal value)
void flipCoordinates(void)
void frustum(qreal left, qreal right, qreal bottom, qreal top, qreal nearPlane, qreal farPlane)
QMatrix4x4 inverted(bool * invertible)
bool isIdentity(void)
void lookAt(QVector3D eye, QVector3D center, QVector3D up)
QPoint map(QPoint point)
QPointF map@2(QPointF point)
QVector3D map@3(QVector3D point)
QVector4D map@4(QVector4D point)
QRect mapRect(QRect rect)
QRectF mapRect@2(QRectF rect)
QVector3D mapVector(QVector3D vector)
QMatrix3x3 normalMatrix(void)
void optimize(void)
void ortho(qreal left, qreal right, qreal bottom, qreal top, qreal nearPlane, qreal farPlane)
void ortho@2(QRect rect)
void ortho@3(QRectF rect)
void perspective(qreal angle, qreal aspect, qreal nearPlane, qreal farPlane)
void rotate(qreal angle, QVector3D vector)
void rotate@2(QQuaternion quaternion)
void rotate@3(qreal angle, qreal x, qreal y, qreal z)
QVector4D row(int index)
void scale(QVector3D vector)
void scale@2(qreal x, qreal y)
void scale@3(qreal x, qreal y, qreal z)
void scale@4(qreal factor)
void setColumn(int index, QVector4D value)
void setRow(int index, QVector4D value)
void setToIdentity(void)
QMatrix toAffine(void)
<comment>
QGenericMatrix<N, M, qreal> toGenericMatrix(void)
</comment>
QTransform toTransform(void)
QTransform toTransform@2(qreal distanceToPlane)
void translate(QVector3D vector)
void translate@2(qreal x, qreal y)
void translate@3(qreal x, qreal y, qreal z)
QMatrix4x4 transposed(void)

<filter> (iswindows() and sysget("RINGQT_ANDROID") = "")

<class>
name: QOpenGLPaintDevice
para: void
parent: QPaintDevice
</class>


QOpenGLContext * context(void)
qreal dotsPerMeterX(void)
qreal dotsPerMeterY(void)
void ensureActiveTarget(void)
bool paintFlipped(void)
void setDevicePixelRatio(qreal devicePixelRatio)
void setDotsPerMeterX(qreal dpmx)
void setDotsPerMeterY(qreal dpmy)
void setPaintFlipped(bool flipped)
void setSize(QSize size)
QSize size(void)

<class>
name: QPaintDevice
nonew
</class>

int colorCount(void)
int depth(void)
int devicePixelRatio(void)
<comment>
qreal devicePixelRatioF(void)
</comment>
int height(void)
int heightMM(void)
int logicalDpiX(void)
int logicalDpiY(void)
QPaintEngine * paintEngine(void)
bool paintingActive(void)
int physicalDpiX(void)
int physicalDpiY(void)
int width(void)
int widthMM(void)

<filter> (sysget("RINGQT_ANDROID") = "")

<class>
name: QOpenGLTimerQuery
para: QObject *
</class>

void begin(void)
bool create(void)
void destroy(void)
void end(void)
bool isCreated(void)
bool isResultAvailable(void)
GLuint objectId(void)
void recordTimestamp(void)
GLuint64 waitForResult(void)
GLuint64 waitForTimestamp(void)

<class>
name: QOpenGLDebugLogger
para: QObject *
</class>

void disableMessages(QOpenGLDebugMessage::Sources sources, QOpenGLDebugMessage::Types types, QOpenGLDebugMessage::Severities severities)
void disableMessages@2(QVector<GLuint> ids, QOpenGLDebugMessage::Sources sources, QOpenGLDebugMessage::Types types)
void enableMessages(QOpenGLDebugMessage::Sources sources, QOpenGLDebugMessage::Types types, QOpenGLDebugMessage::Severities severities)
void enableMessages@2(QVector<GLuint> ids, QOpenGLDebugMessage::Sources sources, QOpenGLDebugMessage::Types types)
bool initialize(void)
bool isLogging(void)
QList<QOpenGLDebugMessage> loggedMessages(void)
QOpenGLDebugLogger::LoggingMode loggingMode(void)
qint64 maximumMessageLength(void)
void popGroup(void)
void pushGroup(QString name, GLuint id, QOpenGLDebugMessage::Source source)
void logMessage(QOpenGLDebugMessage debugMessage)
void startLogging(QOpenGLDebugLogger::LoggingMode loggingMode)
void stopLogging(void)

<class>
name: QOpenGLFramebufferObject
para: int,int,GLenum
</class>

<comment>
void addColorAttachment(QSize size, GLenum internalFormat)
void addColorAttachment@2(int width, int height, GLenum internalFormat)
</comment>
QOpenGLFramebufferObject::Attachment attachment(void)
bool bind(void)
QOpenGLFramebufferObjectFormat format(void)
GLuint handle(void)
int height(void)
bool isBound(void)
bool isValid(void)
bool release(void)
void setAttachment(QOpenGLFramebufferObject::Attachment attachment)
QSize size(void)
<comment>
QVector<QSize> sizes(void)
GLuint takeTexture(void)
GLuint takeTexture@2(int colorQOpenGLFramebufferObject::AttachmentIndex)
</comment>
GLuint texture(void)
<comment>
QVector<GLuint> textures(void)
</comment>
<comment>
QImage toImage(bool flipped)
QImage toImage@3(bool flipped, int colorQOpenGLFramebufferObject::AttachmentIndex)
</comment>
QImage toImage@2(void)
int width(void)
bool bindDefault(void)
<comment>
void blitFramebuffer(QOpenGLFramebufferObject *target, QRect targetRect, QOpenGLFramebufferObject *source, QRect sourceRect, GLbitfield buffers, GLenum filter, int readColorQOpenGLFramebufferObject::AttachmentIndex, int drawColorQOpenGLFramebufferObject::AttachmentIndex, QOpenGLFramebufferObject::FramebufferRestorePolicy restorePolicy)
void blitFramebuffer@2(QOpenGLFramebufferObject *target, QRect targetRect, QOpenGLFramebufferObject *source, QRect sourceRect, GLbitfield buffers, GLenum filter, int readColorQOpenGLFramebufferObject::AttachmentIndex, int drawColorQOpenGLFramebufferObject::AttachmentIndex)
void blitFramebuffer@3(QOpenGLFramebufferObject *target, QRect targetRect, QOpenGLFramebufferObject *source, QRect sourceRect, GLbitfield buffers, GLenum filter)
void blitFramebuffer@4(QOpenGLFramebufferObject *target, QOpenGLFramebufferObject *source, GLbitfield buffers, GLenum filter)
</comment>
bool hasOpenGLFramebufferBlit(void)
bool hasOpenGLFramebufferObjects(void)

<class>
name: QOpenGLVertexArrayObject
para: QObject *
</class>

void bind(void)
bool create(void)
void destroy(void)
bool isCreated(void)
GLuint objectId(void)
void release(void)

<class>
name: QOpenGLBuffer
para: void
</class>

void allocate(void *data, int count)
void allocate@2(int count)
bool bind(void)
GLuint bufferId(void)
bool create(void)
void destroy(void)
bool isCreated(void)
void * map(QOpenGLBuffer::Access access)
<comment>
void * mapRange(int offset, int count, QOpenGLBuffer::RangeAccessFlags access)
</comment>
bool read(int offset, void *data, int count)
void release(void)
void setUsagePattern(QOpenGLBuffer::UsagePattern value)
int size(void)
QOpenGLBuffer::Type type(void)
bool unmap(void)
QOpenGLBuffer::UsagePattern usagePattern(void)
void write(int offset, void *data, int count)
void release@2(QOpenGLBuffer::Type type)

<class>
name: QOpenGLShaderProgram
para: QObject *
</class>

<comment>
bool addCacheableShaderFromSourceCode(QOpenGLShader::ShaderType type, char *source)
bool addCacheableShaderFromSourceCode@2(QOpenGLShader::ShaderType type, QByteArray source)
bool addCacheableShaderFromSourceCode@3(QOpenGLShader::ShaderType type, QString source)
bool addCacheableShaderFromSourceFile(QOpenGLShader::ShaderType type, QString fileName)
</comment>
bool addShader(QOpenGLShader *shader)
bool addShaderFromSourceCode(QOpenGLShader::ShaderType type, char *source)
bool addShaderFromSourceCode@2(QOpenGLShader::ShaderType type, QByteArray source)
bool addShaderFromSourceCode@3(QOpenGLShader::ShaderType type, QString source)
bool addShaderFromSourceFile(QOpenGLShader::ShaderType type, QString fileName)
int attributeLocation(char *name)
int attributeLocation@2(QByteArray name)
int attributeLocation@3(QString name)
bool bind(void)
void bindAttributeLocation(char *name, int location)
void bindAttributeLocation@2(QByteArray name, int location)
void bindAttributeLocation@3(QString name, int location)
<comment>
bool create(void)
</comment>
QVector<float> defaultInnerTessellationLevels(void)
QVector<float> defaultOuterTessellationLevels(void)
void disableAttributeArray(int location)
void disableAttributeArray@2(char *name)
void enableAttributeArray(int location)
void enableAttributeArray@2(char *name)
bool isLinked(void)
bool link(void)
QString log(void)
int maxGeometryOutputVertices(void)
int patchVertexCount(void)
GLuint programId(void)
void release(void)
void removeAllShaders(void)
void removeShader(QOpenGLShader *shader)
void setAttributeArray(int location, GLfloat *values, int tupleSize, int stride)
void setAttributeArray@2(int location, QVector2D *values, int stride)
void setAttributeArray@3(int location, QVector3D *values, int stride)
void setAttributeArray@4(int location, QVector4D *values, int stride)
void setAttributeArray@5(int location, GLenum type, void *values, int tupleSize, int stride)
void setAttributeArray@6(char *name, GLfloat *values, int tupleSize, int stride)
void setAttributeArray@7(char *name, QVector2D *values, int stride)
void setAttributeArray@8(char *name, QVector3D *values, int stride)
void setAttributeArray@9(char *name, QVector4D *values, int stride)
void setAttributeArray@10(char *name, GLenum type, void *values, int tupleSize, int stride)
void setAttributeBuffer(int location, GLenum type, int offset, int tupleSize, int stride)
void setAttributeBuffer@2(char *name, GLenum type, int offset, int tupleSize, int stride)
void setAttributeValue(int location, GLfloat value)
void setAttributeValue@2(int location, GLfloat x, GLfloat y)
void setAttributeValue@3(int location, GLfloat x, GLfloat y, GLfloat z)
void setAttributeValue@4(int location, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
void setAttributeValue@5(int location, QVector2D value)
void setAttributeValue@6(int location, QVector3D value)
void setAttributeValue@7(int location, QVector4D value)
void setAttributeValue@8(int location, QColor value)
void setAttributeValue@9(int location, GLfloat *values, int columns, int rows)
void setAttributeValue@10(char *name, GLfloat value)
void setAttributeValue@11(char *name, GLfloat x, GLfloat y)
void setAttributeValue@12(char *name, GLfloat x, GLfloat y, GLfloat z)
void setAttributeValue@13(char *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
void setAttributeValue@14(char *name, QVector2D value)
void setAttributeValue@15(char *name, QVector3D value)
void setAttributeValue@16(char *name, QVector4D value)
<comment>
void setAttributeValue@17(char *name, QColor value)
void setAttributeValue@18(char *name, GLfloat *values, int columns, int rows)
</comment>

void setDefaultInnerTessellationLevels(QVector<float> levels)
void setDefaultOuterTessellationLevels(QVector<float> levels)
void setPatchVertexCount(int count)
void setUniformValue(int location, GLfloat value)
void setUniformValue@2(int location, GLint value)
void setUniformValue@3(char *name, QColor color)
void setUniformValue@4(char *name, QPoint point)
void setUniformValue@5(char *name, QPointF point)
void setUniformValue@6(char *name, QSize size)
void setUniformValue@7(char *name, QSizeF size)
void setUniformValue@8(char *name, QMatrix2x2 value)
void setUniformValue@9(char *name, QMatrix2x3 value)
void setUniformValue@10(char *name, QMatrix2x4 value)
void setUniformValue@11(char *name, QMatrix3x2 value)
void setUniformValue@12(char *name, QMatrix3x3 value)
void setUniformValue@13(char *name, QMatrix3x4 value)
void setUniformValue@14(char *name, QMatrix4x2 value)
void setUniformValue@15(char *name, QMatrix4x3 value)
void setUniformValue@16(char *name, QMatrix4x4 value)
<comment>
void setUniformValue@17(char *name, GLfloat[2][2] value)
void setUniformValue@18(char *name, GLfloat[3][3] value)
void setUniformValue@19(char *name, GLfloat[4][4] value)
</comment>
void setUniformValue@20(char *name, QTransform value)
void setUniformValue@21(int location, GLuint value)
void setUniformValue@22(int location, GLfloat x, GLfloat y)
void setUniformValue@23(int location, GLfloat x, GLfloat y, GLfloat z)
void setUniformValue@24(int location, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
void setUniformValue@25(int location, QVector2D value)
void setUniformValue@26(int location, QVector3D value)
void setUniformValue@27(int location, QVector4D value)
void setUniformValue@28(int location, QColor color)
void setUniformValue@29(int location, QPoint point)
void setUniformValue@30(int location, QPointF point)
void setUniformValue@31(int location, QSize size)
void setUniformValue@32(int location, QSizeF size)
void setUniformValue@33(int location, QMatrix2x2 value)
void setUniformValue@34(int location, QMatrix2x3 value)
void setUniformValue@35(int location, QMatrix2x4 value)
void setUniformValue@36(int location, QMatrix3x2 value)
void setUniformValue@37(int location, QMatrix3x3 value)
void setUniformValue@38(int location, QMatrix3x4 value)
void setUniformValue@39(int location, QMatrix4x2 value)
void setUniformValue@40(int location, QMatrix4x3 value)
void setUniformValue@41(int location, QMatrix4x4 value)
<comment>
void setUniformValue@42(int location, GLfloat[2][2] value)
void setUniformValue@43(int location, GLfloat[3][3] value)
void setUniformValue@44(int location, GLfloat[4][4] value)
</comment>
void setUniformValue@45(int location, QTransform value)
void setUniformValue@46(char *name, GLfloat value)
void setUniformValue@47(char *name, GLint value)
void setUniformValue@48(char *name, GLuint value)
void setUniformValue@49(char *name, GLfloat x, GLfloat y)
void setUniformValue@50(char *name, GLfloat x, GLfloat y, GLfloat z)
void setUniformValue@51(char *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
void setUniformValue@52(char *name, QVector2D value)
void setUniformValue@53(char *name, QVector3D value)
void setUniformValue@54(char *name, QVector4D value)
void setUniformValueArray(int location, GLfloat *values, int count, int tupleSize)
void setUniformValueArray@2(int location, GLint *values, int count)
void setUniformValueArray@3(int location, GLuint *values, int count)
void setUniformValueArray@4(int location, QVector2D *values, int count)
void setUniformValueArray@5(int location, QVector3D *values, int count)
void setUniformValueArray@6(int location, QVector4D *values, int count)
void setUniformValueArray@7(int location, QMatrix2x2 *values, int count)
void setUniformValueArray@8(int location, QMatrix2x3 *values, int count)
void setUniformValueArray@9(int location, QMatrix2x4 *values, int count)
void setUniformValueArray@10(int location, QMatrix3x2 *values, int count)
void setUniformValueArray@11(int location, QMatrix3x3 *values, int count)
void setUniformValueArray@12(int location, QMatrix3x4 *values, int count)
void setUniformValueArray@13(int location, QMatrix4x2 *values, int count)
void setUniformValueArray@14(int location, QMatrix4x3 *values, int count)
void setUniformValueArray@15(int location, QMatrix4x4 *values, int count)
void setUniformValueArray@16(char *name, GLfloat *values, int count, int tupleSize)
void setUniformValueArray@17(char *name, GLint *values, int count)
void setUniformValueArray@18(char *name, GLuint *values, int count)
void setUniformValueArray@19(char *name, QVector2D *values, int count)
void setUniformValueArray@20(char *name, QVector3D *values, int count)
void setUniformValueArray@21(char *name, QVector4D *values, int count)
void setUniformValueArray@22(char *name, QMatrix2x2 *values, int count)
void setUniformValueArray@23(char *name, QMatrix2x3 *values, int count)
void setUniformValueArray@24(char *name, QMatrix2x4 *values, int count)
void setUniformValueArray@25(char *name, QMatrix3x2 *values, int count)
void setUniformValueArray@26(char *name, QMatrix3x3 *values, int count)
void setUniformValueArray@27(char *name, QMatrix3x4 *values, int count)
void setUniformValueArray@28(char *name, QMatrix4x2 *values, int count)
void setUniformValueArray@29(char *name, QMatrix4x3 *values, int count)
void setUniformValueArray@30(char *name, QMatrix4x4 *values, int count)
QList<QOpenGLShader *> shaders(void)
int uniformLocation(char *name)
int uniformLocation@2(QByteArray name)
int uniformLocation@3(QString name)
bool hasOpenGLShaderPrograms(QOpenGLContext *context)

<class>
name: QOpenGLShader
para: QOpenGLShader::ShaderType,QObject *
</class>

bool compileSourceCode(char *source)
bool compileSourceCode@2(QByteArray source)
bool compileSourceCode@3(QString source)
bool compileSourceFile(QString fileName)
bool isCompiled(void)
QString log(void)
GLuint shaderId(void)
QOpenGLShader::ShaderType shaderType(void)
QByteArray sourceCode(void)
bool hasOpenGLShaders(QOpenGLShader::ShaderType type, QOpenGLContext *context)

<class>
name: QOpenGLTexture
para: QOpenGLTexture::Target
</class>

void allocateStorage(void)
<comment>
void allocateStorage@2(QOpenGLTexture::PixelFormat pixelFormat, QOpenGLTexture::PixelType pixelType)
</comment>
void bind(void)
void bind@2(uint unit, QOpenGLTexture::TextureUnitReset reset)
QColor borderColor(void)
void borderColor@2(float *border)
void borderColor@3(int *border)
void borderColor@4(unsigned int *border)
<comment>
QOpenGLTexture::ComparisonFunction comparisonFunction(void)
QOpenGLTexture::ComparisonMode comparisonMode(void)
</comment>
bool create(void)
QOpenGLTexture * createTextureView(QOpenGLTexture::Target target, QOpenGLTexture::TextureFormat viewFormat, int minimumMipmapLevel, int maximumMipmapLevel, int minimumLayer, int maximumLayer)
int depth(void)
QOpenGLTexture::DepthStencilMode depthStencilMode(void)
void destroy(void)
int faces(void)
QOpenGLTexture::TextureFormat format(void)
void generateMipMaps(void)
void generateMipMaps@2(int baseLevel, bool resetBaseLevel)
int height(void)
bool isAutoMipMapGenerationEnabled(void)
bool isBound(void)
bool isBound@2(uint unit)
bool isCreated(void)
<comment>
bool isFixedSamplePositions(void)
</comment>
bool isStorageAllocated(void)
bool isTextureView(void)
int layers(void)
QPair<float, float> levelOfDetailRange(void)
float levelofDetailBias(void)
QOpenGLTexture::Filter magnificationFilter(void)
float maximumAnisotropy(void)
float maximumLevelOfDetail(void)
int maximumMipLevels(void)
<comment>
QPair<QOpenGLTexture::Filter, QOpenGLTexture::Filter> minMagQOpenGLTexture::Filters(void)
</comment>
QOpenGLTexture::Filter minificationFilter(void)
float minimumLevelOfDetail(void)
int mipBaseLevel(void)
<comment>
QPair<int, int> mipLevelRange(void)
</comment>
int mipLevels(void)
int mipMaxLevel(void)
void release(void)
void release@2(uint unit, QOpenGLTexture::TextureUnitReset reset)
<comment>
int samples(void)
</comment>
void setAutoMipMapGenerationEnabled(bool enabled)
void setBorderColor(QColor color)
<comment>
void setBorderColor@2(float r, float g, float b, float a)
</comment>
void setBorderColor@3(int r, int g, int b, int a)
void setBorderColor@4(uint r, uint g, uint b, uint a)
<comment>
void setComparisonFunction(QOpenGLTexture::ComparisonFunction function)
void setComparisonMode(QOpenGLTexture::ComparisonMode mode)
</comment>
void setCompressedData(int mipLevel, int layer, QOpenGLTexture::CubeMapFace cubeFace, int dataSize, void *data, QOpenGLPixelTransferOptions * options)
<comment>
void setCompressedData@2(int mipLevel, int layer, int layerCount, QOpenGLTexture::CubeMapFace cubeFace, int dataSize, void *data, QOpenGLPixelTransferOptions * options)
</comment>
void setCompressedData@3(int mipLevel, int layer, int dataSize, void *data, QOpenGLPixelTransferOptions * options)
void setCompressedData@4(int mipLevel, int dataSize, void *data, QOpenGLPixelTransferOptions * options)
void setCompressedData@5(int dataSize, void *data, QOpenGLPixelTransferOptions * options)
void setData(int mipLevel, int layer, QOpenGLTexture::CubeMapFace cubeFace, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, void *data, QOpenGLPixelTransferOptions * options)
<comment>
void setData@2(int mipLevel, int layer, int layerCount, QOpenGLTexture::CubeMapFace cubeFace, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, void *data, QOpenGLPixelTransferOptions * options)
</comment>
void setData@3(int mipLevel, int layer, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, void *data, QOpenGLPixelTransferOptions * options)
void setData@4(int mipLevel, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, void *data, QOpenGLPixelTransferOptions * options)
void setData@5(QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, void *data, QOpenGLPixelTransferOptions * options)
void setData@6(QImage image, QOpenGLTexture::MipMapGeneration genMipMaps)
void setDepthStencilMode(QOpenGLTexture::DepthStencilMode mode)
<comment>
void setFixedSamplePositions(bool fixed)
</comment>
void setFormat(QOpenGLTexture::TextureFormat format)
void setLayers(int layers)
void setLevelOfDetailRange(float min, float max)
void setLevelofDetailBias(float bias)
void setMagnificationFilter(QOpenGLTexture::Filter filter)
void setMaximumAnisotropy(float anisotropy)
void setMaximumLevelOfDetail(float value)
void setMinMagFilters(QOpenGLTexture::Filter minificationQOpenGLTexture::Filter, QOpenGLTexture::Filter magnificationQOpenGLTexture::Filter)
void setMinificationFilter(QOpenGLTexture::Filter filter)
void setMinimumLevelOfDetail(float value)
void setMipBaseLevel(int baseLevel)
void setMipLevelRange(int baseLevel, int maxLevel)
void setMipLevels(int levels)
void setMipMaxLevel(int maxLevel)
<comment>
void setSamples(int samples)
</comment>
void setSize(int width, int height, int depth)
void setSwizzleMask(QOpenGLTexture::SwizzleComponent component, QOpenGLTexture::SwizzleValue value)
void setSwizzleMask@2(QOpenGLTexture::SwizzleValue r, QOpenGLTexture::SwizzleValue g, QOpenGLTexture::SwizzleValue b, QOpenGLTexture::SwizzleValue a)
void setWrapMode(QOpenGLTexture::WrapMode mode)
void setWrapMode@2(QOpenGLTexture::CoordinateDirection direction, QOpenGLTexture::WrapMode mode)
QOpenGLTexture::SwizzleValue swizzleMask(QOpenGLTexture::SwizzleComponent component)
<comment>
QOpenGLTexture::Target target(void)
</comment>
GLuint textureId(void)
int width(void)
QOpenGLTexture::WrapMode wrapMode(QOpenGLTexture::CoordinateDirection direction)
GLuint boundTextureId(QOpenGLTexture::BindingTarget target)
<comment>
GLuint boundTextureId@2(uint unit, QOpenGLTexture::Target target)
</comment>
bool hasFeature(QOpenGLTexture::Feature feature)

</filter>

<class>
name: QTabBar
para: QWidget *
parent: QWidget
codename: GTabBar
passvmpointer
</class>

int addTab(QString text)
int addTab@2(QIcon icon, QString text)
int count(void)
int currentIndex(void)
bool documentMode(void)
bool drawBase(void)
Qt::TextElideMode elideMode(void)
bool expanding(void)
QSize iconSize(void)
int insertTab(int index, QString text)
int insertTab@2(int index, QIcon icon, QString text)
bool isMovable(void)
bool isTabEnabled(int index)
void moveTab(int from, int to)
void removeTab(int index)
QTabBar::SelectionBehavior selectionBehaviorOnRemove(void)
void setDocumentMode(bool set)
void setDrawBase(bool drawTheBase)
void setElideMode(Qt::TextElideMode)
void setExpanding(bool enabled)
void setIconSize(QSize size)
void setMovable(bool movable)
void setSelectionBehaviorOnRemove(QTabBar::SelectionBehavior behavior)
void setShape(QTabBar::Shape shape)
void setTabButton(int index, QTabBar::ButtonPosition position, QWidget * widget)
void setTabData(int index, QVariant data)
void setTabEnabled(int index, bool enabled)
void setTabIcon(int index, QIcon icon)
void setTabText(int index, QString text)
void setTabTextColor(int index, QColor color)
void setTabToolTip(int index, QString tip)
void setTabWhatsThis(int index, QString text)
void setTabsClosable(bool closable)
void setUsesScrollButtons(bool useButtons)
QTabBar::Shape shape(void)
int tabAt(QPoint position)
QWidget * tabButton(int index, QTabBar::ButtonPosition position)
QVariant tabData(int index)
QIcon tabIcon(int index)
QRect tabRect(int index)
QString tabText(int index)
QColor tabTextColor(int index)
QString tabToolTip(int index)
QString tabWhatsThis(int index)
bool tabsClosable(void)
bool usesScrollButtons(void)
void setCurrentIndex(int index)

void setcurrentChangedEvent(const char *)
void settabCloseRequestedEvent(const char *)
void settabMovedEvent(const char *)

const char *getcurrentChangedEvent(void)
const char *gettabCloseRequestedEvent(void)
const char *gettabMovedEvent(void)

<class>
name: QFile
para: void
parent: QFileDevice
</class>

bool copy(QString newName)
bool exists(void)
bool link(QString linkName)
bool open(FILE *fh, QIODevice::OpenMode mode, QFile::FileHandleFlags handleFlags)
bool open@2(int fd, QIODevice::OpenMode mode, QFile::FileHandleFlags handleFlags)
bool remove(void)
bool rename(QString newName)
void setFileName(QString name)
QString symLinkTarget(void)
bool copy@2(QString fileName, QString newName)
QString decodeName(QByteArray localFileName)
QString decodeName@2(char *localFileName)
QByteArray encodeName(QString fileName)
bool exists@2(QString fileName)
bool link@2(QString fileName, QString linkName)
QFile::Permissions permissions(QString fileName)
bool remove@2(QString fileName)
bool rename@2(QString oldName, QString newName)
bool resize(QString fileName, qint64 sz)
bool setPermissions(QString fileName, QFile::Permissions permissions)
QString symLinkTarget@2(QString fileName)

<class>
name: QFileDevice
parent: QIODevice
nonew
</class>

QFileDevice::FileError error(void)
bool flush(void)
int handle(void)
uchar * map(qint64 offset, qint64 size, QFileDevice::MemoryMapFlags flags)
QFileDevice::Permissions permissions(void)
bool resize(qint64 sz)
QString fileName(void)
<comment>
QDateTime fileTime(QFileDevice::FileTime time)
bool setFileTime(QDateTime newDate, QFileDevice::FileTime fileTime)
</comment>
bool setPermissions(QFileDevice::Permissions permissions)
bool unmap(uchar *address)
void unsetError(void)

<class>
name: QStandardPaths
para: void
nonew
staticmethods
</class>

QString displayName(QStandardPaths::StandardLocation type)
QString findExecutable(QString executableName, QStringList paths))
QString locate(QStandardPaths::StandardLocation type, QString fileName, QStandardPaths::LocateOptions options)
QStringList locateAll(QStandardPaths::StandardLocation type, QString fileName, QStandardPaths::LocateOptions options)
void setTestModeEnabled(bool testMode)
QStringList standardLocations(QStandardPaths::StandardLocation type)
QString writableLocation(QStandardPaths::StandardLocation type)

<filter> (iswindows() or ismacosx()) 

<class>
name: QQuickWidget
para: QWidget *
parent: QWidget
codename: GQuickWidget
passvmpointer
</class>

QQmlEngine *engine(void)
QList<QQmlError> errors(void)
QSurfaceFormat format(void)
QImage grabFramebuffer(void)
QSize initialSize(void)
QQuickWindow *quickWindow(void)
QQuickWidget::ResizeMode resizeMode(void)
QQmlContext *rootContext(void)
QQuickItem *rootObject(void)
void setClearColor(QColor color)
void setFormat(QSurfaceFormat format)
void setResizeMode(QQuickWidget::ResizeMode)
QUrl source(void)
QQuickWidget::Status status(void)
void setSource(QUrl url)

void setsceneGraphErrorEvent(const char *)
void setstatusChangedEvent(const char *)

const char *getsceneGraphErrorEvent(void)
const char *getstatusChangedEvent(void)

<class>
name: QQmlError
para: void
</class>


int column(void)
QString description(void)
bool isValid(void)
int line(void)
QObject * object(void)
void setColumn(int column)
void setDescription(QString description)
void setLine(int line)
void setObject(QObject *object)
void setUrl(QUrl url)
QString toString(void)
QUrl url(void)

</filter>


<filter> (sysget("RINGQT_ANDROID") = "" and sysget("RINGQT_NOWEBKIT") = "1")
<class>
name: QWebEngineView
para: QWidget *parent
parent: QWidget
codename: GWebEngineView
passvmpointer
</class>

bool hasSelection(void)
QWebEngineHistory *history(void)
void load(QUrl) # In RingQt use : void loadpage(QUrl) 
QWebEnginePage *page(void)
QAction *pageAction(QWebEnginePage::WebAction action)
QString selectedText(void)
void setContent(QByteArray,QString,QUrl)
void setHtml(QString,QUrl)
void setPage(QWebEnginePage *page)
void setUrl(QUrl)
void setZoomFactor(qreal factor)
QWebSettings *settings(void)
QString title(void)
void triggerPageAction(QWebEnginePage::WebAction action, bool checked)
QUrl url(void)
qreal zoomFactor(void)
void back(void)
void forward(void)
void reload(void)
void stop(void)

void setloadFinishedEvent(const char *)
void setloadProgressEvent(const char *)
void setloadStartedEvent(const char *)
void setselectionChangedEvent(const char *)
void settitleChangedEvent(const char *)
void seturlChangedEvent(const char *)

const char *getloadFinishedEvent(void)
const char *getloadProgressEvent(void)
const char *getloadStartedEvent(void)
const char *getselectionChangedEvent(void)
const char *gettitleChangedEvent(void)
const char *geturlChangedEvent(void)


</filter>

<class>
name: QScrollBar
para: QWidget *parent
parent: QAbstractSlider
</class>

