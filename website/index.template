<%  eval(read("news.data"))  %>

<div class="row">

  <div class="col-sm-12 col-md-6">

  <div id="introduction" class="panel-group">
    <div class="panel panel-default">
      <div class="panel-heading"><h4>Introduction</h4></div>
      <div class="panel-body">
		<p align="justify">
			The Ring is an innovative and practical general-purpose multi-paradigm language.

			The supported programming paradigms are imperative, procedural, object-oriented, declarative using nested structures, functional, meta programming and natural programming.
			The language is portable (Windows, Linux, macOS, Android, etc.) and can be used to create Console, GUI, Web, Games and Mobile applications.

			The language is designed to be simple, small, flexible and fast.					
		</p>
	</div>
     </div>  
  </div>

	</div>

	  <div class="col-sm-12 col-md-6">

  <div id="news" class="panel-group">
    <div class="panel panel-info">
      <div class="panel-heading"><h4>News</h4></div>
      <div class="panel-body">

			<table class="table table-striped">
				<thead>
				  <tr>
					<th width="40%">Date</th>
					<th>Description</th>
				  </tr>
				</thead>
				<tbody>
				
				<% for x=1 to 3 %>
				  <tr>
					<td><%= aNews[x][1] %></td>
					<td><%= aNews[x][2] %></td>
				  </tr>
				<% next %>				 

				</tbody>
			</table>
			<div style="text-align:right;">	  
				  <a href="news.html">See more!</a>	  
			</div>
	  </div>
     </div>  
  </div>

	</div>

</div>

<br>


<a href="#innovative" class="btn btn-default" data-toggle="collapse" style="width:100%">Innovative</a>
  <div id="innovative" class="panel-group collapse in">
    <div class="panel panel-primary">
      <div class="panel-heading"><h4>Innovative</h4></div>
      <div class="panel-body">

		<div class="row">
			<div class="col-sm-12 col-md-12">
			<p>
			The language comes with better support for Natural Language Programming and Declarative Programming. The innovation comes in supporting these paradigms with new practical techniques on the top of Object-Oriented Programming and Functional Programming. No need to know anything about (Compilers and Parsing). You get the language constructs ready for use to create domain-specific languages in a fraction of time.
			</p>
			
			<a id="ringarticle"  href="http://www.codeproject.com/Articles/1089887/The-Ring-Programming-Language" target="_blank" class="btn btn-default"  style="width:100%">Ring Article</a> 
			<a id="ringarticle4" href="https://www.codeproject.com/Articles/1137388/Syntax-Flexibility-in-the-Ring-Programming-Languag" target="_blank" class="btn btn-default"  style="width:100%">Syntax Flexibility</a> 
			<a id="ringarticle5" href="https://www.codeproject.com/Articles/1222105/The-declarative-approach-of-the-Ring-programming-l" target="_blank" class="btn btn-default"  style="width:100%">The Declarative Approach</a> 
			<a id="ringarticle3" href="https://www.codeproject.com/Articles/1138605/Natural-Language-Programming-in-the-Ring-Programmi" target="_blank" class="btn btn-default"  style="width:100%">Natural Language Programming</a> 
			<a id="ringarticle2" href="https://www.codeproject.com/Articles/1200766/Using-the-Natural-Language-Programming-Library-NLP" target="_blank" class="btn btn-default"  style="width:100%">Natural Language Programming Library</a> 
		
			
			</div>
		</div>
	  </div>
	 </div>
   </div>
 


 <a href="#practical" class="btn btn-default" data-toggle="collapse" style="width:100%">Practical</a>
  <div id="practical" class="panel-group collapse in">
    <div class="panel panel-default">
      <div class="panel-heading"><h4>Practical</h4></div>
      <div class="panel-body">

		<div class="row">
			<div class="col-sm-12 col-md-12">
		<p>
		Many of the Ring libraries (StdLib, WebLib, Natural Library, Games Engine, etc.) and the Ring IDE (Ring Notepad, Form Designer, etc.) are written in the Ring language itself.		
		Ring is ready for use in production and increase the developers productivity.
		</p>
		<br>	

		<div class="col-xs-12">
  <div id="myCarousel" class="carousel slide" data-ride="carousel">
    <!-- Indicators -->
    <ol class="carousel-indicators">
      <li data-target="#myCarousel" data-slide-to="0" class="active"></li>
      <li data-target="#myCarousel" data-slide-to="1"></li>
      <li data-target="#myCarousel" data-slide-to="2"></li>
      <li data-target="#myCarousel" data-slide-to="3"></li>
	  <li data-target="#myCarousel" data-slide-to="4"></li>
	  <li data-target="#myCarousel" data-slide-to="5"></li>
	  <li data-target="#myCarousel" data-slide-to="6"></li>
	  <li data-target="#myCarousel" data-slide-to="7"></li>
	  <li data-target="#myCarousel" data-slide-to="8"></li>
	  <li data-target="#myCarousel" data-slide-to="9"></li>
	  <li data-target="#myCarousel" data-slide-to="10"></li>	  
	  <li data-target="#myCarousel" data-slide-to="11"></li>	  
    </ol>

    <!-- Wrapper for slides -->
    <div class="carousel-inner" role="listbox">

      <div class="item active">
        <img src="newringdemo1.png" alt="" width="1366" height="729">
        <div class="carousel-caption">
          <h3></h3>
          <p></p>
        </div>
      </div>

      <div class="item">
        <img src="newringdemo2.png" alt="" width="1366" height="729">
        <div class="carousel-caption">
          <h3></h3>
          <p></p>
        </div>
      </div>
    
      <div class="item">
        <img src="newringdemo3.png" alt="" width="1366" height="729">
        <div class="carousel-caption">
          <h3></h3>
          <p></p>
        </div>
      </div>

      <div class="item">
        <img src="newringdemo4.png" alt="" width="1366" height="729">
        <div class="carousel-caption">
          <h3></h3>
          <p></p>
        </div>
      </div>
  
      <div class="item">
        <img src="newringdemo5.png" alt="" width="1366" height="729">
        <div class="carousel-caption">
          <h3></h3>
          <p></p>
        </div>
      </div>
 
      <div class="item">
        <img src="newringdemo6.png" alt="" width="1366" height="729">
        <div class="carousel-caption">
          <h3></h3>
          <p></p>
        </div>
      </div>

		<div class="item">
        <img src="newringdemo7.png" alt="" width="1366" height="729">
        <div class="carousel-caption">
          <h3></h3>
          <p></p>
        </div>
      </div>	  
	

	  <div class="item">
        <img src="newringdemo8.png" alt="" width="1366" height="729">
        <div class="carousel-caption">
          <h3></h3>
          <p></p>
        </div>
      </div>	
	
      <div class="item">
        <img src="newringdemo9.png" alt="" width="1366" height="729">
        <div class="carousel-caption">
          <h3></h3>
          <p></p>
        </div>
      </div>	  
	
	 
	  <div class="item">
        <img src="newringdemo10.png" alt="" width="1366" height="729">
        <div class="carousel-caption">
          <h3></h3>
          <p></p>
        </div>
      </div>	
	
      <div class="item">
        <img src="newringdemo11.png" alt="" width="1366" height="729">
        <div class="carousel-caption">
          <h3></h3>
          <p></p>
        </div>
      </div>	

      <div class="item">
        <img src="newringdemo12.png" alt="" width="1366" height="729">
        <div class="carousel-caption">
          <h3></h3>
          <p></p>
        </div>
      </div>	
	  

    </div>

    <!-- Left and right controls -->
    <a class="left carousel-control" href="#myCarousel" role="button" data-slide="prev">
      <span class="glyphicon glyphicon-chevron-left" aria-hidden="false"></span>
      <span class="sr-only">Previous</span>
    </a>
    <a class="right carousel-control" href="#myCarousel" role="button" data-slide="next">
      <span class="glyphicon glyphicon-chevron-right" aria-hidden="false"></span>
      <span class="sr-only">Next</span>
    </a>
	
  </div>
</div>
		
			
		
			</div>
		</div>
	  </div>
	 </div>
   </div>



 
 

<a  id="why" href="#whyring" class="btn btn-default" data-toggle="collapse" style="width:100%">Why Ring?</a>
<div id="whyring" class="panel-group collapse in">
    <div class="panel panel-default">
      <div class="panel-heading"><h4>Why Ring?</h4></div>
      <div class="panel-body">
		<p align="justify">
		The language is simple, trying to be natural, encourage organization and comes with transparent and visual implementation. 
		It comes with compact syntax and a group of features that enable the programmer to create natural interfaces and declarative 
		domain-specific languages in a fraction of time. It is very small, fast and comes with smart
		garbage collector that puts the memory under the programmer control. It supports many programming paradigms, comes with useful and practical libraries. 
		The language is designed for productivity and developing high quality solutions that can scale.
		<a href="doc1.8/faq.html#why-do-we-need-yet-another-programming-language-yapl" target="_blank"> Why? </a>
		</p>
		<br> <br>

        <div class="panel panel-primary" id="productivityscal">
	      <div class="panel-heading"><h4> Designed for a Clear Goal</h4></div>
	      <div class="panel-body">

		<p>
			<ul>
			<li>Applications programming language. <a href="doc1.8/ringapps.html" target="_blank"> Examples? </a> </li>
			<li>Productivity and developing high quality solutions that can scale.</li>			
			<li>Small and fast language that can be embedded in C/C++ projects. <a href="doc1.8/embedding.html" target="_blank"> How? </a></li>
			<li>Simple language that can be used in education and introducing Compiler/VM concepts. <a href="#education" target="_blank"> How? </a></li>
			<li>General-Purpose language that can be used for creating domain-specific libraries, frameworks and tools. <a href="doc1.8/naturallibrary.html" target="_blank"> How? </a></li>
			<li>Practical language designed for creating the next version of the Programming Without Coding Technology software. <a href="http://pwct.org" target="_blank"> What? </a></li>							
			</ul>

		</p>

	</div>
	</div>




        <div class="panel panel-primary" id="simple">
	      <div class="panel-heading"><h4> Simple </h4></div>
	      <div class="panel-body">

		Ring is a very simple language, and has a very straightforward syntax. It encourages programmers to program without boilerplate code. 
		To print something using the standard output, We can use the 'See' command. 
		<a href="doc1.8/faq.html#why-ring-uses-see-give-but-and-ok-keywords" target="_blank"> Why? </a>
		

		<p>
			<pre>
<font color="purple">see</font> "Hello, World!" 
			</pre>
		</p>

		The Main function is optional and will be executed after the statements, and is useful for using the local scope.
		<a href="doc1.8/faq.html#what-is-the-goal-of-including-the-main-function-in-ring" target="_blank"> Why? </a>
		<p>
			<pre>
<font color="purple">func</font> main
	<font color="purple">see</font> "Hello, World!" 
			</pre>
		</p>

		Uses Dynamic Typing and Lexical scoping. No $ is required before the variable name, but we can use it!
		<a href="doc1.8/syntaxflexibility.html#using-and-in-the-start-of-the-variable-name" target="_blank"> Why? </a>
		<br>
		You can use the '+' operator for string concatenation and the language is 
		weakly typed and will do simple implicit conversion between numbers and strings only based on the context.
				<a href="doc1.8/faq.html#why-is-ring-weakly-typed" target="_blank"> Why? </a>
		<p>
			<pre>
nCount = 10	<font color="green"># Global variable</font>
<font color="purple">func</font> main
	nID = 1	<font color="green"># Local variable</font>
	<font color="purple">see</font> "Count = " + nCount + nl + " ID = " + nID
			</pre>
		</p>



	</div>
	</div>

        <div class="panel panel-primary" id="natural">
	      <div class="panel-heading"><h4> Trying to be natural </h4></div>
	      <div class="panel-body">

		Ring is not case-sensitive
		<a href="doc1.8/faq.html#why-ring-is-not-case-sensitive" target="_blank"> Why? </a>
		<p>
			<pre>
<font color="purple">see</font> "Enter your name ? " 
<font color="purple">give</font> name
<font color="purple">see</font> "Hello " + Name	<font color="green"># Name is the same as name </font>
			</pre>
		</p>

		The list index starts from 1
		<a href="doc1.8/faq.html#why-the-list-index-start-from-1-in-ring" target="_blank"> Why? </a>
		<p>
			<pre>
aList = ["one","two","three"]
<font color="purple">see</font> aList[1]	<font color="green"># print one</font>
			</pre>
		</p>

		Call functions before definition
		<p>
			<pre>
one() 
two() 
three()
<font color="purple">func</font> one 
	<font color="purple">see</font> "One" + nl
<font color="purple">func</font> two 
	<font color="purple">see</font> "two" + nl
<font color="purple">func</font> three 
	<font color="purple">see</font> "three" + nl
			</pre>
		</p>

		The assignment operator uses Deep copy (no references in this operation)
		<a href="doc1.8/faq.html#why-the-assignment-operator-uses-deep-copy" target="_blank"> Why? </a>
		<p>
			<pre>
aList = ["one","two","three"]
aList2 = aList
aList[1] = 1
<font color="purple">see</font> alist[1]	<font color="green"># print 1</font>
<font color="purple">see</font> aList2[1]	<font color="green"># print one</font>
			</pre>
		</p>

		Pass numbers and strings by value, but pass lists and objects by reference.
		<br>
		The for in loop can update the list items.
		<p>
			<pre>
<font color="purple">func</font> main
	aList = [1,2,3]
	update(aList)
	<font color="purple">see</font> aList	<font color="green"># print one two three</font>

<font color="purple">func</font> update aList
	<font color="purple">for</font> x <font color="purple">in</font> aList
		<font color="purple">switch</font> x
		<font color="purple">on</font> 1 x = "one"
		<font color="purple">on</font> 2 x = "two"
		<font color="purple">on</font> 3 x = "three"
		<font color="purple">off</font>
	<font color="purple">next</font>
			</pre>
		</p>

		Using Lists during definition
		<p>
			<pre>
aList = [ [1,2,3,4,5] , aList[1] , aList[1] ]
<font color="purple">see</font> aList       <font color="green"># print 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5</font>
			</pre>
		</p>
		Exit from more than one loop
		<a href="doc1.8/faq.html#why-you-can-specify-the-number-of-loops-you-want-to-break-out-of" target="_blank"> Why? </a>
		<p>
			<pre>
<font color="purple">for</font> x = 1 <font color="purple">to</font> 10
        <font color="purple">for</font> y = 1 <font color="purple">to</font> 10
                <font color="purple">see</font> "x=" + x + " y=" + y + nl
                <font color="purple">if</font> x = 3 <font color="purple">and</font> y = 5
                        <font color="purple">exit</font> 2     <font color="green"># exit from 2 loops</font>
                <font color="purple">ok</font>
        <font color="purple">next</font>
<font color="purple">next</font>
			</pre>
		</p>


	</div>
	</div>


        <div class="panel panel-primary" id="encourageorg">
	      <div class="panel-heading"><h4> Encourage Organization </h4></div>
	      <div class="panel-body">

		The language encourage organization, Forget bad days using languages where the programmer start with
		function then class then function and a strange mix between things!
		<br><br>
		Each source file follow the next structure
		<br><br>
		<ul>
		<li>Load Files</li>
		<li>Statements and Global Variables</li>
		<li>Functions</li>
		<li>Packages and Classes</li>
		</ul>
		This enable us to use Packages, Classes and Functions without the need to use a keyword to end
		these components.
		<br> <br>
		We can write one line comments and multi-line comments
		<br>
		The comment starts with # or //
		<br>
		Multi-line comments are written between /* and */
		<p>
		<pre>
<font color="green">/* 
	Program Name : My first program using Ring
	Year         : 2017
*/</font>

<font color="purple">see</font> "What is your name? " 	<font color="green"># print message on screen</font>
<font color="purple">give</font> cName 			<font color="green"># get input from the user</font>
<font color="purple">see</font> "Hello " + cName	<font color="green">	# say hello!</font>

<font color="green">// See "Bye!"</font>
			</pre>
		</p>

	</div>
	</div>


	    <div class="panel panel-primary" id="libs">
	      <div class="panel-heading"><h4> Compact Syntax </h4></div>
	      <div class="panel-body">


		
		<p>
			The language is <b>not line sensitive</b>, you don't need to write ; after statements, also you don't need
			to press ENTER or TAB, so we can write the next code
		</p>
		<p>
			<pre>
<font color="purple">see</font> "The First Message"	<font color="purple">see</font> " Another message in the same line! " + <font color="red">nl</font>
<font color="purple">see</font> "Enter your name?" <font color="purple">give</font> <font color="red">Name</font> <font color="purple">see</font> "Hello " + <font color="red">Name</font>
			</pre>
		</p>
		<p>
			The next code create a class called Point contains three attributes X,Y and Z.
			<b>No keywords is used to end the package/class/function definition</b>.
			Also, we can <b>write the attributes names directly below the class name</b>.
		</p>
		<p>
			<pre>
<font color="purple">class</font> Point X Y Z
			</pre>
		</p>
		<p>
			We can <b>use classes and functions before their definition</b>, In this example we will
			create new object, set the object attributes then print the object values.
		</p>
		<p>
			<pre>
o1 = <font color="purple">new</font> point	o1.x=10    o1.y=20   o1.z=30	<font color="purple">see</font> O1	<font color="purple">class</font> Point X Y Z
			</pre>
		</p>
		<p>
			Instead of using the dot '.' operator to access the object attributes and methods 
			<b>we can use braces { } to access the object, then we can use the object attributes and methods</b>.
		</p>
		<p>
			<pre> 
o1 = <font color="purple">new</font> point { x=10 y=20 z=30 } <font color="purple">see</font> O1  <font color="purple">class</font> Point X Y Z
			 </pre>
		</p>
		<p>
			Now we will <b>call a method after accessing the object using { }</b>
		</p>
		<p>
<pre> 
oPerson = <font color="purple">new</font> Person
{
	Name = "Somebody"
	Address = "Somewhere"
	Phone = "0000000"
	Print()			<font color="green"># here we call the Print() method</font>
}
<font color="purple">class</font> Person Name Address Phone
	<font color="purple">func</font> Print
		<font color="purple">see</font> "Name :" + name + nl +
		    "Address :" + Address + nl +
		    "Phone : " + phone + nl
</pre>
		</p>

		<p>
			When we use { } to access the object then write any attribute name, <b>the language
			will check the class for any setter/getter methods that will be called automatically</b>.
		</p>
		<p>
<pre>
<font color="purple">new</font> Number {
		<font color="purple">see</font> one		<font color="green"># Execute GetOne()</font>
		<font color="purple">see</font> two		<font color="green"># Execute GetTwo()</font>
		<font color="purple">see</font> three	<font color="green"># Execute GetThree()</font>
}
<font color="purple">class</font> Number one two three
	<font color="purple">func</font> GetOne
		<font color="purple">see</font> "Number : One" + nl
		<font color="purple">return</font> 1
	<font color="purple">func</font> GetTwo
		<font color="purple">see</font> "Number : Two" + nl
		<font color="purple">return</font> 2
	<font color="purple">func</font> GetThree
		<font color="purple">see</font> "Number : Three" + nl
		<font color="purple">return</font> 3	
</pre>
</p>

		</div>
		</div>

	    <div class="panel panel-primary" id="libs">
	      <div class="panel-heading"><h4> Define Natural Statements based on Object-Oriented </h4></div>
	      <div class="panel-body">

		<a href="doc1.8/faq.html#why-the-ability-to-define-your-own-languages-instead-of-just-handing-over-the-syntax-so-you-can-parse-it-using-whatever-code-you-like" target="_blank"> Why? </a>

		<p>
		After the object access using { } if the class contains a method called BraceEnd() it will be executed!
		</p>
<p>
<pre>
TimeForFun = <font color="purple">new</font> journey
<font color="green"># The first surprise!</font>
<b>TimeForFun {
	Hello it is me		<font color="green"># What a beautiful programming world!</font>
}</b>
<font color="green"># Our Class</font>
<font color="purple">class</font> journey
	hello=0 it=0 is=0 me=0
	<font color="purple">func</font> GetHello
		<font color="purple">See</font> "Hello" + nl
	<font color="purple">func</font> braceEnd
		<font color="purple">See</font> "Goodbye!" + nl	
</pre>
</p>

		<p>
		We can <b>execute code written in strings using the Eval() function</b>
		</p>
<p>
<pre>
cCode = "See 'Code that will be executed later!' "
Eval(cCode)	<font color="green"># execute the code to print the message</font>
</pre>
</p>

		<p>
		<b>We can create a list then execute code generated from that list</b>
		</p>
<p>
<pre>
aWords = ["hello","it","is","me"]
<font color="purple">for</font> word <font color="purple">in</font> aWords cCode=word+"=0" eval(cCode) <font color="purple">next</font>
</pre>
</p>

		<p>
		<b>We can read text files using the Read(cFileName) function</b> and we can write files using
		the Write(cFileName,cString) function.
		</p>
<p>
<pre>
<font color="purple">see</font> "Enter File Name:" <font color="purple">give</font> cFileName <font color="purple">see</font> read(cFileName) <font color="green"># Print the file content</font>
</pre>
</p>

		<p>
		The next example presents how to create a class that defines two instructions<br>
		The first instruction is : I want window<br>
		The second instruction is : Window title = Expression <br>
		Also keywords that can be ignored like the ‘the’ keyword <br>
		</p>
<p>
<pre>
<font color="purple">new</font> App
{
        I want window
        The window title = "hello world"
}

<font color="purple">class</font> App

	<font color="green"># Attributes for the instruction I want window</font>
			i want window
			nIwantwindow = 0
	<font color="green"># Attributes for the instruction Window title</font>
	<font color="green"># Here we don't define the window attribute again</font>
			title
			nWindowTitle = 0
	<font color="green"># Keywords to ignore, just give them any value</font>
			the=0

        <font color="purple">func</font> geti
                <font color="purple">if</font> nIwantwindow = 0
                        nIwantwindow++
                <font color="purple">ok</font>

        <font color="purple">func</font> getwant
                <font color="purple">if</font> nIwantwindow = 1
                        nIwantwindow++
                <font color="purple">ok</font>

        <font color="purple">func</font> getwindow
                <font color="purple">if</font> nIwantwindow = 2
                        nIwantwindow= 0
                        <font color="purple">see</font> "Instruction : I want window" + nl
                <font color="purple">ok</font>
                <font color="purple">if</font> nWindowTitle = 0
                        nWindowTitle++
                <font color="purple">ok</font>

        <font color="purple">func</font> settitle cValue
                <font color="purple">if</font> nWindowTitle = 1
                        nWindowTitle=0
                        <font color="purple">see</font> "Instruction : Window Title = " + cValue + nl
                <font color="purple">ok</font>

        
</pre>
</p>

		<p>
		To complete the previous example, use read() to get the content of a file that contains
<pre>
        I want window
        The window title = "hello world"
</pre>
		Then use eval() to execute the content of that file!.<br>
		Also, you can update the methods GetWindow() and SetTitle() to create Real windows using the GUI Library<br>

		</p>

		</div>
		</div>

	    <div class="panel panel-primary" id="libs">
	      <div class="panel-heading"><h4> Define Declarative Languages using Nested Structures based on Object-Oriented </h4></div>
	      <div class="panel-body">


		

		<p>
		<b>We learned how to use Natural statements to execute our code and using the same features
		we can use nested structures to execute our code</b>.
		</p>
		<p>
		The next example from the Web library, generate HTML document using the Bootstrap library.
		No HTML code is written directly in this example, we created a similar language (just as example)
		Then <b>using this declarative language that uses nested structures, we generated the HTML Document.</b>.
		<br>
		The idea in this example is that the <b>GetDiv() and GetH1() methods return an object that we can 
		access using {} and after each object access the method BraceEnd() will be executed to send the 
		generated HTML to the parent object until we reach to the root where BraceEnd() will print the output</b>.
		</p>
<p>
<pre>
<font color="purple">load</font> "weblib.ring"
<font color="purple">import</font> System.Web

<font color="purple">func</font> Main

  BootStrapWebPage()
  {
        div
        {
          classname = :container
          div
          {
                classname = :jumbotron
                H1 {   text("Bootstrap Page")   }
          }
          div
          {
                classname = :row
                for x = 1 to 3
                  div
                  {
                        classname = "col-sm-4"
                        H3 { html("Welcome to the Ring programming language") }
                        P  { html("Using a scripting language is very fun!") }
                  }
                next
          }
        }
  }
</pre>
</p>

		<p>
		The classes that power the declarative interface looks like this
		</p>
<p>
<pre>
<xmp>
	class Link from ObjsBase
		title  link
		func braceend			
			cOutput = nl+GetTabs() + "<a href='" + 
				  Link + "'> "+ Title + " </a> " + nl			

	class Div from ObjsBase 
		func braceend
			cOutput += nl+'<div'
			addattributes()
			AddStyle()
			getobjsdata()
			cOutput += nl+"</div>" + nl
			cOutput = TabMLString(cOutput)
	 
</xmp>
</pre>
</p>

		</div>
		</div>
		
		<br> <br>
		
		 <div class="panel panel-primary" id="designgoals_syntaxflexibility">
	      <div class="panel-heading"><h4> Syntax Flexibility</h4></div>
	      <div class="panel-body">

		<p>
			Ring comes with many styles for writing your source code! <br> <br>

			Also you can change the language keywords and operators and create your custom style! <br>

		</p>

		  </div>
		</div>
		
		<br> <br>
<a name="education"></a>
		        <div class="panel panel-primary" id="transparentimplementation">
	      <div class="panel-heading"><h4> Transparent Implementation </h4></div>
	      <div class="panel-body">

		Ring comes with transparent implementation. We can know what is happening in each compiler stage and
		what is going on during the run-time by the Virtual Machine

		Example : ring helloworld.ring -tokens -rules -ic

		<p>
			<pre>
<font color="purple">see</font> "Hello, World!" 
			</pre>
		</p>

		Output 

		<p>
			<pre>
==================================================================
Tokens - Generated by the Scanner
==================================================================

   Keyword : SEE
   Literal : Hello, World!
   EndLine

==================================================================

==================================================================
Grammar Rules Used by The Parser
==================================================================

Rule : Program --> {Statement}

Line 1
Rule : Factor --> Literal
Rule : Range --> Factor
Rule : Term --> Range
Rule : Arithmetic --> Term
Rule : BitShift --> Arithmetic
Rule : BitAnd --> BitShift
Rule : BitOrXOR -->  BitAnd
Rule : Compare --> BitOrXOR
Rule : EqualOrNot --> Compare
Rule : LogicNot -> EqualOrNot
Rule : Expr --> LogicNot
Rule : Statement  --> 'See' Expr

==================================================================



==================================================================
Byte Code - Before Execution by the VM
==================================================================

     PC      OPCode        Data

      1     FuncExE
      2       PushC   Hello, World!
      3       Print
      4  ReturnNull

==================================================================

Hello, World!
			</pre>
		</p>

	</div>
	</div>

		<div class="panel panel-primary" id="visualimplementation">
	      <div class="panel-heading"><h4> Visual Implementation </h4></div>
	      <div class="panel-body">
		  
		  The Ring programming language is designed using the <a href="http://doublesvsoop.sourceforge.net" target="_blank">PWCT visual programming tool </a>
		  and you will find the visual source of the language in the folder
		  "visualsrc" - *.ssf files and the generated source code (In the C Language) in the		  
		  src folder and the include folder. <a href="http://github.com/ring-lang/ring"  target="_blank">Fork me on GitHub</a>
			<br><br>
		  The next screen shot from the ring_vm.ssf file (Generate ring_vm.c and ring_vm.h)
		  <br><br>
	      <div class="text-center"><img src="ringvisualsrc1.jpg" width="600"></div>
		  <br><br>
		  The next screen shot from the ring_list.ssf file (Generate ring_list.c and ring_list.h) 		  
		  <br><br>
		  <div class="text-center"><img src="ringvisualsrc2.jpg" width="600"></div>
		  
		  
	</div>
	</div>

		
		
        <div class="panel panel-primary" id="smartgc">
	      <div class="panel-heading"><h4> Smart Garbage Collector </h4></div>
	      <div class="panel-body">

		Avoid memory problems :-
		<br><br>
		<ul>
		 <li>Invalid Memory Access</li>
		 <li>Memory leaks</li>
		 <li>Uninitialized Memory Access</li>
		 <li>Dangling pointer</li>
		</ul>

		Rules :-
		<br><br>
		<ul>
 		<li>Global variables always stay in the memory, until you delete these variables using the assignment statement.</li>
		<li>Local variables always deleted after the end of the function.</li>
		<li>The programmer have full control on when to delete the variable from the memory using the Assignment statement.</li>
			<br>
      			Example:
			<pre>
aList = [1,2,3,4,5]
aList = "nice"
			</pre>
     After the second line directly, The list [1,2,3,4,5] will be deleted from the memory and we will have a string "nice"
	<br><br>
		<li>The programmer can call the function callgc() to force running the garbage collector.</li>
		<li>If we have a reference to a variable (when we pass objects and lists to functions), then deleting variables will be based on reference counting, if no references everything will be deleted, but if we have a reference, the data will stay in memory.</li>
		</ul>
	</div>
	</div>

			<br> <br>
		
		 <div class="panel panel-primary" id="designgoals_nogil">
	      <div class="panel-heading"><h4> No Global Interpreter (VM) Lock - No GIL</h4></div>
	      <div class="panel-body">

		<p>
			When we use threads in Ring applications, We don’t have global interpreter (VM) lock (No GIL) <br><br>

			So threads can work in parallel and execute Ring instructions at the same time <br><br>

			This is better for threads and concurrency (More Faster!) <br>

		</p>

		  </div>
		</div>
	

	</div>
     </div>  
  </div>


<a href="#fastenough" class="btn btn-default" data-toggle="collapse" style="width:100%">Fast</a>
  <div id="fastenough" class="panel-group collapse in">
    <div class="panel panel-default">
      <div class="panel-heading"><h4>Fast Enough For Many Applications</h4></div>
      <div class="panel-body">

		<div class="row">
			<div class="col-sm-12 col-md-12">
		<p>
		Ring is designed to be a simple, small and flexible language in the first place, but also it is fast enough for many applications.
		</p>
		<p>
		<b>Ring can do each of the next tasks in around 1 second</b> using normal computers in the market during the last 5 years  <br><br>
		
		(1) Compiling 100,000 lines of code <br>
		(2) Executing empty loop that count from 1 to 10,000,000  <br>
		(3) Executing 1000 search operation using linear search in a list contains 100,000 items, trying to find the last item (The worst case) <br>
		(4) Creating list contains 1,000,000 items then summing all of the list items<br>
		(5) Adding 20,000 items to the ListWidget in GUI applications <br>
		(6) Adding 5,000 nodes to the TreeWidget in GUI applications <br> 
		(7) Printing 10,000 messages to the terminal in Console applications <br><br>		
		
		Also when we need more speed we can use C/C++ extensions! <br>
		
		</p>
		<br>	

		<div class="col-xs-12">
  <div id="myCarousel2" class="carousel slide" data-ride="carousel">
    <!-- Indicators -->
    <ol class="carousel-indicators">
      <li data-target="#myCarousel2" data-slide-to="0" class="active"></li>
      <li data-target="#myCarousel2" data-slide-to="1"></li>
      <li data-target="#myCarousel2" data-slide-to="2"></li>
      <li data-target="#myCarousel2" data-slide-to="3"></li> 
    </ol>

    <!-- Wrapper for slides -->
    <div class="carousel-inner" role="listbox">

      <div class="item active">
        <img src="ringdemo1_speed.png" alt="" width="1366" height="729">
        <div class="carousel-caption">
          <h3></h3>
          <p></p>
        </div>
      </div>

      <div class="item">
        <img src="ringdemo2_speed.png" alt="" width="1366" height="729">
        <div class="carousel-caption">
          <h3></h3>
          <p></p>
        </div>
      </div>
    
      <div class="item">
        <img src="ringdemo3_speed.png" alt="" width="1366" height="729">
        <div class="carousel-caption">
          <h3></h3>
          <p></p>
        </div>
      </div>

      <div class="item">
        <img src="ringdemo4_speed.png" alt="" width="1366" height="729">
        <div class="carousel-caption">
          <h3></h3>
          <p></p>
        </div>
      </div>
  
  

    </div>

    <!-- Left and right controls -->
    <a class="left carousel-control" href="#myCarousel2" role="button" data-slide="prev">
      <span class="glyphicon glyphicon-chevron-left" aria-hidden="false"></span>
      <span class="sr-only">Previous</span>
    </a>
    <a class="right carousel-control" href="#myCarousel2" role="button" data-slide="next">
      <span class="glyphicon glyphicon-chevron-right" aria-hidden="false"></span>
      <span class="sr-only">Next</span>
    </a>
	
  </div>
</div>
			
		
			</div>
		</div>
	  </div>
	 </div>
   </div>

  

<a href="#features" class="btn btn-default" data-toggle="collapse" style="width:100%">Features</a>
  <div id="features" class="panel-group collapse in">
    <div class="panel panel-default">
      <div class="panel-heading"><h4>Features</h4></div>
      <div class="panel-body">

	  <div class="row">
	  <div class="col-sm-12 col-md-4">

	    <div class="panel panel-primary">
	      <div class="panel-heading">Free and Innovative</div>
	      <div class="panel-body">
			<ul>
				<li>Free Open Source (MIT License)</li>			
				<li>Declarative programming on the top of Object-Oriented programming</li>
				<li>No explicit end for statements (No ; or ENTER is required)</li>
				<li>For in get item by reference not value, you can read/edit the item</li>
				<li>Use exit to go outside from more than one loop</li>
				<li>No keyword to end Functions, Classes and Packages</li>
				<li>using { } to access objects and use attributes/methods as variables/functions</li>
				<li>Clear program structure (Statements then functions then packages &amp; classes)</li>
				<li>Optional Printing for Tokens/Grammar/Byte-Code during execution</li>		
			</ul>
	      </div>	      
            </div>
	 </div>

	 <div class="col-sm-12 col-md-4">
	    <div class="panel panel-primary">
	      <div class="panel-heading">Powerful Implementation</div>
	      <div class="panel-body">

		<ul>
		<li>Hybrid Implementation (Compiler+VM)</li>
		<li>The compiler + The Virtual Machine are 15,000 lines of C code</li>
		<li>The other 500,000 lines of code are related to libraries!</li>
		<li>Written in ANSI C (The code is generated)</li>
		<li>Developed using Visual Programming (PWCT)</li>
		<li>Portable (Windows, Linux &amp; macOS, Android, etc.)</li>
		</ul>
	       </div>
           </div>
    	</div>

    	<div class="col-sm-12 col-md-4">

	    <div class="panel panel-primary">
	      <div class="panel-heading">Simple</div>
	      <div class="panel-body">

		<ul>
		<li>Comments (One line &amp; Multi-line)</li>
		<li>Not Case-Sensitive</li>
		<li>Structure Programming</li>
		<li>Rich control structures &amp; Operators</li>
		<li>Procedures/Functions</li>
		<li>Main Function (optional)</li>
		<li>Call Function before the definition</li>
		<li>Recursion</li>
		<li>Multi-line literals</li>
		<li>Access (read/write) string letter by index</li>
		<li>The list index start from 1</li>
		<li>Range operator ex: 1:10</li>
		<li>First Class Variables, Lists, Objects and Functions</li>
		<li>Store/Copy Lists/Objects by value (Deep Copy)</li>
		<li>Pass Lists/Objects by reference</li>
		<li>8-bit clean, work on binary data directly</li>
		</ul>
	      </div>
           </div>

    	</div>
	</div>

	<br> <br>

  	<div class="row">

	<div class="col-sm-12 col-md-4">

	    <div class="panel panel-primary">
	      <div class="panel-heading"> Dynamic</div>
	      <div class="panel-body">

		<ul>
		<li>Dynamic Typing</li>
		<li>Weakly typed</li>
		<li>Lexical Scoping (Global, Local &amp; Object State)</li>
		<li>Default scope for variables inside functions (Local)</li>
		<li>Default scope for variables outside functions (global)</li>
		<li>Garbage Collector - Automatic Memory Management (Escape Analysis and Reference Counting)</li>
		<li>Exception Handling</li>
		<li>Eval() to execute code during run-time</li>
		</ul>
	      
	      </div>
           </div>
	</div>

	<div class="col-sm-12 col-md-4">

	    <div class="panel panel-primary">
	      <div class="panel-heading"> Native Object-Oriented Support</div>
	      <div class="panel-body">

		<ul>
		<li>Encapsulation</li>
		<li>Setter/Getter (optional)</li>
		<li>private state (optional)</li>
		<li>Instantiation</li>
		<li>Polymorphism</li>
		<li>Composition</li>
		<li>Inheritance (Single Inheritance)</li>
		<li>Operator Overloading</li>
		<li>Packages</li>
		<li>Reflection and Meta-programming</li>
		</ul>
     
	      </div>
           </div>
	</div>

	<div class="col-sm-12 col-md-4">

	    <div class="panel panel-primary">
	      <div class="panel-heading"> Standard Library </div>
	      <div class="panel-body">

		<ul>
		<li>I/O commands</li><li>Math functions</li>
		<li>String functions</li>
		<li>List functions</li>
		<li>File processing functions</li>
		<li>Database support (ODBC &amp; MySQL)</li>
		<li>Security Functions (OpenSSL)</li>
		<li>Internet Functions (LibCurl)</li>
		</ul>
	      
	      </div>
           </div>

    	</div>
  </div>

	<br>
	<br>

  <div class="row">
    <div class="col-sm-12 col-md-4">

	    <div class="panel panel-primary">
	      <div class="panel-heading"> CGI Library (Written in Ring)  </div>
	      <div class="panel-body">

		<ul>
		<li>CGI LIbrary - HTTP Get</li>
		<li>CGI LIbrary - HTTP Post</li>
		<li>CGI LIbrary - File upload</li>
		<li>CGI LIbrary - Cookies</li>
		<li>CGI LIbrary - URL Encode</li>
		<li>CGI LIbrary - Templates</li>
		<li>CGI LIbrary - HTML Special Characters</li>
		<li>CGI LIbrary - HTML Generation using Functions</li>
		<li>CGI LIbrary - HTML Generation using Classes</li>
		<li>CGI LIbrary - CRUD Example (using MVC)</li>
		<li>CGI Library - Users Example (Register, Login and Check)</li>
		</ul>

	      
	      </div>
           </div>
    </div>

    <div class="col-sm-12 col-md-4">

	    <div class="panel panel-primary">
	      <div class="panel-heading"> Extension  </div>
	      <div class="panel-body">

		<ul>
		<li>Extension using C/C++ (Simple API)</li>
		<li>Embedding the language in C/C++ programs</li>
		<li>Comes with code generator (Written in Ring) to quickly wrap C/C++ Libraries</li>
		<li>Create 2D Games (Using the Allegro Library)</li>
		<li>Create GUI Applications for Desktop and Mobile (Using the Qt Framework)</li>
		</ul>
	      
	      </div>
           </div>
    </div>

    <div class="col-sm-12 col-md-4">
	    <div class="panel panel-primary">
	      <div class="panel-heading"> More </div>
	      <div class="panel-body">

		<ul>
		<li>Very Stable</li>
		<li>Good Performance</li>
		<li>Complete Documentation</li>
		</ul>
	      
	      </div>
           </div>
    </div>
 
  </div>


 
      </div>
    </div>  
  </div>

  
 <a id="ringbook" href="https://en.wikibooks.org/wiki/Ring" target="_blank" class="btn btn-default"  style="width:100%">Ring in Wikibooks</a> 
 <a id="ringsamples" href="https://rosettacode.org/wiki/Category:Ring" target="_blank" class="btn btn-default"  style="width:100%">Ring Samples (Rosettacode)</a> 

 
  
</div>

